{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///geolocator.min.js","webpack:///webpack/bootstrap 01ee82e326c666f6ff93","webpack:///./src/index.js","webpack:///./src/core/geolocator.js","webpack:///./src/lib/utils.js","webpack:///./src/lib/fetch.js","webpack:///./src/core/geo.helper.js","webpack:///./src/core/enums.js","webpack:///./src/core/geo.error.js","webpack:///./src/core/geo.watcher.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_geolocator","_geolocator2","_classCallCheck","instance","Constructor","TypeError","invalidOriginOrDest","value","_utils2","isString","isArray","isPlainObject","getXHRResponse","err","xhr","_geo4","create","Code","REQUEST_FAILED","response","safeJsonParse","responseText","fromResponse","checkGoogleKey","options","addressLookup","timezone","map","staticMap","geolocator","_","config","google","key","GOOGLE_KEY_INVALID","getMapOpts","mapOptions","location","isObject","center","coords","element","formattedAddress","title","zoom","isNumber","accuracy","configCreateMap","elem","mapData","_geolocatorMapData","marker","infoWindow","maps","LatLng","latitude","longitude","mapTypeId","styles","setOptions","Map","Marker","event","clearInstanceListeners","setMap","position","InfoWindow","setContent","addListener","open","setLocationURLs","address","cc","countryCode","length","country","flag","_enums2","URL","FLAG","toLowerCase","opts","clone","getStaticMap","callbackMap","callback","createMap","error","geocode","reverse","_geo2","fetchAddressAndTimezone","getTZ","cb","getTimeZone","loc","timestamp","time","own","reverseGeocode","result","extend","locateAccurate","onPositionReceived","onPositionError","complete","POSITION_UNAVAILABLE","watcher","onProgress","isFunction","noop","watch","clear","cycle","desiredAccuracy","maximumWait","Object","defineProperty","_typeof","Symbol","iterator","constructor","prototype","_createClass","defineProperties","target","props","i","descriptor","enumerable","configurable","writable","protoProps","staticProps","_utils","_fetch","_fetch2","_geo","_geo3","_geo5","_geo6","_enums","EARTH_RADIUS_KM","EARTH_RADIUS_MI","defaultConfig","language","https","version","INVALID_PARAMETERS","conf","MapTypeId","ROADMAP","size","width","height","scale","format","ImageFormat","PNG","region","String","url","GOOGLE_SATATIC_MAP","color","encodeURIComponent","isFilledArray","mapStylesToParams","undefined","e","document","getElementById","isJQueryObject","isGoogleLoaded","getDiv","isElement","isNode","ensureGoogleLoaded","GOOGLE_API_FAILED","message","fallbackToIP","locateByIP","enableHighAccuracy","timeout","maximumAge","isGeolocationSupported","navigator","geolocation","getCurrentPosition","GEOLOCATION_NOT_SUPPORTED","homeMobileCountryCode","homeMobileNetworkCode","radioType","carrier","cellTowers","wifiAccessPoints","raw","considerIp","setProtocol","GOOGLE_GEOLOCATION","xhrOpts","headers","Content-Type","data","JSON","stringify","post","isGeoError","lat","lng","source","geoIpSource","INVALID_GEO_IP_SOURCE","jsonpOpts","async","clean","callbackParam","rootName","globalVar","jsonp","window","INVALID_RESPONSE","schema","mapToSchema","provider","Number","isStringSet","freeze","onPositionChanged","pos","distance","calcDistance","from","to","formula","DistanceFormula","HAVERSINE","unitSystem","targetReached","radius","clearOnError","UnitSystem","METRIC","GOOGLE_TIMEZONE","timeZoneId","name","timeZoneName","abbr","dots","dstOffset","rawOffset","o","origins","origin","d","destinations","destination","toPointList","travelMode","TravelMode","DRIVING","avoidFerries","avoidHighways","avoidTolls","service","DistanceMatrixService","getDistanceMatrix","status","DistanceMatrixStatus","OK","formatDistanceResults","dLat","degToRad","dLng","a","Math","sin","cos","atan2","sqrt","latA","latB","lngA","lngB","x","y","IP","params","k","GOOGLE_MAPS_API","isPositionError","km","mi","degrees","PI","radians","dec","isLng","arguments","sign","sn","we","nsew","absValue","abs","round","floor","get","LocationType","RadioType","setGeoIPSource","ip","city","state","stateCode","postalCode","_toString","toString","utils","trim","type","Boolean","array","isDate","object","HTMLElement","nodeType","Node","jQuery","isError","Error","removeQuery","str","replace","removeProtocol","protocol","trimDots","encodeURI","decodeURI","decodeURIComponent","randomString","len","random","slice","upper","s","match","join","toUpperCase","keys","encode","operator","separator","include","exclude","inc","exc","forIn","indexOf","v","push","notateGlobalObj","notation","levels","split","shift","forEach","note","_len","sources","Array","_key","concat","Date","cloned","hasOwnProperty","mapped","parse","seconds","ts","now","parseInt","_xhr","method","fetch","execCb","timeUp","clearTimeout","script","parentNode","removeChild","rootNameSet","cbFnName","defer","createElement","cbParamSet","query","qMark","fn","readyState","onreadystatechange","onload","onerror","errMsg","charset","crossorigin","src","getElementsByTagName","appendChild","setTimeout","XMLHttpRequest","hasCallback","withCredentials","mimeType","username","password","XHR_READY_STATE","DONE","crossDomain","ontimeout","setRequestHeader","overrideMimeType","send","UNSENT","OPENED","HEADERS_RECEIVED","LOADING","geoHelper","toGoogleCoords","fromGoogleCoords","arr","getGeocodeComps","comp","route","locality","administrative_area","administrativeArea","postal_code","buildGeocodeParams","placeId","geoComps","b","bounds","southwestLat","southwestLng","northeastLat","northeastLng","formatGeocodeResults","results","comps","address_components","types","long_name","short_name","geometry","commonName","point_of_interest","premise","subpremise","colloquial_area","streetNumber","street_number","street","administrative_area_level_4","administrative_area_level_3","neighborhood","administrative_area_level_5","town","sublocality","administrative_area_level_2","administrative_area_level_1","administrative_area_level_1_s","country_s","formatted_address","location_type","place_id","prop","coordsSet","GOOGLE_GEOCODE","gErr","originAddresses","dests","destinationAddresses","rows","oIndex","dest","dIndex","elements","duration","fare","style","stylers","featureType","elementType","val","propName","propVal","GOOGLE_MAPS_API_BASE","enums","GOOGLE_DISTANCE_MATRIX","HYBRID","SATELLITE","TERRAIN","ROOFTOP","RANGE_INTERPOLATED","GEOMETRIC_CENTER","APPROXIMATE","WALKING","BICYCLING","TRANSIT","IMPERIAL","LTE","GSM","CDMA","WCDMA","PYTHAGOREAN","PNG_8","PNG_32","GIF","JPG","JPG_BASELINE","errorCodeFromStatus","GeoError","NOT_FOUND","errorCodeFromReason","reason","INVALID_REQUEST","DAILY_LIMIT_EXCEEDED","USER_RATE_LIMIT_EXCEEDED","PARSE_ERROR","code","UNKNOWN_ERROR","captureStackTrace","stack","msg","PERMISSION_DENIED","TIMEOUT","isValidErrorCode","errCode","error_message","errorMessage","errors","errorCode","setPrototypeOf","REQUEST_DENIED","OVER_QUERY_LIMIT","MAX_ELEMENTS_EXCEEDED","MAX_DIMENSIONS_EXCEEDED","MAX_WAYPOINTS_EXCEEDED","INTERNAL_ERROR","GeoWatcher","onChange","onError","_this","isCleared","_timer","watchPosition","clearWatch","delay","_this2","_clear"],"mappings":"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","file":"geolocator.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"geolocator\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"geolocator\"] = factory();\n\telse\n\t\troot[\"geolocator\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"geolocator\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"geolocator\"] = factory();\n\telse\n\t\troot[\"geolocator\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"dist/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _geolocator = __webpack_require__(1);\n\t\n\tvar _geolocator2 = _interopRequireDefault(_geolocator);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t// export default geolocator;\n\t// http://stackoverflow.com/a/33683495/112731\n\tmodule.exports = _geolocator2.default;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _utils = __webpack_require__(2);\n\t\n\tvar _utils2 = _interopRequireDefault(_utils);\n\t\n\tvar _fetch = __webpack_require__(3);\n\t\n\tvar _fetch2 = _interopRequireDefault(_fetch);\n\t\n\tvar _geo = __webpack_require__(4);\n\t\n\tvar _geo2 = _interopRequireDefault(_geo);\n\t\n\tvar _geo3 = __webpack_require__(6);\n\t\n\tvar _geo4 = _interopRequireDefault(_geo3);\n\t\n\tvar _geo5 = __webpack_require__(7);\n\t\n\tvar _geo6 = _interopRequireDefault(_geo5);\n\t\n\tvar _enums = __webpack_require__(5);\n\t\n\tvar _enums2 = _interopRequireDefault(_enums);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t *  Radius of earth in kilometers.\n\t *  @private\n\t *  @type {Number}\n\t */\n\tvar EARTH_RADIUS_KM = 6371;\n\t\n\t/**\n\t *  Radius of earth in miles.\n\t *  @private\n\t *  @type {Number}\n\t */\n\tvar EARTH_RADIUS_MI = 3959;\n\t\n\t/**\n\t *  Storage for Geolocator default configuration.\n\t *\n\t *  @readonly\n\t *  @private\n\t */\n\tvar defaultConfig = {\n\t    language: 'en',\n\t    https: true,\n\t    google: {\n\t        version: '3', // latest 3.x\n\t        key: '',\n\t        styles: null\n\t    }\n\t};\n\t\n\t/**\n\t *  Geolocator library that provides methods for getting geo-location information,\n\t *  geocoding, address look-ups, distance & durations, timezone information and more...\n\t *  This library makes use of HTML5 position feautures, implements Google APIs\n\t *  and other services.\n\t *\n\t *  <b>Important Notes:</b>\n\t *\n\t *  Although some calls might work without a key, it is generally required by\n\t *  most {@link https://developers.google.com/maps/faq#using-google-maps-apis|Goolge APIs}\n\t *  (such as Time Zone API). To get a free (or premium) key,\n\t *  {@link https://developers.google.com/maps/documentation/javascript/|click here}.\n\t *  After getting a key, you can enable multiple APIs for it. Make sure you\n\t *  {@link https://console.developers.google.com|enable}\n\t *  all the APIs supported by Geolocator.\n\t *\n\t *  Note that browser API keys cannot have referer restrictions when used\n\t *  with some Google APIs.\n\t *\n\t *  Make sure your doctype is HTML5 and you're calling Geolocation APIs from an\n\t *  HTTPS page. Geolocation API is removed from unsecured origins in Chrome 50.\n\t *  Other browsers are expected to follow.\n\t *\n\t *  @license MIT\n\t *  @copyright 2016, Onur Yıldırım (onur@cutepilot.com)\n\t */\n\t\n\tvar geolocator = function () {\n\t    function geolocator() {\n\t        _classCallCheck(this, geolocator);\n\t    }\n\t\n\t    _createClass(geolocator, null, [{\n\t        key: 'config',\n\t\n\t\n\t        // ---------------------------\n\t        // STATIC METHODS\n\t        // ---------------------------\n\t\n\t        /**\n\t         *  Sets or gets the geolocator configuration object.\n\t         *  Make sure you configure Geolocator before calling other methods that\n\t         *  require a Google API key.\n\t         *\n\t         *  @param {Object} [options]\n\t         *         Configuration object. If omitted, this method returns the current\n\t         *         configuration.\n\t         *      @param {String} [options.language=\"en\"]\n\t         *             Language to be used for API requests that supports language\n\t         *             configurations. This is generally used for Google APIs.\n\t         *             See {@link https://developers.google.com/maps/faq#languagesupport|supported languages}.\n\t         *      @param {Boolean} [options.https=true]\n\t         *             As Google recommends; using HTTPS encryption makes your site\n\t         *             more secure, and more resistant to snooping or tampering.\n\t         *             If set to `true`, the API calls are made over HTTPS, at all\n\t         *             times. Setting to `false` will switch to HTTP (even if the\n\t         *             page is on HTTPS). And if set to `null`, current protocol will\n\t         *             be used. Note that some APIs might not work with HTTP such as\n\t         *             Google Maps TimeZone API.\n\t         *      @param {Object} [options.google]\n\t         *             Google specific options.\n\t         *          @param {String} [options.google.version=\"3\"]\n\t         *                 Google Maps API version to be used (with\n\t         *                 `geolocator.createMap()`) method. The default version\n\t         *                 value is tested and works with Geolocator. You can set a\n\t         *                 greater value or the latest version number and it should\n\t         *                 work; but it's not guaranteed. Find out the\n\t         *                 {@link https://developers.google.com/maps/documentation/javascript/versions|latest version here}.\n\t         *          @param {String} [options.google.key=\"\"]\n\t         *                 API key to be used with Google API calls. Although some\n\t         *                 calls might work without a key, it is generally required\n\t         *                 by most Goolge APIs. To get a free (or premium) key,\n\t         *                 {@link https://developers.google.com/maps/documentation/javascript/|click here}.\n\t         *          @param {Array} [options.google.styles]\n\t         *                 An array of objects to customize the presentation of the\n\t         *                 Google base maps, changing the visual display of such\n\t         *                 elements as roads, parks, and built-up areas.\n\t         *                 See {@link https://developers.google.com/maps/documentation/javascript/styling|Styling Maps}.\n\t         *\n\t         *  @returns {Object} - Returns the current or updated configuration object.\n\t         *\n\t         *  @example\n\t         *  geolocator.config({\n\t         *      language: \"en\",\n\t         *      google: {\n\t         *          version: \"3\",\n\t         *          key: \"YOUR-GOOGLE-API-KEY\"\n\t         *      }\n\t         *  });\n\t         */\n\t        value: function config(options) {\n\t            if (options) {\n\t                geolocator._.config = _utils2.default.extend(defaultConfig, options);\n\t            }\n\t            return geolocator._.config;\n\t        }\n\t\n\t        /**\n\t         *  Gets a static map image URL which can be embeded via an `<img />` tag\n\t         *  on the page.\n\t         *\n\t         *  Note that, if `options.center` is set to an address (instead of\n\t         *  coordinates) and `options.marker` is also set; we will need to geocode\n\t         *  that address to get center coordinates for the marker.\n\t         *  In this case, you must use the `callback` parameter to get the async\n\t         *  result. Otherwise, this method will directly return a `String`.\n\t         *\n\t         *  Make sure you have enabled Static Maps API (and Geocoding API if\n\t         *  `marker` is enabled) in your Google Developers console.\n\t         *\n\t         *  For interactive map, see {@link #geolocator.createMap|`geolocator.createMap()` method}.\n\t         *\n\t         *  @see {@link https://developers.google.com/maps/documentation/static-maps/intro|Static Maps}\n\t         *  @see {@link https://developers.google.com/maps/documentation/static-maps/usage-limits|Usage Limits}\n\t         *\n\t         *  @param {Object} options\n\t         *         Static map options.\n\t         *         @param {String|Object} options.center\n\t         *                Defines the center of the map and the location.\n\t         *                Either an address `String` or an coordinates `Object` with\n\t         *                `latitude:Number` and `longitude:Number` properties.\n\t         *         @param {String} [options.mapTypeId=\"roadmap\"]\n\t         *                Type of the map to be created.\n\t         *                See {@link #geolocator.MapTypeId|`geolocator.MapTypeId` enumeration}\n\t         *                for possible values.\n\t         *         @param {String|Object} [options.size=\"600x300\"]\n\t         *                Defines the size (in pixels) of the returned image.\n\t         *                Either a string in `widthxheight` format or an Object\n\t         *                with `width:Number` and `height:Number` properties.\n\t         *         @param {Number} [options.scale=1]\n\t         *                Affects the number of pixels that are returned. scale=2\n\t         *                returns twice as many pixels as scale=1 while retaining\n\t         *                the same coverage area and level of detail (i.e. the\n\t         *                contents of the map don't change). Accepted values are 1,\n\t         *                2 and 4 (4 is only available to Google Maps APIs Premium\n\t         *                Plan customers.)\n\t         *         @param {Number} [options.zoom=9]\n\t         *                Zoom level to be set for the map.\n\t         *         @param {String} [options.format=png]\n\t         *                Defines the format of the resulting image.\n\t         *                See {@link #geolocator.ImageFormat|`geolocator.ImageFormat` enumeration}\n\t         *                for possible values.\n\t         *         @param {Boolean|String} [options.marker=true]\n\t         *                Specifies whether to add a marker to the center of the map.\n\t         *                You can define the color of the marker by passing a color\n\t         *                `String` instead of a `Boolean`. Color can be a predefined\n\t         *                color from the set `red` (default), `black`, `brown`,\n\t         *                `green`, `purple`, `yellow`, `blue`, `gray`, `orange` and\n\t         *                `white`; or a HEX 24-bit color (e.g. `\"0xFF0000\"`).\n\t         *                Note that marker will not be visible if `center` is set to\n\t         *                a `String` address and you don't use the callback.\n\t         *         @param {String} [options.region]\n\t         *                Defines the appropriate borders to display, based on\n\t         *                geo-political sensitivities. Accepts a region code\n\t         *                specified as a two-character ccTLD (top-level domain)\n\t         *                value. e.g. `\"us\"`.\n\t         *         @param {Array} [options.styles]\n\t         *                An array of objects to customize the presentation of the\n\t         *                Google base maps, changing the visual display of such\n\t         *                elements as roads, parks, and built-up areas.\n\t         *                This will default to the global styles set via\n\t         *                {@link #geolocator.config|`geolocator.config()` method}, if any.\n\t         *                See {@link https://developers.google.com/maps/documentation/javascript/styling|Styling Maps}.\n\t         *\n\t         *  @param {Function} [callback]\n\t         *         Callback function to be executed when the static map URL is built.\n\t         *         This takes 2 arguments: `function (err, url) { ... }`.\n\t         *         If omitted, this method will directly return the static map\n\t         *         image URL; but (if enabled) the marker will not be visible if\n\t         *         `options.center` is set to an address `String` instead of a\n\t         *         coordinates `Object`.\n\t         *\n\t         *  @returns {String|void}\n\t         *           If a callback is passed, this will return `void`.\n\t         *           Otherwise, a `String` that represents the URL of the static map.\n\t         *\n\t         *  @example\n\t         *  // Async example (with address and marker)\n\t         *  var options = {\n\t         *      center: \"Los Angles, CA, US\",\n\t         *      mapTypeId: geolocator.MapTypeId.ROADMAP,\n\t         *      size: \"600x300\",\n\t         *      scale: 1,\n\t         *      zoom: 5,\n\t         *      marker: \"0xFFCC00\",\n\t         *      format: geolocator.ImageFormat.PNG\n\t         *  };\n\t         *  geolocator.getStaticMap(options, function (err, url) {\n\t         *      if (!err) {\n\t         *          document.getElementById('my-img').src = url;\n\t         *      }\n\t         *  });\n\t         *\n\t         *  @example\n\t         *  // Sync example (with coordinates)\n\t         *  var options = {\n\t         *      center: {\n\t         *          longitude: 34.0522342,\n\t         *          latitude: -118.2436849\n\t         *      },\n\t         *      mapTypeId: geolocator.MapTypeId.ROADMAP,\n\t         *      size: \"600x300\",\n\t         *      scale: 1,\n\t         *      zoom: 5,\n\t         *      marker: \"0xFFCC00\",\n\t         *      format: geolocator.ImageFormat.PNG\n\t         *  };\n\t         *  document.getElementById('my-img').src = geolocator.getStaticMap(options);\n\t         */\n\t\n\t    }, {\n\t        key: 'getStaticMap',\n\t        value: function getStaticMap(options, callback) {\n\t            if (!_utils2.default.isPlainObject(options) || !options.center) {\n\t                throw new _geo4.default(_geo4.default.Code.INVALID_PARAMETERS, 'A center address or coordinates are required.');\n\t            }\n\t\n\t            if (_utils2.default.isString(options.center)) {\n\t                return geolocator.geocode(options.center, function (err, location) {\n\t                    if (err) callback(err);\n\t                    options.center = location.coords;\n\t                    callback(null, geolocator.getStaticMap(options));\n\t                });\n\t            }\n\t\n\t            var conf = geolocator._.config;\n\t            var opts = _utils2.default.extend({\n\t                mapTypeId: _enums2.default.MapTypeId.ROADMAP,\n\t                size: {\n\t                    width: 600,\n\t                    height: 300\n\t                },\n\t                scale: 1, // 1 | 2 | (4 for business customers of google maps)\n\t                zoom: 9,\n\t                marker: 'red',\n\t                format: _enums2.default.ImageFormat.PNG,\n\t                language: conf.language || 'en',\n\t                region: null\n\t            }, options);\n\t\n\t            var center = _utils2.default.isPlainObject(opts.center) ? opts.center.latitude + ',' + opts.center.longitude : String(opts.center);\n\t\n\t            var size = _utils2.default.isPlainObject(opts.size) ? opts.size.width + 'x' + opts.size.height : String(opts.size);\n\t\n\t            var url = _enums2.default.URL.GOOGLE_SATATIC_MAP // not using utils.setProtocol() here\n\t            + ('?center=' + center + '&maptype=' + opts.mapTypeId) + ('&size=' + size + '&scale=' + opts.scale + '&zoom=' + opts.zoom) + ('&format=' + opts.format + '&language=' + opts.language);\n\t\n\t            if (opts.marker) {\n\t                var color = _utils2.default.isString(opts.marker) ? opts.marker : 'red';\n\t                url += '&markers=' + encodeURIComponent('color:' + color + '|' + center);\n\t            }\n\t            if (opts.region) url += '&region=' + opts.region;\n\t            if (conf.google.key) url += '&key=' + conf.google.key;\n\t\n\t            var styles = !_utils2.default.isFilledArray(opts.styles) ? _utils2.default.isFilledArray(conf.google.styles) ? conf.google.styles : null : opts.styles;\n\t            if (styles) url += '&' + _geo2.default.mapStylesToParams(styles);\n\t\n\t            if (_utils2.default.isFunction(callback)) return callback(null, url);\n\t            return url;\n\t        }\n\t\n\t        /**\n\t         *  Creates an interactive Google Map within the given element.\n\t         *  Make sure you have enabled Google Static Maps API in your Google Developers console.\n\t         *  For static map, see {@link #geolocator.getStaticMap|`geolocator.getStaticMap()` method}.\n\t         *  @see {@link https://developers.google.com/maps/documentation/javascript/reference|Google Maps JavaScript API}\n\t         *  @see {@link https://developers.google.com/maps/documentation/javascript/usage|Usage Limits}\n\t         *\n\t         *  @param {Object|String|HTMLElement|Map} options\n\t         *         Either map options object with the following properties or; the ID\n\t         *         of a DOM element, or element itself which the map will be\n\t         *         created within; or a previously created `google.maps.Map` instance.\n\t         *         If a map instance is set, this only will apply the options without\n\t         *         re-creating it.\n\t         *      @param {String|HTMLElement|Map} options.element\n\t         *             Either the ID of a DOM element or the element itself;\n\t         *             which the map will be created within; or a previously created\n\t         *             `google.maps.Map` instance. If a map instance is set, this\n\t         *             only will apply the options without re-creating it.\n\t         *      @param {Object} options.center\n\t         *             Center coordinates for the map to be created.\n\t         *          @param {Number} options.center.latitude\n\t         *                 Latitude of the center point coordinates.\n\t         *          @param {Number} options.center.longitude\n\t         *                 Longitude of the center point coordinates.\n\t         *      @param {String} [options.mapTypeId=\"roadmap\"]\n\t         *             Type of the map to be created.\n\t         *             See {@link #geolocator.MapTypeId|`geolocator.MapTypeId` enumeration}\n\t         *             for possible values.\n\t         *      @param {String} [options.title]\n\t         *             Title text to be displayed within an `InfoWindow`, when the\n\t         *             marker is clicked. This only take effect if `marker` is\n\t         *             enabled.\n\t         *      @param {Boolean} [options.marker=true]\n\t         *             Whether to place a marker at the given coordinates.\n\t         *             If `title` is set, an `InfoWindow` will be opened when the\n\t         *             marker is clicked.\n\t         *      @param {Number} [options.zoom=9]\n\t         *             Zoom level to be set for the map.\n\t         *      @param {Array} [options.styles]\n\t         *             An array of objects to customize the presentation of the\n\t         *             Google base maps, changing the visual display of such\n\t         *             elements as roads, parks, and built-up areas.\n\t         *             This will default to the global styles set via\n\t         *             {@link #geolocator.config|`geolocator.config` method}`, if any.\n\t         *             See {@link https://developers.google.com/maps/documentation/javascript/styling|Styling Maps}.\n\t         *\n\t         *  @param {Function} callback\n\t         *         Callback function to be executed when the map is created.\n\t         *         This takes 2 arguments: `function (err, map) { ... }`.\n\t         *         See {@link #geolocator~MapData|`geolocator~MapData` type} for details.\n\t         *\n\t         *  @returns {void}\n\t         *\n\t         *  @example\n\t         *  var options = {\n\t         *      element: \"my-map\",\n\t         *      center: {\n\t         *          latitude: 48.8534100,\n\t         *          longitude: 2.3488000\n\t         *  \t},\n\t         *  \tmarker: true,\n\t         *  \ttitle: \"Paris, France\",\n\t         *  \tzoom: 12\n\t         *  };\n\t         *  geolocator.createMap(options, function (err, map) {\n\t         *      if (map && map.infoWindow) {\n\t         *          map.infoWindow.open(map.instance, map.marker);\n\t         *      }\n\t         *  });\n\t         */\n\t\n\t    }, {\n\t        key: 'createMap',\n\t        value: function createMap(options, callback) {\n\t            // if options is not a plain object, consider element ID, `HTMLElement`,\n\t            // `jQuery` instance or `google.maps.Map` instance.\n\t            if (!_utils2.default.isPlainObject(options)) {\n\t                options = { element: options };\n\t            }\n\t\n\t            options = _utils2.default.extend({\n\t                element: null,\n\t                mapTypeId: _enums2.default.MapTypeId.ROADMAP,\n\t                title: undefined,\n\t                marker: true,\n\t                zoom: 9\n\t            }, options);\n\t\n\t            var e = options.element,\n\t                elem = void 0;\n\t            if (_utils2.default.isString(e)) {\n\t                elem = document.getElementById(e);\n\t            } else if (_utils2.default.isJQueryObject(e)) {\n\t                elem = e[0];\n\t            } else if (geolocator.isGoogleLoaded() && e instanceof google.maps.Map) {\n\t                elem = e.getDiv();\n\t            }\n\t\n\t            if (!_utils2.default.isElement(elem) && !_utils2.default.isNode(elem)) {\n\t                throw new _geo4.default(_geo4.default.Code.INVALID_PARAMETERS, 'A valid DOM element or element ID is required to create a map.');\n\t            }\n\t\n\t            if (!_utils2.default.isPlainObject(options.center) || !_utils2.default.isNumber(options.center.latitude) || !_utils2.default.isNumber(options.center.longitude)) {\n\t                throw new _geo4.default(_geo4.default.Code.INVALID_PARAMETERS, 'Center coordinates are required to create a map.');\n\t            }\n\t\n\t            options.element = elem;\n\t\n\t            var conf = geolocator._.config,\n\t                key = conf.google.key;\n\t\n\t            options.styles = !_utils2.default.isFilledArray(options.styles) ? _utils2.default.isFilledArray(conf.google.styles) ? conf.google.styles : null : options.styles;\n\t\n\t            geolocator.ensureGoogleLoaded(key, function (err) {\n\t                if (err) {\n\t                    throw new _geo4.default(_geo4.default.Code.GOOGLE_API_FAILED, String(err.message || err));\n\t                }\n\t\n\t                var mapData = configCreateMap(options);\n\t                callback(null, mapData);\n\t            });\n\t        }\n\t\n\t        /**\n\t         *  Locates the user's location via HTML5 geolocation. This may\n\t         *  require/prompt for user's permission. If the permission is granted we'll\n\t         *  get the most accurate location information. Otherwise, we'll fallback to\n\t         *  locating via user's IP (if enabled).\n\t         *\n\t         *  For better accuracy, Geolocator implements a different approach than the\n\t         *  `getCurrentPosition` API; which generally triggers before the device's\n\t         *  GPS hardware can provide anything accurate. Thanks to\n\t         *  {@link https://github.com/gwilson/getAccurateCurrentPosition#background|Greg Wilson}\n\t         *  for the idea.\n\t         *\n\t         *  Also note that HTML5 Geolocation feature no more allows insecure origins.\n\t         *  See {@link https://goo.gl/rStTGz|this} for more details.\n\t         *  This means if you don't call this method from an HTTPS page, it will\n\t         *  fail. And if `options.fallbackToIP` is enabled, this will locate by IP.\n\t         *\n\t         *  @param {Object} [options]\n\t         *         HTML5 geo-location settings with some additional options.\n\t         *      @param {Boolean} [options.enableHighAccuracy=true]\n\t         *             Specifies whether the device should provide the most accurate\n\t         *             position it can. Note that setting this to `true` might\n\t         *             consume more CPU and/or battery power; and result in slower\n\t         *             response times.\n\t         *      @param {Number} [options.desiredAccuracy=30]\n\t         *             Minimum accuracy desired, in meters. Position will not be\n\t         *             returned until this is met, before the timeout. This only\n\t         *             takes effect if `enableHighAccuracy` is set to `true`.\n\t         *      @param {Number} [options.timeout=5000]\n\t         *             HTML5 position timeout setting in milliseconds. Setting this\n\t         *             to `Infinity` means that Geolocator won't return until the\n\t         *             position is available.\n\t         *      @param {Number} [options.maximumWait=10000]\n\t         *             Maximum time to wait (in milliseconds) for the desired\n\t         *             accuracy (which should be greater than `timeout`).\n\t         *             This only takes effect if `enableHighAccuracy` is set to\n\t         *             `true`.\n\t         *      @param {Number} [options.maximumAge=0]\n\t         *             HTML5 position maximum age. Indicates the maximum age in\n\t         *             milliseconds of a possible cached position that is acceptable\n\t         *             to return. `0` means, the device cannot use a cached position\n\t         *             and must attempt to retrieve the real current position. If set\n\t         *             to `Infinity` the device must return a cached position\n\t         *             regardless of its age. Note that if `enableHighAccuracy` is\n\t         *             set to `true`, `maximumAge` will be forced to `0`.\n\t         *      @param {Function} [options.onProgress]\n\t         *             If `enableHighAccuracy` is set to `true`, you can use this\n\t         *             callback to check the progress of the location accuracy;\n\t         *             while waiting for the final, best accurate location.\n\t         *      @param {Boolean} [options.fallbackToIP=false]\n\t         *             Specifies whether to fallback to IP geolocation if the HTML5\n\t         *             geolocation fails (e.g. user rejection).\n\t         *      @param {Boolean} [options.addressLookup=false]\n\t         *             Specifies whether to run a reverse-geocode operation for the\n\t         *             fetched coordinates to retrieve detailed address information.\n\t         *             Note that this means an additional request which requires a\n\t         *             Google API key to be set in the Geolocator configuration.\n\t         *             See {@link #geolocator.config|`geolocator.config()`}.\n\t         *      @param {Boolean} [options.timezone=false]\n\t         *             Specifies whether to also fetch the time zone information for\n\t         *             the receieved coordinates. Note that this means an additional\n\t         *             request which requires a Google API key to be set in the\n\t         *             Geolocator configuration.\n\t         *             See {@link #geolocator.config|`geolocator.config()`}.\n\t         *      @param {String|Object} [options.map]\n\t         *             In order to create an interactive map from the fetched\n\t         *             location coordinates; either set this to map options object\n\t         *             or; the ID of a DOM element or DOM element itself which the\n\t         *             map will be created within.\n\t         *      @param {Boolean|Object} [options.staticMap=false]\n\t         *             Set to `true` to get a static Google Map image URL (with\n\t         *             default options); or pass a static map options object.\n\t         *\n\t         *  @param {Function} callback\n\t         *         Callback function to be executed when the request completes.\n\t         *         This takes 2 arguments: `function (err, location) { ... }`.\n\t         *         See {@link #geolocator~Location|`geolocator~Location` type} for details.\n\t         *\n\t         *  @returns {void}\n\t         *\n\t         *  @example\n\t         *  var options = {\n\t         *      enableHighAccuracy: true,\n\t         *      desiredAccuracy: 30,\n\t         *      timeout: 5000,\n\t         *      maximumWait: 10000,\n\t         *      maximumAge: 0,\n\t         *      fallbackToIP: true,\n\t         *      addressLookup: true,\n\t         *      timezone: true,\n\t         *      map: \"my-map\",\n\t         *      staticMap: true\n\t         *  };\n\t         *  geolocator.locate(options, function (err, location) {\n\t         *      console.log(err || location);\n\t         *  });\n\t         *\n\t         * @example\n\t         *  // location result:\n\t         *  {\n\t         *      coords: {\n\t         *          latitude: 37.4224764,\n\t         *          longitude: -122.0842499,\n\t         *          accuracy: 30,\n\t         *          altitude: null,\n\t         *          altitudeAccuracy: null,\n\t         *          heading: null,\n\t         *          speed: null\n\t         *      },\n\t         *      address: {\n\t         *          commonName: \"\",\n\t         *          street: \"Amphitheatre Pkwy\",\n\t         *          route: \"Amphitheatre Pkwy\",\n\t         *          streetNumber: \"1600\",\n\t         *          neighborhood: \"\",\n\t         *          town: \"\",\n\t         *          city: \"Mountain View\",\n\t         *          region: \"Santa Clara County\",\n\t         *          state: \"California\",\n\t         *          stateCode: \"CA\",\n\t         *          postalCode: \"94043\",\n\t         *          country: \"United States\",\n\t         *          countryCode: \"US\"\n\t         *      },\n\t         *      formattedAddress: \"1600 Amphitheatre Parkway, Mountain View, CA 94043, USA\",\n\t         *      type: \"ROOFTOP\",\n\t         *      placeId: \"ChIJ2eUgeAK6j4ARbn5u_wAGqWA\",\n\t         *      timezone: {\n\t         *          id: \"America/Los_Angeles\",\n\t         *          name: \"Pacific Standard Time\",\n\t         *          abbr: \"PST\",\n\t         *          dstOffset: 0,\n\t         *          rawOffset: -28800\n\t         *      },\n\t         *      flag: \"//cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.3.1/flags/4x3/us.svg\",\n\t         *      map: {\n\t         *          element: HTMLElement,\n\t         *          instance: Object, // google.maps.Map\n\t         *          marker: Object, // google.maps.Marker\n\t         *          infoWindow: Object, // google.maps.InfoWindow\n\t         *          options: Object // map options\n\t         *      },\n\t         *      staticMap: \"//maps.googleapis.com/maps/api/staticmap?center=37.4224764,-122.0842499&maptype=roadmap&size=600x300&scale=1&zoom=9&format=png&language=en&markers=color%3Ared%7C37.4224764%2C2-122.0842499&key=YOUR-GOOGLE-API-KEY\",\n\t         *      timestamp: 1456795956380\n\t         *  }\n\t         */\n\t\n\t    }, {\n\t        key: 'locate',\n\t        value: function locate(options, callback) {\n\t            options = _utils2.default.extend({\n\t                enableHighAccuracy: true,\n\t                timeout: 5000,\n\t                maximumWait: 10000,\n\t                maximumAge: 0,\n\t                desiredAccuracy: 30,\n\t                onProgress: _utils2.default.noop,\n\t                fallbackToIP: false,\n\t                addressLookup: false,\n\t                timezone: false,\n\t                map: undefined,\n\t                staticMap: false\n\t            }, options);\n\t\n\t            // force disable cache if high-accuracy is enabled\n\t            if (options.enableHighAccuracy) options.maximumAge = 0;\n\t            // set a min value for timeout\n\t            if (options.timeout < 1000) options.timeout = 1000;\n\t            // max wait should not be less than timeout\n\t            if (options.maximumWait < options.timeout) options.maximumWait = options.timeout;\n\t\n\t            // check options and Google key\n\t            checkGoogleKey(options);\n\t\n\t            var cb = callbackMap(options, callback);\n\t\n\t            function fallbackToIP(error) {\n\t                if (options.fallbackToIP) {\n\t                    return geolocator.locateByIP(options, function (err, location) {\n\t                        if (err) return cb(err, null);\n\t                        return cb(null, location);\n\t                    });\n\t                }\n\t                cb(error, null);\n\t            }\n\t            function onPositionReceived(location) {\n\t                fetchAddressAndTimezone(location, options, cb);\n\t            }\n\t            function onPositionError(err) {\n\t                err = _geo4.default.create(err);\n\t                fallbackToIP(err);\n\t            }\n\t\n\t            if (geolocator.isGeolocationSupported()) {\n\t                if (options.enableHighAccuracy) {\n\t                    locateAccurate(options, onPositionReceived, onPositionError);\n\t                } else {\n\t                    navigator.geolocation.getCurrentPosition(onPositionReceived, onPositionError, options);\n\t                }\n\t            } else {\n\t                var err = new _geo4.default(_geo4.default.Code.GEOLOCATION_NOT_SUPPORTED);\n\t                fallbackToIP(err);\n\t            }\n\t        }\n\t\n\t        /**\n\t         *  Returns a location and accuracy radius based on information about cell\n\t         *  towers and WiFi nodes that the mobile client can detect; via the Google\n\t         *  Maps Geolocation API.\n\t         *  @see {@link https://developers.google.com/maps/documentation/geolocation/intro|Google Maps Geolocation API}\n\t         *  @see {@link https://developers.google.com/maps/documentation/geolocation/usage-limits|Usage Limits}\n\t         *\n\t         *  @param {Object} [options]\n\t         *         Geolocation options.\n\t         *      @param {Number} [options.homeMobileCountryCode]\n\t         *             The mobile country code (MCC) for the device's home network.\n\t         *      @param {Number} [options.homeMobileNetworkCode]\n\t         *             The mobile network code (MNC) for the device's home network.\n\t         *      @param {String} [options.radioType]\n\t         *             The mobile radio type.\n\t         *             See {@link #geolocator.RadioType|`geolocator.RadioType` enumeration}\n\t         *             for possible values. While this field is optional, it should\n\t         *             be included if a value is available, for more accurate results.\n\t         *      @param {string} [options.carrier]\n\t         *             The carrier name. e.g. \"Vodafone\"\n\t         *      @param {Boolean} [options.fallbackToIP=false]\n\t         *             Specifies whether to fallback to IP geolocation if wifi and\n\t         *             cell tower signals are not available. Note that the IP address\n\t         *             in the request header may not be the IP of the device. Set\n\t         *             `fallbackToIP` to `false` to disable fall back.\n\t         *      @param {Array} [options.cellTowers]\n\t         *             An array of cell tower objects.\n\t         *             See {@link https://developers.google.com/maps/documentation/geolocation/intro#cell_tower_object|Cell tower objects} for details.\n\t         *      @param {Array} [options.wifiAccessPoints]\n\t         *             An array of WiFi access point objects.\n\t         *             See {@link https://developers.google.com/maps/documentation/geolocation/intro#wifi_access_point_object|WiFi access point objects} for details.\n\t         *      @param {Boolean} [options.addressLookup=false]\n\t         *             Specifies whether to run a reverse-geocode operation for the\n\t         *             fetched coordinates to retrieve detailed address information.\n\t         *             Note that this means an additional request which requires a\n\t         *             Google API key to be set in the Geolocator configuration.\n\t         *             See {@link #geolocator.config|`geolocator.config()`}.\n\t         *      @param {Boolean} [options.timezone=false]\n\t         *             Specifies whether to also fetch the time zone information for\n\t         *             the receieved coordinates. Note that this means an additional\n\t         *             request which requires a Google API key to be set in the\n\t         *             Geolocator configuration.\n\t         *             See {@link #geolocator.config|`geolocator.config()`}.\n\t         *      @param {String|Object} [options.map]\n\t         *             In order to create an interactive map from the fetched\n\t         *             location coordinates; either set this to map options object\n\t         *             or; the ID of a DOM element or DOM element itself which the\n\t         *             map will be created within.\n\t         *      @param {Boolean|Object} [options.staticMap=false]\n\t         *             Set to `true` to get a static Google Map image URL (with\n\t         *             default options); or pass a static map options object.\n\t         *      @param {Boolean} [options.raw=false]\n\t         *      \t      Whether to return the raw Google API result.\n\t         *  @param {Function} callback\n\t         *         Callback function to be executed when the request completes.\n\t         *         This takes 2 arguments: `function (err, location) { ... }`.\n\t         *         See {@link #geolocator~Location|`geolocator~Location` type} for details.\n\t         *\n\t         *  @returns {void}\n\t         *\n\t         *  @example\n\t         *  var options = {\n\t         *      homeMobileCountryCode: 310,\n\t         *      homeMobileNetworkCode: 410,\n\t         *      carrier: 'Vodafone',\n\t         *      radioType: geolocator.RadioType.GSM,\n\t         *      fallbackToIP: true,\n\t         *      addressLookup: false,\n\t         *      timezone: false,\n\t         *      map: \"my-map\",\n\t         *      staticMap: false\n\t         *  };\n\t         *  geolocator.locateByMobile(options, function (err, location) {\n\t         *      console.log(err || location);\n\t         *  });\n\t         */\n\t\n\t    }, {\n\t        key: 'locateByMobile',\n\t        value: function locateByMobile(options, callback) {\n\t            if (!_utils2.default.isPlainObject(options)) {\n\t                throw new _geo4.default(_geo4.default.Code.INVALID_PARAMETERS);\n\t            }\n\t\n\t            var cb = callbackMap(options, callback);\n\t\n\t            options = _utils2.default.extend({\n\t                homeMobileCountryCode: undefined,\n\t                homeMobileNetworkCode: undefined,\n\t                radioType: undefined,\n\t                carrier: undefined,\n\t                fallbackToIP: false,\n\t                cellTowers: undefined,\n\t                wifiAccessPoints: undefined,\n\t                addressLookup: false,\n\t                timezone: false,\n\t                map: undefined,\n\t                raw: false\n\t            }, options);\n\t\n\t            options.considerIp = options.fallbackToIP;\n\t            // check Google key\n\t            checkGoogleKey();\n\t\n\t            var conf = geolocator._.config,\n\t                key = conf.google.key || '',\n\t                url = _utils2.default.setProtocol(_enums2.default.URL.GOOGLE_GEOLOCATION, conf.https),\n\t                xhrOpts = {\n\t                url: url + '?key=' + key,\n\t                headers: {\n\t                    'Content-Type': 'application/json'\n\t                },\n\t                data: JSON.stringify(options)\n\t            };\n\t            // console.log(xhrOpts.data);\n\t\n\t            _fetch2.default.post(xhrOpts, function (err, xhr) {\n\t                var response = getXHRResponse(err, xhr);\n\t                if (_geo4.default.isGeoError(response)) return cb(response, null);\n\t\n\t                response = options.raw ? response : {\n\t                    coords: {\n\t                        latitude: response.location.lat,\n\t                        longitude: response.location.lng,\n\t                        accuracy: response.accuracy\n\t                    },\n\t                    timestamp: _utils2.default.time()\n\t                };\n\t\n\t                fetchAddressAndTimezone(response, options, cb);\n\t\n\t                // e.g. raw response\n\t                // {\n\t                //     \"location\": {\n\t                //         \"lat\": 51.0,\n\t                //         \"lng\": -0.1\n\t                //     },\n\t                //     \"accuracy\": 1200.4\n\t                // }\n\t            });\n\t        }\n\t\n\t        /**\n\t         *  Locates the user's location by the client's IP.\n\t         *\n\t         *  This method uses FreeGeoIP's lookup service, by default.\n\t         *  In order to change the source provider, you can use\n\t         *  {@link #geolocator.setGeoIPSource|`geolocator.setGeoIPSource()` method}.\n\t         *\n\t         *  @param {Object} [options]\n\t         *         Locate options.\n\t         *      @param {Boolean} [options.addressLookup=false]\n\t         *             Specifies whether to run a reverse-geocode operation for the\n\t         *             fetched coordinates to retrieve detailed address information.\n\t         *             Since no precise address can be fetched from an IP addres; you\n\t         *             should only enable this if the Geo-IP Source returns no useful\n\t         *             address information other than coordinates. Also, note that\n\t         *             this means an additional request which requires a Google API\n\t         *             key to be set in the Geolocator configuration.\n\t         *             See {@link #geolocator.config|`geolocator.config()`}.\n\t         *      @param {Boolean} [options.timezone=false]\n\t         *             Specifies whether to also fetch the time zone information for\n\t         *             the receieved coordinates. Note that this means an additional\n\t         *             request which requires a Google API key to be set in the\n\t         *             Geolocator configuration.\n\t         *             See {@link #geolocator.config|`geolocator.config()`}.\n\t         *      @param {String|Object} [options.map]\n\t         *             In order to create an interactive map from the fetched\n\t         *             location coordinates; either set this to map options object\n\t         *             or; the ID of a DOM element or DOM element itself which the\n\t         *             map will be created within.\n\t         *      @param {Boolean|Object} [options.staticMap=false]\n\t         *             Set to `true` to get a static Google Map image URL (with\n\t         *             default options); or pass a static map options object.\n\t         *  @param {Function} callback\n\t         *         Callback function to be executed when the request completes.\n\t         *         This takes 2 arguments: `function (err, location) { ... }`.\n\t         *         See {@link #geolocator~Location|`geolocator~Location` type} for details.\n\t         *\n\t         *  @returns {void}\n\t         *\n\t         *  @example\n\t         *  var options = {\n\t         *  \taddressLookup: true,\n\t         *  \ttimezone: true,\n\t         *  \tmap: \"my-map\",\n\t         *  \tstaticMap: true\n\t         *  };\n\t         *  geolocator.locateByIP(options, function (err, location) {\n\t         *  \tconsole.log(err || location);\n\t         *  });\n\t         *\n\t         *  @example\n\t         *  // location result:\n\t         *  {\n\t         *      coords: {\n\t         *          latitude: 41.0214,\n\t         *          longitude: 28.9948,\n\t         *      },\n\t         *      address: {\n\t         *          city: \"Istanbul\",\n\t         *          region: \"34\",\n\t         *          state: \"34\",\n\t         *          country: \"Turkey\",\n\t         *          countryCode: \"TR\"\n\t         *      },\n\t         *      formattedAddress: \"Demirtaş, Tesviyeci Sk. No:7, 34134 Fatih/İstanbul, Turkey\",\n\t         *      type: \"ROOFTOP\",\n\t         *      placeId: \"ChIJ-ZRLfO25yhQRBi5YJxX80Q0\",\n\t         *      timezone: {\n\t         *          id: \"Europe/Istanbul\",\n\t         *          name: \"Eastern European Summer Time\",\n\t         *          abbr: \"EEST\",\n\t         *          dstOffset: 3600,\n\t         *          rawOffset: 7200\n\t         *      },\n\t         *      flag: \"//cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.3.1/flags/4x3/tr.svg\",\n\t         *      map: {\n\t         *          element: HTMLElement,\n\t         *          instance: Object, // google.maps.Map\n\t         *          marker: Object, // google.maps.Marker\n\t         *          infoWindow: Object, // google.maps.InfoWindow\n\t         *          options: Object // map options\n\t         *      },\n\t         *      staticMap: \"//maps.googleapis.com/maps/api/staticmap?center=41.0214,28.9948&maptype=roadmap&size=600x300&scale=1&zoom=9&format=png&language=en&markers=color%3Ared%7C41.0214%2C228.9948&key=YOUR-GOOGLE-API-KEY\",\n\t         *      provider: \"freegeoip\",\n\t         *      timestamp: 1466216325223\n\t         *  }\n\t         */\n\t\n\t    }, {\n\t        key: 'locateByIP',\n\t        value: function locateByIP(options, callback) {\n\t            // passed source can be a string or object\n\t            var source = geolocator._.geoIpSource;\n\t\n\t            if (!_utils2.default.isPlainObject(source)) {\n\t                throw new _geo4.default(_geo4.default.Code.INVALID_GEO_IP_SOURCE, 'Please set a valid Geo-IP Source via geolocator.setGeoIPSource(options).');\n\t            }\n\t\n\t            // check options and Google key\n\t            checkGoogleKey(options || {});\n\t\n\t            var jsonpOpts = {\n\t                url: source.url,\n\t                async: true,\n\t                clean: true\n\t                // params: {}\n\t            };\n\t            if (source.callbackParam) {\n\t                jsonpOpts.callbackParam = source.callbackParam;\n\t                jsonpOpts.rootName = 'geolocator._.cb';\n\t            } else if (!source.globalVar) {\n\t                throw new _geo4.default(_geo4.default.Code.INVALID_GEO_IP_SOURCE, 'Either callbackParam or globalVar should be set for Geo-IP source.');\n\t            }\n\t            return _fetch2.default.jsonp(jsonpOpts, function (err, response) {\n\t                if (err) {\n\t                    return callback(_geo4.default.create(err), null);\n\t                }\n\t                if (source.globalVar) {\n\t                    if (window[source.globalVar]) {\n\t                        response = _utils2.default.clone(window[source.globalVar]);\n\t                        delete window[source.globalVar];\n\t                    } else {\n\t                        response = null;\n\t                    }\n\t                }\n\t                if (!response) {\n\t                    err = new _geo4.default(_geo4.default.Code.INVALID_RESPONSE);\n\t                    return callback(err, null);\n\t                }\n\t                if (_utils2.default.isPlainObject(source.schema)) {\n\t                    response = _utils2.default.mapToSchema(response, source.schema);\n\t                }\n\t                response.provider = source.provider || 'unknown';\n\t                setLocationURLs(response, options);\n\t                if (response.coords) {\n\t                    response.coords.latitude = Number(response.coords.latitude);\n\t                    response.coords.longitude = Number(response.coords.longitude);\n\t                }\n\t                var cb = callbackMap(options, callback);\n\t                fetchAddressAndTimezone(response, options, cb);\n\t            });\n\t        }\n\t\n\t        /**\n\t         *  Sets the Geo-IP source to be used for fetching location information\n\t         *  by user's IP; which is internally used by\n\t         *  {@link #geolocator.locateByIP|`geolocator.locateByIP()` method}.\n\t         *\n\t         *  By default, Geolocator uses FreeGeoIP as the Geo-IP source provider.\n\t         *  You can use this method to change this; or you can choose from\n\t         *  ready-to-use\n\t         *  {@link https://github.com/onury/geolocator/tree/master/src/geo-ip-sources|Geo-IP sources}.\n\t         *\n\t         *  @param {Object} options\n\t         *         Geo-IP Source options.\n\t         *      @param {String} [options.provider]\n\t         *             Source or service provider's name.\n\t         *      @param {String} options.url\n\t         *             Source URL without the callback query parameter. The callback\n\t         *             name (if supported) should be set via `options.callbackParam`.\n\t         *             Also, make sure the service supports the protocol you use in\n\t         *             the enums.URL. If it supports both HTTP and HTTPS, you can omit the\n\t         *             protocol. In this case, it will be determined via Geolocator\n\t         *             configuration.\n\t         *             See {@link #geolocator.config|`geolocator.config()`}.\n\t         *             NOTE: Do not forget to include your API key in the query\n\t         *             parameters of the URL, if you have one.\n\t         *      @param {String} [options.callbackParam]\n\t         *             If JSON callback is supported, pass the name of the callback\n\t         *             parameter, defined by the provider.\n\t         *      @param {Object} [options.globalVar]\n\t         *             Set this instead of `options.callbackParam` if the service\n\t         *             does not support JSON callbacks, but weirdly set a global\n\t         *             variable in the document. For example, if the response is\n\t         *             `Geo = { lat, lng }`, you should set this to `\"Geo\"`.\n\t         *      @param {Object} [options.schema]\n\t         *             Schema object to be used to re-structure the response returned\n\t         *             from the service. Set the response object's keys as values of\n\t         *             a custom object to map the format to the `location` object.\n\t         *             For example; if the service returns a response like\n\t         *             `{ lat: 40.112233, lng: 10.112233, otherProp: 'hello' }`.\n\t         *             Then you should set the following schema:\n\t         *             `{ coords: { latitude: 'lat', longitude: 'lng' } }`.\n\t         *\n\t         *  @return {geolocator}\n\t         */\n\t\n\t    }, {\n\t        key: 'setGeoIPSource',\n\t        value: function setGeoIPSource(options) {\n\t            if (!_utils2.default.isPlainObject(options)) {\n\t                throw new _geo4.default(_geo4.default.Code.INVALID_PARAMETERS, 'Geo-IP source options is invalid.');\n\t            }\n\t            if (!_utils2.default.isStringSet(options.url)) {\n\t                throw new _geo4.default(_geo4.default.Code.INVALID_PARAMETERS, 'Geo-IP source should have a valid URI.');\n\t            }\n\t            // if (!utils.isStringSet(options.callbackParam) && !utils.isStringSet(options.globalVar)) {\n\t            //     throw new GeoError(GeoError.Code.INVALID_PARAMETERS, 'No \\'callbackParam\\' or \\'globalVar\\' is provided for the Geo-IP Source options.');\n\t            // }\n\t            geolocator._.geoIpSource = Object.freeze(options);\n\t        }\n\t\n\t        /**\n\t         *  Registers a handler for watching the user's location via HTML5\n\t         *  geolocation; that is triggered each time the position of the device\n\t         *  changes. This may require/prompt for user's permission.\n\t         *\n\t         *  @param {Object} [options]\n\t         *         HTML5 geo-location settings.\n\t         *      @param {Boolean} [options.enableHighAccuracy=true]\n\t         *             Specifies whether the device should provide the most accurate\n\t         *             position it can. Note that setting this to `true` might consume\n\t         *             more CPU and/or battery power; and result in slower response\n\t         *             times.\n\t         *      @param {Number} [options.timeout=6000]\n\t         *             HTML5 position timeout setting in milliseconds. Setting this\n\t         *             to `Infinity` means that Geolocator won't return until the\n\t         *             position is available.\n\t         *      @param {Number} [options.maximumAge=0]\n\t         *             HTML5 position maximum age. Indicates the maximum age in\n\t         *             milliseconds of a possible cached position that is acceptable\n\t         *             to return. `0` means, the device cannot use a cached position\n\t         *             and must attempt to retrieve the real current position. If set\n\t         *             to `Infinity` the device must return a cached position\n\t         *             regardless of its age.\n\t         *      @param {Boolean} [options.clearOnError=false]\n\t         *             Specifies whether to clear the watcher on first error so that\n\t         *             it does not execute any more callbacks.\n\t         *      @param {Object} [options.target]\n\t         *             Object that defines the target location and settings; that\n\t         *             when the location is reached, the watcher will auto-clear\n\t         *             itself and invoke the callback.\n\t         *      @param {Number} options.target.latitude\n\t         *             The `latitude` of the target location.\n\t         *      @param {Number} options.target.longitude\n\t         *             The `longitude` of the target location.\n\t         *      @param {Number} [options.target.radius=0.5]\n\t         *             The radius, in other words; the minimum distance (in\n\t         *             kilometers or miles) to the target point that should be\n\t         *             reached.\n\t         *      @param {Number} [options.target.unitSystem=0]\n\t         *             Unit system to be used for target radius.\n\t         *             See {@link #geolocator.UnitSystem|`geolocator.UnitSystem` enumeration}\n\t         *             for possible values.\n\t         *  @param {Function} callback\n\t         *         Callback function to be executed when the request completes.\n\t         *         This takes 2 arguments: `function (err, location) { ... }`.\n\t         *         If `options.target` is set, `location` will also\n\t         *         include a `targetReached:Boolean` property.\n\t         *         See {@link #geolocator~Location|`geolocator~Location` type} for details.\n\t         *\n\t         *  @returns {GeoWatcher} - A watcher object that provides a\n\t         *  `.clear(delay:Number, callback:Function)` method to clear the watcher\n\t         *  when needed. Optional `delay` argument can be set (in milliseconds) to\n\t         *  clear in a later time. Omitting this argument will clear the watcher\n\t         *  immediately. You should always call this method, except if you've set up\n\t         *  a target; which will auto-clear the watcher when reached.\n\t         *\n\t         *  @example\n\t         *  // Watch my position for 5 minutes.\n\t         *  var options = { enableHighAccuracy: true, timeout: 6000, maximumAge: 0 };\n\t         *  var watcher = geolocator.watch(options, function (err, location) {\n\t         *      console.log(err || location);\n\t         *  });\n\t         *  console.log(watcher.id); // ID of the watcher\n\t         *  watcher.clear(300000); // clear after 5 minutes.\n\t         *\n\t         *  @example\n\t         *  // Watch my position until I'm 350 meters near Disneyland Park.\n\t         *  options.target = {\n\t         *      latitude: 33.8120918,\n\t         *      longitude: -117.9233569,\n\t         *      radius: 0.35,\n\t         *      unitSystem: geolocator.UnitSystem.METRIC\n\t         *  };\n\t         *  watcher = geolocator.watch(options, function (err, location) {\n\t         *      if (err) {\n\t         *          console.log(err);\n\t         *          return;\n\t         *      }\n\t         *      if (location.targetReached) {\n\t         *          console.log(watcher.isCleared); // true\n\t         *          console.log(watcher.cycle); // 15 — target reached after 15 cycles\n\t         *      } else {\n\t         *          console.log(watcher.isCleared); // false — watcher is active.\n\t         *      }\n\t         *  });\n\t         */\n\t\n\t    }, {\n\t        key: 'watch',\n\t        value: function watch(options, callback) {\n\t            if (!geolocator.isGeolocationSupported()) {\n\t                callback(new _geo4.default(_geo4.default.Code.GEOLOCATION_NOT_SUPPORTED), null);\n\t                return {};\n\t            }\n\t\n\t            var watcher = void 0,\n\t                target = void 0;\n\t\n\t            options = _utils2.default.extend({\n\t                enableHighAccuracy: true,\n\t                timeout: 6000,\n\t                maximumAge: 0,\n\t                clearOnError: false\n\t            }, options);\n\t\n\t            if (_utils2.default.isPlainObject(options.target)) {\n\t                target = _utils2.default.extend({\n\t                    radius: 0.5,\n\t                    unitSystem: geolocator.UnitSystem.METRIC\n\t                }, options.target);\n\t            }\n\t\n\t            function onPositionChanged(location) {\n\t                var pos = _utils2.default.clone(location, { own: false });\n\t                if (target) {\n\t                    var distance = geolocator.calcDistance({\n\t                        from: location.coords,\n\t                        to: target,\n\t                        formula: geolocator.DistanceFormula.HAVERSINE,\n\t                        unitSystem: target.unitSystem\n\t                    });\n\t                    pos.targetReached = distance <= target.radius;\n\t                    if (watcher && pos.targetReached) {\n\t                        watcher.clear(function () {\n\t                            return callback(null, pos);\n\t                        });\n\t                    }\n\t                }\n\t                return callback(null, pos);\n\t            }\n\t            function onPositionError(err) {\n\t                callback(_geo4.default.create(err), null);\n\t            }\n\t            return new _geo6.default(onPositionChanged, onPositionError, options);\n\t        }\n\t\n\t        /**\n\t         *  Converts a given address (or address components) into geographic\n\t         *  coordinates (i.e. latitude, longitude); and gets detailed address\n\t         *  information.\n\t         *  @see {@link https://developers.google.com/maps/documentation/geocoding/intro|Google Maps Geocoding API}\n\t         *  @see {@link https://developers.google.com/maps/documentation/geocoding/usage-limits|Usage Limits}\n\t         *\n\t         *  @param {String|Object} options\n\t         *         Either the address to geocode or geocoding options with the\n\t         *         following properties.\n\t         *      @param {String} options.address\n\t         *             The street address to geocode, in the format used by the\n\t         *             national postal service of the country concerned. Additional\n\t         *             address elements such as business names and unit, suite or\n\t         *             floor numbers should be avoided. Note that any address\n\t         *             component (route, locality, administrativeArea, postalCode and\n\t         *             country) should be specified either in address or the\n\t         *             corresponding property - not both. Doing so may result in\n\t         *             `ZERO_RESULTS`.\n\t         *      @param {String} [options.route]\n\t         *      \t      Long or short name of a route.\n\t         *      @param {String} [options.locality]\n\t         *      \t      Locality and sublocality of the location.\n\t         *      @param {String} [options.administrativeArea]\n\t         *      \t      Administrative area of the location.\n\t         *      @param {String} [options.postalCode]\n\t         *      \t      Postal code of the location.\n\t         *      @param {String} [options.country]\n\t         *      \t      A country name or a two letter ISO 3166-1 country code.\n\t         *      @param {String} [options.region]\n\t         *      \t      The region code, specified as a ccTLD (\"top-level domain\")\n\t         *      \t      two-character value. e.g.: `\"fr\"` for France.\n\t         *      @param {Array|Object} [options.bounds]\n\t         *      \t      The bounding box of the viewport within which to bias geocode\n\t         *      \t      results more prominently. e.g.:\n\t         *      \t      `[ southwestLat:Number, southwestLng:Number, northeastLat:Number, northeastLng:Number ]`\n\t         *      @param {String|Object} [options.map]\n\t         *             In order to create an interactive map from the fetched\n\t         *             location coordinates; either set this to map options object\n\t         *             or; the ID of a DOM element or DOM element itself which the\n\t         *             map will be created within.\n\t         *      @param {Boolean|Object} [options.staticMap=false]\n\t         *             Set to `true` to get a static Google Map image URL (with\n\t         *             default options); or pass a static map options object.\n\t         *      @param {Boolean} [options.raw=false]\n\t         *      \t      Whether to return the raw Google API result.\n\t         *  @param {Function} callback\n\t         *         Callback function to be executed when the request completes.\n\t         *         This takes 2 arguments: `function (err, location) { ... }`.\n\t         *         See {@link #geolocator~Location|`geolocator~Location` type} for details.\n\t         *\n\t         *  @returns {void}\n\t         *\n\t         *  @example\n\t         *  var address = '1600 Amphitheatre Parkway, CA';\n\t         *  geolocator.geocode(address, function (err, location) {\n\t         *      console.log(err || location);\n\t         *  });\n\t         *\n\t         *  @example\n\t         *  // location result:\n\t         *  {\n\t         *      coords: {\n\t         *          latitude: 37.4224764,\n\t         *          longitude: -122.0842499\n\t         *      },\n\t         *      address: {\n\t         *          commonName: \"\",\n\t         *          street: \"Amphitheatre Pkwy\",\n\t         *          route: \"Amphitheatre Pkwy\",\n\t         *          streetNumber: \"1600\",\n\t         *          neighborhood: \"\",\n\t         *          town: \"\",\n\t         *          city: \"Mountain View\",\n\t         *          region: \"Santa Clara County\",\n\t         *          state: \"California\",\n\t         *          stateCode: \"CA\",\n\t         *          postalCode: \"94043\",\n\t         *          country: \"United States\",\n\t         *          countryCode: \"US\"\n\t         *      },\n\t         *      formattedAddress: \"1600 Amphitheatre Parkway, Mountain View, CA 94043, USA\",\n\t         *      type: \"ROOFTOP\",\n\t         *      placeId: \"ChIJ2eUgeAK6j4ARbn5u_wAGqWA\",\n\t         *      flag: \"//cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.3.1/flags/4x3/us.svg\",\n\t         *      map: {\n\t         *          element: HTMLElement,\n\t         *          instance: Object, // google.maps.Map\n\t         *          marker: Object, // google.maps.Marker\n\t         *          infoWindow: Object, // google.maps.InfoWindow\n\t         *          options: Object // map options\n\t         *      },\n\t         *      timestamp: 1456795956380\n\t         *  }\n\t         */\n\t\n\t    }, {\n\t        key: 'geocode',\n\t        value: function geocode(options, callback) {\n\t            _geocode(false, options, callback);\n\t        }\n\t\n\t        /**\n\t         *  Converts the given geographic coordinates into a human-readable address\n\t         *  information.\n\t         *  @see {@link https://developers.google.com/maps/documentation/geocoding/intro#ReverseGeocoding|Google Maps (Reverse) Geocoding API}\n\t         *  @see {@link https://developers.google.com/maps/documentation/geocoding/usage-limits|Usage Limits}\n\t         *  @alias geolocator.addressLookup\n\t         *\n\t         *  @param {Object|String} options\n\t         *         Either the `placeId` of the location or Reverse Geocoding options\n\t         *         with the following properties.\n\t         *      @param {Number} options.latitude\n\t         *      Latitude of the target location.\n\t         *      @param {Number} options.longitude\n\t         *      Longitude of the target location.\n\t         *      @param {String} [options.placeId]\n\t         *             Required if `latitude` and `longitude` are omitted. The place\n\t         *             ID of the place for which you wish to obtain the\n\t         *             human-readable address. The place ID is a unique identifier\n\t         *             that can be used with other Google APIs. Note that if\n\t         *             `placeId` is set, `latitude` and `longitude` are ignored.\n\t         *      @param {String|Object} [options.map]\n\t         *             In order to create an interactive map from the fetched\n\t         *             location coordinates; either set this to map options object\n\t         *             or; the ID of a DOM element or DOM element itself which the\n\t         *             map will be created within.\n\t         *      @param {Boolean|Object} [options.staticMap=false]\n\t         *             Set to `true` to get a static Google Map image URL (with\n\t         *             default options); or pass a static map options object.\n\t         *      @param {Boolean} [options.raw=false]\n\t         *             Whether to return the raw Google API result.\n\t         *  @param {Function} callback\n\t         *         Callback function to be executed when the request completes.\n\t         *         This takes 2 arguments: `function (err, location) { ... }`\n\t         *         See {@link #geolocator~Location|`geolocator~Location` type} for details.\n\t         *\n\t         *  @returns {void}\n\t         *\n\t         *  @example\n\t         *  var coords = {\n\t         *      latitude: 37.4224764,\n\t         *      longitude: -122.0842499\n\t         *  };\n\t         *\n\t         *  geolocator.reverseGeocode(coords, function (err, location) {\n\t         *      console.log(err || location);\n\t         *  });\n\t         *\n\t         *  @example\n\t         *  // location result:\n\t         *  {\n\t         *      coords: {\n\t         *          latitude: 37.4224764,\n\t         *          longitude: -122.0842499\n\t         *      },\n\t         *      address: {\n\t         *          commonName: \"\",\n\t         *          street: \"Amphitheatre Pkwy\",\n\t         *          route: \"Amphitheatre Pkwy\",\n\t         *          streetNumber: \"1600\",\n\t         *          neighborhood: \"\",\n\t         *          town: \"\",\n\t         *          city: \"Mountain View\",\n\t         *          region: \"Santa Clara County\",\n\t         *          state: \"California\",\n\t         *          stateCode: \"CA\",\n\t         *          postalCode: \"94043\",\n\t         *          country: \"United States\",\n\t         *          countryCode: \"US\"\n\t         *      },\n\t         *      formattedAddress: \"1600 Amphitheatre Parkway, Mountain View, CA 94043, USA\",\n\t         *      type: \"ROOFTOP\",\n\t         *      placeId: \"ChIJ2eUgeAK6j4ARbn5u_wAGqWA\",\n\t         *      flag: \"//cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.3.1/flags/4x3/us.svg\",\n\t         *      map: {\n\t         *          element: HTMLElement,\n\t         *          instance: Object, // google.maps.Map\n\t         *          marker: Object, // google.maps.Marker\n\t         *          infoWindow: Object, // google.maps.InfoWindow\n\t         *          options: Object // map options\n\t         *      },\n\t         *      timestamp: 1456795956380\n\t         *  }\n\t         */\n\t\n\t    }, {\n\t        key: 'reverseGeocode',\n\t        value: function reverseGeocode(options, callback) {\n\t            _geocode(true, options, callback);\n\t        }\n\t\n\t        /**\n\t         *  Alias for `geolocator.reverseGeocode`\n\t         *  @private\n\t         */\n\t\n\t    }, {\n\t        key: 'addressLookup',\n\t        value: function addressLookup(options, callback) {\n\t            geolocator.reverseGeocode(options, callback);\n\t        }\n\t\n\t        /**\n\t         *  Gets timezone information for the given coordinates.\n\t         *  Note: Google Browser API keys cannot have referer restrictions when used with this API.\n\t         *  @see {@link https://developers.google.com/maps/documentation/timezone/intro|Google Maps TimeZone API}\n\t         *  @see {@link https://developers.google.com/maps/documentation/timezone/usage-limits|Usage Limits}\n\t         *\n\t         *  @param {Object} options\n\t         *         Time zone options.\n\t         *      @param {Number} options.latitude\n\t         *             Latitude of location.\n\t         *      @param {Number} options.longitude\n\t         *             Longitude of location.\n\t         *      @param {Number} [options.timestamp=Date.now()]\n\t         *             Specifies the desired time as seconds since midnight, January\n\t         *             1, 1970 UTC. This is used to determine whether or not Daylight\n\t         *             Savings should be applied.\n\t         *      @param {Boolean} [options.raw=false]\n\t         *             Whether to return the raw Google API result.\n\t         *  @param {Function} callback\n\t         *         Callback function to be executed when the request completes, in\n\t         *         the following signature: `function (err, timezone) { ... }`.\n\t         *         See {@link #geolocator~TimeZone|`geolocator~TimeZone` type} for\n\t         *         details.\n\t         *\n\t         *  @returns {void}\n\t         *\n\t         *  @example\n\t         *  var options = {\n\t         *      latitude: 48.8534100,\n\t         *      longitude: 2.3488000\n\t         *  };\n\t         *  geolocator.getTimeZone(options, function (err, timezone) {\n\t         *      console.log(err || timezone);\n\t         *  });\n\t         *\n\t         *  @example\n\t         *  // timezone result:\n\t         *  {\n\t         *      id: \"Europe/Paris\",\n\t         *      name: \"Central European Standard Time\",\n\t         *      abbr: \"CEST\",\n\t         *      dstOffset: 0,\n\t         *      rawOffset: 3600,\n\t         *      timestamp: 1455733120\n\t         *  }\n\t         */\n\t\n\t    }, {\n\t        key: 'getTimeZone',\n\t        value: function getTimeZone(options, callback) {\n\t            if (!_utils2.default.isPlainObject(options) || !_utils2.default.isNumber(options.latitude) || !_utils2.default.isNumber(options.longitude)) {\n\t                throw new _geo4.default(_geo4.default.Code.INVALID_PARAMETERS);\n\t            }\n\t\n\t            checkGoogleKey();\n\t\n\t            var conf = geolocator._.config;\n\t            options = _utils2.default.extend({\n\t                key: conf.google.key || '',\n\t                language: conf.language || 'en',\n\t                timestamp: _utils2.default.time(true),\n\t                raw: false\n\t            }, options);\n\t\n\t            var url = _utils2.default.setProtocol(_enums2.default.URL.GOOGLE_TIMEZONE, conf.https),\n\t                xhrOpts = {\n\t                url: url + '?location=' + options.latitude + ',' + options.longitude + '&timestamp=' + options.timestamp + '&language=' + options.language + '&key=' + options.key\n\t            };\n\t\n\t            _fetch2.default.xhr(xhrOpts, function (err, xhr) {\n\t                var response = getXHRResponse(err, xhr);\n\t                if (_geo4.default.isGeoError(response)) return callback(response, null);\n\t\n\t                response = options.raw ? response : {\n\t                    id: response.timeZoneId,\n\t                    name: response.timeZoneName,\n\t                    abbr: _utils2.default.abbr(response.timeZoneName, { dots: false }),\n\t                    dstOffset: response.dstOffset,\n\t                    rawOffset: response.rawOffset,\n\t                    timestamp: options.timestamp\n\t                };\n\t                callback(err, response);\n\t            });\n\t        }\n\t\n\t        /**\n\t         *  Gets the distance and duration values based on the recommended route\n\t         *  between start and end points.\n\t         *  @see {@link https://developers.google.com/maps/documentation/distance-matrix/intro|Google Maps Distance Matrix API}\n\t         *  @see {@link https://developers.google.com/maps/documentation/distance-matrix/usage-limits|Usage Limits}\n\t         *\n\t         *  @param {Object} options\n\t         *         Distance matrix options.\n\t         *      @param {String|Object|Array} options.origins\n\t         *             One or more addresses and/or an object of latitude/longitude\n\t         *             values, from which to calculate distance and time. If you pass\n\t         *             an address as a string, the service will geocode the string\n\t         *             and convert it to a latitude/longitude coordinate to calculate\n\t         *             distances. Following are valid examples:\n\t         *  <pre><code>options.origins = 'London';\n\t         *  options.origins = ['London', 'Paris'];\n\t         *  options.origins = { latitude: 51.5085300, longitude: -0.1257400 };\n\t         *  options.origins = [\n\t         *      { latitude: 51.5085300, longitude: -0.1257400 },\n\t         *      { latitude: 48.8534100, longitude: 2.3488000 }\n\t         *  ];\n\t         *  </code></pre>\n\t         *      @param {String|Object|Array} options.destinations\n\t         *             One or more addresses and/or an object of latitude/longitude\n\t         *             values, from which to calculate distance and time. If you pass\n\t         *             an address as a string, the service will geocode the string\n\t         *             and convert it to a latitude/longitude coordinate to calculate\n\t         *             distances.\n\t         *      @param {String} [options.travelMode=\"DRIVING\"]\n\t         *             Type of routing requested.\n\t         *             See {@link #geolocator.TravelMode|`geolocator.TravelMode` enumeration}\n\t         *             for possible values.\n\t         *      @param {Boolean} [options.avoidFerries]\n\t         *             If true, instructs the Distance Matrix service to avoid\n\t         *             ferries where possible.\n\t         *      @param {Boolean} [options.avoidHighways]\n\t         *             If true, instructs the Distance Matrix service to avoid\n\t         *             highways where possible.\n\t         *      @param {Boolean} [options.avoidTolls]\n\t         *             If true, instructs the Distance Matrix service to avoid toll\n\t         *             roads where possible.\n\t         *      @param {Number} [options.unitSystem=0]\n\t         *             Preferred unit system to use when displaying distance.\n\t         *             See {@link #geolocator.UnitSystem|`geolocator.UnitSystem` enumeration}\n\t         *             for possible values.\n\t         *      @param {String} [options.region]\n\t         *             Region code used as a bias for geocoding requests.\n\t         *  @param {Boolean} [options.raw=false]\n\t         *         Whether to return the raw Google API result.\n\t         *  @param {Function} callback\n\t         *         Callback function to be executed when the request completes,\n\t         *         in the following signature: `function (err, result) { ... }`\n\t         *\n\t         *  @returns {void}\n\t         *\n\t         *  @example\n\t         *  var options = {\n\t         *      origins: [{ latitude: 51.5085300, longitude: -0.1257400 }],\n\t         *      destinations: [{ latitude: 48.8534100, longitude: 2.3488000 }],\n\t         *      travelMode: geolocator.TravelMode.DRIVING,\n\t         *      unitSystem: geolocator.UnitSystem.METRIC\n\t         *  };\n\t         *  geolocator.getDistanceMatrix(options, function (err, result) {\n\t         *      console.log(err || result);\n\t         *  });\n\t         *\n\t         *  @example\n\t         *  // result:\n\t         *  [\n\t         *  \t{\n\t         *  \t\tfrom: \"449 Duncannon St, London WC2R 0DZ, UK\",\n\t         *  \t\tto: \"1 Parvis Notre-Dame - Pl. Jean-Paul II, 75004 Paris-4E-Arrondissement, France\",\n\t         *  \t\tdistance: {\n\t         *  \t\t\tvalue: 475104,\n\t         *  \t\t\ttext: \"475 km\"\n\t         *  \t\t},\n\t         *  \t\tduration: {\n\t         *  \t\t\tvalue: 20193,\n\t         *  \t\t\ttext: \"5 hours 37 mins\"\n\t         *  \t\t},\n\t         *  \t\tfare: undefined,\n\t         *  \t\ttimestamp: 1456795956380\n\t         *  \t}\n\t         *  ]\n\t         */\n\t\n\t    }, {\n\t        key: 'getDistanceMatrix',\n\t        value: function getDistanceMatrix(options, callback) {\n\t            checkGoogleKey();\n\t\n\t            var key = geolocator._.config.google.key;\n\t            geolocator.ensureGoogleLoaded(key, function (err) {\n\t                if (err) {\n\t                    throw new _geo4.default(_geo4.default.Code.GOOGLE_API_FAILED, String(err.message || err));\n\t                }\n\t\n\t                var o = options.origins || options.origin || options.from,\n\t                    d = options.destinations || options.destination || options.to;\n\t                if (!_utils2.default.isPlainObject(options) || invalidOriginOrDest(o) || invalidOriginOrDest(d)) {\n\t                    throw new _geo4.default(_geo4.default.Code.INVALID_PARAMETERS);\n\t                }\n\t                options.origins = _geo2.default.toPointList(o);\n\t                options.destinations = _geo2.default.toPointList(d);\n\t\n\t                options = _utils2.default.extend({\n\t                    travelMode: google.maps.TravelMode.DRIVING,\n\t                    avoidFerries: undefined,\n\t                    avoidHighways: undefined,\n\t                    avoidTolls: undefined,\n\t                    unitSystem: google.maps.UnitSystem.METRIC\n\t                }, options);\n\t\n\t                var service = new google.maps.DistanceMatrixService();\n\t                service.getDistanceMatrix(options, function (response, status) {\n\t                    var err = null;\n\t                    if (status !== google.maps.DistanceMatrixStatus.OK) {\n\t                        err = _geo4.default.fromResponse(status) || _geo4.default.fromResponse(response);\n\t                        response = null;\n\t                    } else {\n\t                        response = options.raw ? response : _geo2.default.formatDistanceResults(response);\n\t                    }\n\t                    callback(err, response);\n\t                });\n\t            });\n\t        }\n\t\n\t        /**\n\t         *  Calculates the distance between two geographic points.\n\t         *\n\t         *  @param {Object} options\n\t         *         Calculation and display options.\n\t         *      @param {Object} options.from\n\t         *             Object containing the `latitude` and `longitude` of original\n\t         *             location.\n\t         *      @param {Object} options.to\n\t         *             Object containing the `latitude` and `longitude` of destination.\n\t         *      @param {String} [options.formula=\"haversine\"]\n\t         *             The algorithm or formula to calculate the distance.\n\t         *             See {@link #geolocator.DistanceFormula|`geolocator.DistanceFormula` enumeration}.\n\t         *      @param {Number} [options.unitSystem=0]\n\t         *             Preferred unit system to use when displaying distance.\n\t         *             See {@link #geolocator.UnitSystem|`geolocator.UnitSystem` enumeration}.\n\t         *\n\t         *  @returns {Number} - The calculated distance.\n\t         *\n\t         *  @example\n\t         *  // Calculate distance from London to Paris.\n\t         *  var result = geolocator.calcDistance({\n\t         *      from: {\n\t         *          latitude: 51.5085300,\n\t         *          longitude: -0.1257400\n\t         *      },\n\t         *      to: {\n\t         *          latitude: 48.8534100,\n\t         *          longitude: 2.3488000\n\t         *      },\n\t         *      formula: geolocator.DistanceFormula.HAVERSINE,\n\t         *      unitSystem: geolocator.UnitSystem.METRIC\n\t         *  });\n\t         *  // result: 366.41656039126093 (kilometers)\n\t         */\n\t\n\t    }, {\n\t        key: 'calcDistance',\n\t        value: function calcDistance(options) {\n\t            options = _utils2.default.extend({\n\t                formula: geolocator.DistanceFormula.HAVERSINE,\n\t                unitSystem: geolocator.UnitSystem.METRIC\n\t            }, options);\n\t\n\t            var from = options.from,\n\t                to = options.to,\n\t                radius = options.unitSystem === geolocator.UnitSystem.METRIC ? EARTH_RADIUS_KM : EARTH_RADIUS_MI;\n\t\n\t            if (options.formula === geolocator.DistanceFormula.HAVERSINE) {\n\t                var dLat = geolocator.degToRad(to.latitude - from.latitude),\n\t                    dLng = geolocator.degToRad(to.longitude - from.longitude),\n\t                    a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(geolocator.degToRad(from.latitude)) * Math.cos(geolocator.degToRad(to.longitude)) * Math.sin(dLng / 2) * Math.sin(dLng / 2),\n\t                    c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\t                return radius * c;\n\t            }\n\t            // geolocator.DistanceFormula.PYTHAGOREAN\n\t            var latA = geolocator.degToRad(from.latitude),\n\t                latB = geolocator.degToRad(to.latitude),\n\t                lngA = geolocator.degToRad(from.longitude),\n\t                lngB = geolocator.degToRad(to.longitude),\n\t                x = (lngB - lngA) * Math.cos((latA + latB) / 2),\n\t                y = latB - latA;\n\t            return Math.sqrt(x * x + y * y) * radius;\n\t        }\n\t\n\t        /**\n\t         *  Gets the current public IP of the client.\n\t         *\n\t         *  @param {Function} callback\n\t         *         Callback function to be executed when the request completes, in\n\t         *         the following signature: `function (err, result) { ... }`\n\t         *\n\t         *  @returns {void}\n\t         *\n\t         *  @example\n\t         *  geolocator.getIP(function (err, result) {\n\t         *      console.log(err || result);\n\t         *  });\n\t         *\n\t         *  @example\n\t         *  // result:\n\t         *  {\n\t         *      ip: \"176.232.71.155\",\n\t         *      timestamp: 1457573683427\n\t         *  }\n\t         */\n\t\n\t    }, {\n\t        key: 'getIP',\n\t        value: function getIP(callback) {\n\t            var conf = geolocator._.config;\n\t\n\t            var jsonpOpts = {\n\t                url: _utils2.default.setProtocol(_enums2.default.URL.IP, conf.https),\n\t                async: true,\n\t                clean: true,\n\t                params: {\n\t                    format: 'jsonp'\n\t                },\n\t                callbackParam: 'callback',\n\t                rootName: 'geolocator._.cb'\n\t            };\n\t            return _fetch2.default.jsonp(jsonpOpts, function (err, response) {\n\t                if (err) {\n\t                    return callback(_geo4.default.create(err), null);\n\t                }\n\t                if (!response) {\n\t                    err = new _geo4.default(_geo4.default.Code.INVALID_RESPONSE);\n\t                    return callback(err, null);\n\t                }\n\t                if ((typeof response === 'undefined' ? 'undefined' : _typeof(response)) === 'object') response.timestamp = _utils2.default.time();\n\t                callback(null, response);\n\t            });\n\t        }\n\t\n\t        /**\n\t         *  Ensures Google Maps API is loaded. If not, this will load all of the\n\t         *  main Javascript objects and symbols for use in the Maps API.\n\t         *\n\t         *  Note that, Google Maps API is loaded only when needed. For example,\n\t         *  the DistanceMatrix API does not support Web Service requests and\n\t         *  requires this API to be loaded. However, the TimeZone API requests are\n\t         *  made throught the Web Service without requiring a `google` object\n\t         *  within DOM.\n\t         *\n\t         *  Also note that this will not re-load the API if `google.maps` object\n\t         *  already exists. In this case, the `callback` is still executed and\n\t         *  no errors are passed.\n\t         *\n\t         *  You can use the following overload to omit the `key` argument altogether:\n\t         *\n\t         *  `geolocator.ensureGoogleLoaded(callback)`\n\t         *\n\t         *  @param {String} [key]\n\t         *         Google API key.\n\t         *  @param {Function} callback\n\t         *         Callback function to be executed when the operation ends.\n\t         *\n\t         *  @returns {void}\n\t         *\n\t         *  @example\n\t         *  geolocator.ensureGoogleLoaded(function (err) {\n\t         *      if (err) return;\n\t         *      console.log('google' in window); // true\n\t         *  });\n\t         */\n\t\n\t    }, {\n\t        key: 'ensureGoogleLoaded',\n\t        value: function ensureGoogleLoaded(key, callback) {\n\t            var k = void 0;\n\t            if (_utils2.default.isFunction(key)) {\n\t                callback = key;\n\t            } else {\n\t                k = key;\n\t            }\n\t            if (!geolocator.isGoogleLoaded()) {\n\t                var jsonpOpts = {\n\t                    url: _enums2.default.URL.GOOGLE_MAPS_API,\n\t                    async: true,\n\t                    callbackParam: 'callback',\n\t                    params: {\n\t                        key: k || ''\n\t                        // callback: ''\n\t                    },\n\t                    rootName: 'geolocator._.cb'\n\t                };\n\t                return _fetch2.default.jsonp(jsonpOpts, callback);\n\t            }\n\t            callback();\n\t        }\n\t\n\t        /**\n\t         *  Checks whether the Google Maps API is loaded.\n\t         *\n\t         *  @returns {Boolean} - Returns `true` if already loaded.\n\t         */\n\t\n\t    }, {\n\t        key: 'isGoogleLoaded',\n\t        value: function isGoogleLoaded() {\n\t            return 'google' in window && google.maps;\n\t        }\n\t\n\t        /**\n\t         *  Checks whether the type of the given object is an HTML5 `PositionError`.\n\t         *\n\t         *  @param {*} obj - Object to be checked.\n\t         *  @return {Boolean}\n\t         */\n\t\n\t    }, {\n\t        key: 'isPositionError',\n\t        value: function isPositionError(obj) {\n\t            return _utils2.default.isPositionError(obj);\n\t        }\n\t\n\t        /**\n\t         *  Checks whether the given value is an instance of `GeoError`.\n\t         *\n\t         *  @param {*} obj - Object to be checked.\n\t         *  @return {Boolean}\n\t         */\n\t\n\t    }, {\n\t        key: 'isGeoError',\n\t        value: function isGeoError(obj) {\n\t            return _geo4.default.isGeoError(obj);\n\t        }\n\t\n\t        /**\n\t         *  Checks whether HTML5 Geolocation API is supported.\n\t         *\n\t         *  @return {Boolean}\n\t         */\n\t\n\t    }, {\n\t        key: 'isGeolocationSupported',\n\t        value: function isGeolocationSupported() {\n\t            return navigator && 'geolocation' in navigator;\n\t        }\n\t\n\t        /**\n\t         *  Converts kilometers to miles.\n\t         *\n\t         *  @param {Number} km - Kilometers to be converted.\n\t         *  @returns {Number} - Miles.\n\t         */\n\t\n\t    }, {\n\t        key: 'kmToMi',\n\t        value: function kmToMi(km) {\n\t            return km * 0.621371;\n\t        }\n\t\n\t        /**\n\t         *  Converts miles to kilometers.\n\t         *\n\t         *  @param {Number} mi - Miles to be converted.\n\t         *  @returns {Number} - Kilometers.\n\t         */\n\t\n\t    }, {\n\t        key: 'miToKm',\n\t        value: function miToKm(mi) {\n\t            return mi / 0.621371;\n\t        }\n\t\n\t        /**\n\t         *  Converts degrees to radians.\n\t         *\n\t         *  @param {Number} deg - Degrees to be converted.\n\t         *  @returns {Number} - Radians.\n\t         */\n\t\n\t    }, {\n\t        key: 'degToRad',\n\t        value: function degToRad(degrees) {\n\t            return degrees * (Math.PI / 180);\n\t        }\n\t\n\t        /**\n\t         *  Converts radians to degrees.\n\t         *\n\t         *  @param {Number} rad - Radians to be converted.\n\t         *  @returns {Number} - Degrees.\n\t         */\n\t\n\t    }, {\n\t        key: 'radToDeg',\n\t        value: function radToDeg(radians) {\n\t            return radians * (180 / Math.PI);\n\t        }\n\t\n\t        /**\n\t         *  Converts decimal coordinates (either lat or lng) to degrees, minutes, seconds.\n\t         *\n\t         *  @param {Number} dec\n\t         *         Decimals to be converted.\n\t         *  @param {Boolean} [isLng=false]\n\t         *         Indicates whether the given decimals is longitude.\n\t         *\n\t         *  @returns {String} - Degrees, minutes, seconds.\n\t         */\n\t\n\t    }, {\n\t        key: 'decToDegMinSec',\n\t        value: function decToDegMinSec(dec) {\n\t            var isLng = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\t\n\t            // Degrees Latitude must be in the range of -90. to 90.\n\t            // Degrees Longitude must be in the range of -180 to 180.\n\t            // +Latitude is North, -Latitude is South\n\t            // +Longitude is East, -Longitude is West\n\t            var sign = dec < 0 ? -1 : 1,\n\t                sn = dec < 0 ? 'S' : 'N',\n\t                we = dec < 0 ? 'W' : 'E',\n\t                nsew = !isLng ? sn : we,\n\t                absValue = Math.abs(Math.round(dec * 1000000.0));\n\t            return Math.floor(absValue / 1000000) * sign + '° ' + Math.floor((absValue / 1000000 - Math.floor(absValue / 1000000)) * 60) + '\\' ' + Math.floor(((absValue / 1000000 - Math.floor(absValue / 1000000)) * 60 - Math.floor((absValue / 1000000 - Math.floor(absValue / 1000000)) * 60)) * 100000) * 60 / 100000 + '\" ' + nsew;\n\t        }\n\t    }, {\n\t        key: 'Error',\n\t\n\t\n\t        // ---------------------------\n\t        // PROPERTIES\n\t        // ---------------------------\n\t\n\t        /**\n\t         *  Geolocator Error class that provides a common type of error object for\n\t         *  the various APIs implemented in Geolocator. All callbacks of Geolocator\n\t         *  will include an instance of this object as the first argument; if the\n\t         *  corresponding operation fails. Also all thrown errors will be an instance\n\t         *  of this object.\n\t         *\n\t         *  This object also enumerates\n\t         *  {@link ?api=geolocator-error#GeoError.Code|Geolocator Error codes}.\n\t         *\n\t         *  @see {@link ?api=geolocator-error|`GeoError` documentation}\n\t         *  @type {GeoError}\n\t         *  @readonly\n\t         */\n\t        get: function get() {\n\t            return _geo4.default;\n\t        }\n\t\n\t        /**\n\t         *  Documented separately in enums.js\n\t         *  @private\n\t         */\n\t\n\t    }, {\n\t        key: 'MapTypeId',\n\t        get: function get() {\n\t            return _enums2.default.MapTypeId;\n\t        }\n\t\n\t        /**\n\t         *  Documented separately in enums.js\n\t         *  @private\n\t         */\n\t\n\t    }, {\n\t        key: 'LocationType',\n\t        get: function get() {\n\t            return _enums2.default.LocationType;\n\t        }\n\t\n\t        /**\n\t         *  Documented separately in enums.js\n\t         *  @private\n\t         */\n\t\n\t    }, {\n\t        key: 'TravelMode',\n\t        get: function get() {\n\t            return _enums2.default.TravelMode;\n\t        }\n\t\n\t        /**\n\t         *  Documented separately in enums.js\n\t         *  @private\n\t         */\n\t\n\t    }, {\n\t        key: 'UnitSystem',\n\t        get: function get() {\n\t            return _enums2.default.UnitSystem;\n\t        }\n\t\n\t        /**\n\t         *  Documented separately in enums.js\n\t         *  @private\n\t         */\n\t\n\t    }, {\n\t        key: 'RadioType',\n\t        get: function get() {\n\t            return _enums2.default.RadioType;\n\t        }\n\t\n\t        /**\n\t         *  Documented separately in enums.js\n\t         *  @private\n\t         */\n\t\n\t    }, {\n\t        key: 'DistanceFormula',\n\t        get: function get() {\n\t            return _enums2.default.DistanceFormula;\n\t        }\n\t\n\t        /**\n\t         *  Documented separately in enums.js\n\t         *  @private\n\t         */\n\t\n\t    }, {\n\t        key: 'ImageFormat',\n\t        get: function get() {\n\t            return _enums2.default.ImageFormat;\n\t        }\n\t    }]);\n\t\n\t    return geolocator;\n\t}();\n\t\n\t// ---------------------------\n\t// HELPER METHODS\n\t// ---------------------------\n\t\n\t/**\n\t *  Used with distance matrix calls.\n\t *  @private\n\t */\n\t\n\t\n\tfunction invalidOriginOrDest(value) {\n\t    return !_utils2.default.isString(value) && !_utils2.default.isArray(value) && !_utils2.default.isPlainObject(value);\n\t}\n\t\n\t/**\n\t *  Check if XHR response is an error response and returns a `GeoError`.\n\t *  If not, returns the parsed response.\n\t *  @private\n\t *\n\t *  @param {Error} err\n\t *         XHR error.\n\t *  @param {Object} xhr\n\t *         XHR object to be checked.\n\t *\n\t *  @returns {GeoError|Object}\n\t */\n\tfunction getXHRResponse(err, xhr) {\n\t    if (err) return _geo4.default.create(err);\n\t    if (!xhr) return new _geo4.default(_geo4.default.Code.REQUEST_FAILED);\n\t    var response = _utils2.default.safeJsonParse(xhr.responseText);\n\t    // Check if XHR response is an error response.\n\t    // return response if not.\n\t    return _geo4.default.fromResponse(response) || response;\n\t}\n\t\n\t/**\n\t *  Checks the given options and determines if Google key is required.\n\t *  Throws if key is required but not set or valid.\n\t *  @private\n\t *\n\t *  @param {Object} [options]\n\t *         Options to be checked. If `undefined`, directly checks Googke key.\n\t */\n\tfunction checkGoogleKey(options) {\n\t    if (!options || options.addressLookup || options.timezone || options.map || options.staticMap) {\n\t        if (!geolocator._.config.google.key) {\n\t            throw new _geo4.default(_geo4.default.Code.GOOGLE_KEY_INVALID, 'A Google API key is required but it\\'s not set or valid.');\n\t        }\n\t    }\n\t}\n\t\n\t/**\n\t *  Checks and adds necessary properties to map options from the given location\n\t *  result object. This is used with methods that support `map` option; to\n\t *  create a map from the result coordinates; such as locate() method.\n\t *  @private\n\t *\n\t *  @param {Object|String} options\n\t *         Original options object.\n\t *  @param {Object} location\n\t *         Location result object.\n\t *\n\t *  @returns {Object} - Final map options object.\n\t */\n\tfunction getMapOpts(mapOptions, location) {\n\t    if (_utils2.default.isObject(mapOptions)) {\n\t        mapOptions.center = location.coords;\n\t    } else {\n\t        mapOptions = {\n\t            element: mapOptions,\n\t            center: location.coords\n\t        };\n\t    }\n\t    // this will enable infoWindow\n\t    if (location.formattedAddress) {\n\t        mapOptions.title = location.formattedAddress;\n\t    }\n\t    // if location has accuracy, (and zoom is not set) we can zoom in a bit more\n\t    if (!mapOptions.zoom && location.coords && _utils2.default.isNumber(location.coords.accuracy) && location.coords.accuracy < 1500) {\n\t        mapOptions.zoom = 15;\n\t    }\n\t    return mapOptions;\n\t}\n\t\n\t/**\n\t *  Checks the HTMLElement to see whether a previous map and related objects\n\t *  (marker, infoWindow) are created for it; by checking our private property\n\t *  `_geolocatorMapData`. If there is a map, this does not re-create it (which\n\t *  will break the map) but only re-adjust center, zoom and re-create the marker\n\t *  if needed. We use this approach bec. Google maps has no feature to destroy\n\t *  a map. This is considered a bug by Google developers.\n\t *  @private\n\t *\n\t *  @param {Object} options\n\t *         Options for creating a map.\n\t */\n\tfunction configCreateMap(options) {\n\t    var elem = options.element,\n\t\n\t    // when geolocator creates a map, it will set a `_geolocatorMapData`\n\t    // property on the element. So we can use this map instance later,\n\t    // when the same HTMLElement is passed to create a map. So check if\n\t    // we have it here.\n\t    mapData = elem._geolocatorMapData,\n\t        map = mapData && mapData.instance || null,\n\t        marker = mapData && mapData.marker || null,\n\t        infoWindow = mapData && mapData.infoWindow || null,\n\t        center = new google.maps.LatLng(options.center.latitude, options.center.longitude),\n\t        mapOptions = {\n\t        mapTypeId: options.mapTypeId,\n\t        center: center,\n\t        zoom: options.zoom,\n\t        styles: options.styles || null\n\t    };\n\t\n\t    // if we have a map, we'll just configure it. otherwise, we'll create\n\t    // one.\n\t    if (map) {\n\t        map.setOptions(mapOptions);\n\t    } else {\n\t        map = new google.maps.Map(options.element, mapOptions);\n\t    }\n\t\n\t    // destroy marker and infoWindow if previously created for this element.\n\t    if (infoWindow) infoWindow = null;\n\t    if (marker && marker instanceof google.maps.Marker) {\n\t        google.maps.event.clearInstanceListeners(marker);\n\t        marker.setMap(null);\n\t        marker = null;\n\t    }\n\t\n\t    // check the new options to see if we need to re-create a marker for\n\t    // this.\n\t    if (options.marker) {\n\t        marker = new google.maps.Marker({\n\t            position: mapOptions.center,\n\t            map: map\n\t        });\n\t        if (options.title) {\n\t            infoWindow = new google.maps.InfoWindow();\n\t            infoWindow.setContent(options.title);\n\t            // infoWindow.open(map, marker);\n\t            google.maps.event.addListener(marker, 'click', function () {\n\t                infoWindow.open(map, marker);\n\t            });\n\t        }\n\t    }\n\t\n\t    mapData = {\n\t        element: elem,\n\t        instance: map,\n\t        marker: marker,\n\t        infoWindow: infoWindow,\n\t        options: mapOptions\n\t    };\n\t    // set the reference on the element for later use, if needed.\n\t    elem._geolocatorMapData = mapData;\n\t    return mapData;\n\t}\n\t\n\t/**\n\t *  Sets the `flag` and `staticMap` (if enabled) property of the given location.\n\t *  @private\n\t *\n\t *  @param {Object} location - Fetched location result.\n\t *  @param {Object} options - initial options.\n\t */\n\tfunction setLocationURLs(location, options) {\n\t    if (!location || !location.address) return;\n\t    var cc = void 0,\n\t        address = location.address;\n\t    if (_utils2.default.isString(address.countryCode) && address.countryCode.length === 2) {\n\t        cc = address.countryCode;\n\t    } else if (_utils2.default.isString(address.country) && address.country.length === 2) {\n\t        cc = address.country;\n\t    }\n\t    if (!cc) return;\n\t    location.flag = _enums2.default.URL.FLAG + cc.toLowerCase() + '.svg';\n\t    if (options.staticMap) {\n\t        var opts = _utils2.default.isPlainObject(options.staticMap) ? _utils2.default.clone(options.staticMap) : {};\n\t        opts.center = location.coords;\n\t        location.staticMap = geolocator.getStaticMap(opts);\n\t    }\n\t}\n\t\n\t/**\n\t *  Nests `createMap` callback within the given callback.\n\t *  @private\n\t *\n\t *  @param {Object} options\n\t *         Method options.\n\t *  @param {Function} callback\n\t *         Parent callback.\n\t *\n\t *  @returns {Function} - Nested callback.\n\t */\n\tfunction callbackMap(options, callback) {\n\t    return function cb(err, location) {\n\t        if (err) return callback(_geo4.default.create(err), null);\n\t        setLocationURLs(location, options);\n\t        if (!options.map) return callback(null, location);\n\t        options.map = getMapOpts(options.map, location);\n\t        geolocator.createMap(options.map, function (error, map) {\n\t            if (error) return callback(error, null);\n\t            location.map = map;\n\t            return callback(null, location);\n\t        });\n\t    };\n\t}\n\t\n\t/**\n\t *  Sends a geocode or reverse-geocode request with the given options.\n\t *  @private\n\t *\n\t *  @param {Boolean} reverse\n\t *         Whether to send reverse-geocode request.\n\t *  @param {Object} options\n\t *         Geocode options.\n\t *  @param {Function} callback\n\t *         Callback to be nested and executed with map callback.\n\t */\n\tfunction _geocode(reverse, options, callback) {\n\t    checkGoogleKey();\n\t    _geo2.default.geocode(reverse, geolocator._.config, options, callbackMap(options, callback));\n\t}\n\t\n\t/**\n\t *  Runs both an address and a timezone look-up for the given location.\n\t *  @private\n\t *\n\t *  @param {Object} location\n\t *         Location object.\n\t *  @param {Object} options\n\t *         Method options.\n\t *  @param {Function} callback\n\t *         Parent callback.\n\t */\n\tfunction fetchAddressAndTimezone(location, options, callback) {\n\t    var loc = _utils2.default.clone(location, { own: false });\n\t    if (!options.addressLookup && !options.timezone) {\n\t        return callback(null, loc);\n\t    }\n\t    function getTZ(cb) {\n\t        geolocator.getTimeZone(loc.coords, function (err, timezone) {\n\t            if (err) {\n\t                return cb(err, null);\n\t            }\n\t            delete timezone.timestamp;\n\t            loc.timezone = timezone;\n\t            loc.timestamp = _utils2.default.time(); // update timestamp\n\t            cb(null, loc);\n\t        });\n\t    }\n\t    if (options.addressLookup) {\n\t        geolocator.reverseGeocode(loc.coords, function (err, result) {\n\t            if (err) return callback(err, null);\n\t            loc = _utils2.default.extend({}, result, loc);\n\t            loc.address = result.address;\n\t            loc.timestamp = _utils2.default.time(); // update timestamp\n\t            if (!options.timezone) {\n\t                callback(err, loc);\n\t            } else {\n\t                getTZ(callback);\n\t            }\n\t        });\n\t    } else if (options.timezone) {\n\t        getTZ(callback);\n\t    } else {\n\t        callback(null, loc);\n\t    }\n\t}\n\t\n\t/**\n\t *  Gets the position with better accuracy.\n\t *  See https://github.com/gwilson/getAccurateCurrentPosition#background\n\t *  @private\n\t *\n\t *  @param {Object} options\n\t *         Locate options.\n\t *  @param {Function} onPositionReceived\n\t *         Success callback.\n\t *  @param {Function} onPositionError\n\t *         Error callback.\n\t */\n\tfunction locateAccurate(options, onPositionReceived, onPositionError) {\n\t    var loc = void 0,\n\t        watcher = void 0,\n\t        onProgress = !_utils2.default.isFunction(options.onProgress) ? _utils2.default.noop : options.onProgress;\n\t\n\t    function complete() {\n\t        if (!loc) {\n\t            onPositionError(new _geo4.default(_geo4.default.Code.POSITION_UNAVAILABLE));\n\t        } else {\n\t            onPositionReceived(loc);\n\t        }\n\t    }\n\t\n\t    watcher = geolocator.watch(options, function (err, location) {\n\t        if (err) {\n\t            return watcher.clear(function () {\n\t                onPositionError(err);\n\t            });\n\t        }\n\t        loc = location;\n\t        // ignore the first event if not the only result; for more accuracy.\n\t        if (watcher.cycle > 1 && loc.coords.accuracy <= options.desiredAccuracy) {\n\t            watcher.clear(complete);\n\t        } else {\n\t            onProgress(loc);\n\t        }\n\t    });\n\t    watcher.clear(options.maximumWait + 100, complete);\n\t}\n\t\n\t// ---------------------------\n\t// INITIALIZE\n\t// ---------------------------\n\t\n\t/**\n\t *  @private\n\t *  @type {Object}\n\t */\n\tgeolocator._ = {\n\t    config: _utils2.default.extend({}, defaultConfig),\n\t    // Storage for global callbacks.\n\t    cb: {}\n\t};\n\t\n\t// setting default Geo-IP source, FreeGeoIP\n\tgeolocator.setGeoIPSource({\n\t    provider: 'freegeoip',\n\t    url: 'https://freegeoip.net/json',\n\t    callbackParam: 'callback',\n\t    schema: {\n\t        ip: 'ip',\n\t        coords: {\n\t            latitude: 'latitude',\n\t            longitude: 'longitude'\n\t        },\n\t        address: {\n\t            city: 'city',\n\t            state: 'region_name',\n\t            stateCode: 'region_code',\n\t            postalCode: 'zip_code',\n\t            countryCode: 'country_code',\n\t            country: 'country_name',\n\t            region: 'region_name'\n\t        },\n\t        timezone: {\n\t            id: 'time_zone'\n\t        }\n\t    }\n\t});\n\t\n\t// ---------------------------\n\t// EXPORT\n\t// ---------------------------\n\t\n\texports.default = geolocator;\n\t\n\t// ---------------------------\n\t// ADDITIONAL DOCUMENTATION\n\t// ---------------------------\n\t\n\t/**\n\t *  `Coordinates` inner type that specifies the geographic position of the\n\t *  device. The position is expressed as a set of geographic coordinates\n\t *  together with information about heading and speed.\n\t *\n\t *  This is generally returned as part of the\n\t *  {@link ?api=geolocator#geolocator~Location|`Location` result object}.\n\t *\n\t *  @typedef geolocator~Coordinates\n\t *  @type Object\n\t *\n\t *  @property {Number} latitude\n\t *         Specifies the latitude estimate in decimal degrees. The value\n\t *         range is [-90.00, +90.00].\n\t *  @property {Number} longitude\n\t *         Specifies the longitude estimate in decimal degrees. The value\n\t *         range is [-180.00, +180.00].\n\t *  @property {Number} altitude\n\t *         Specifies the altitude estimate in meters above the WGS 84\n\t *         ellipsoid.\n\t *  @property {Number} accuracy\n\t *         Specifies the accuracy of the latitude and longitude estimates in\n\t *         meters.\n\t *  @property {Number} altitudeAccuracy\n\t *         Specifies the accuracy of the altitude estimate in meters.\n\t *  @property {Number} heading\n\t *         Specifies the device's current direction of movement in degrees\n\t *         counting clockwise relative to true north.\n\t *  @property {Number} speed\n\t *         Specifies the device's current ground speed in meters per second.\n\t */\n\t\n\t/**\n\t *\t`Address` inner type that specifies the address of the fetched location.\n\t *\tThe address is expressed as a set of political and locality components.\n\t *\n\t *  This is generally returned as part of the\n\t *  {@link ?api=geolocator#geolocator~Location|`Location` result object}.\n\t *\n\t *  @typedef geolocator~Address\n\t *  @type Object\n\t *\n\t *  @property {String} commonName\n\t *         Indicates a point of interest, a premise or colloquial area name for\n\t *         the fetched location, if any.\n\t *  @property {String} streetNumber\n\t *         Indicates the precise street number of the fetched location, if any.\n\t *  @property {String} street\n\t *         Indicates the street name of the fetched location, if any.\n\t *  @property {String} route\n\t *         Indicates the route name of the fetched location, if any.\n\t *  @property {String} neighborhood\n\t *         Indicates the neighborhood name of the fetched location, if any.\n\t *  @property {String} town\n\t *         Indictes the town of the fetched location, if any.\n\t *  @property {String} city\n\t *         Indicates the city of the fetched location.\n\t *  @property {String} region\n\t *         Indicates the political region name of the fetched location, if any.\n\t *  @property {String} postalCode\n\t *         Indicates the postal code of the fetched location, if any.\n\t *  @property {String} state\n\t *         Indicates the state of the fetched location, if any.\n\t *  @property {String} stateCode\n\t *         Indicates the state code of the fetched location, if any.\n\t *  @property {String} country\n\t *         Indicates the national political entity of the fetched location.\n\t *  @property {String} countryCode\n\t *         Indicates the ISO alpha-2 country code of the fetched location.\n\t */\n\t\n\t/**\n\t *\t`TimeZone` inner type that specifies time offset data for the fetched\n\t *\tlocation on the surface of the earth.\n\t *\n\t *  This is generally returned as part of the\n\t *  {@link ?api=geolocator#geolocator~Location|`Location` result object}.\n\t *\n\t *  @typedef geolocator~TimeZone\n\t *  @type Object\n\t *\n\t *  @property {String} id\n\t *         The ID of the time zone, such as `\"America/Los_Angeles\"` or\n\t *         `\"Australia/Sydney\"`. These IDs are defined in the\n\t *         {@link http://www.iana.org/time-zones|IANA Time Zone Database},\n\t *         which is also available in searchable format in Wikipedia's\n\t *         {@link http://en.wikipedia.org/wiki/List_of_tz_database_time_zones|List of tz database time zones}.\n\t *  @property {String} name\n\t *         The long form name of the time zone. This field will be localized if\n\t *         the Geolocator `language` is configured. e.g. `\"Pacific Daylight Time\"`\n\t *         or `\"Australian Eastern Daylight Time\"`.\n\t *  @property {String} abbr\n\t *         The abbreviation of the time zone.\n\t *  @property {Number} dstOffset\n\t *         The offset for daylight-savings time in seconds. This will be zero\n\t *         if the time zone is not in Daylight Savings Time during the specified\n\t *         timestamp.\n\t *  @property {Number} rawOffset\n\t *         The offset from UTC (in seconds) for the given location. This does\n\t *         not take into effect daylight savings.\n\t */\n\t\n\t/**\n\t *\t`MapData` inner type that provides references to the components of a\n\t *\tcreated Google Maps `Map` and the containing DOM element.\n\t *\n\t *  This is generally returned as part of the\n\t *  {@link ?api=geolocator#geolocator~Location|`Location` result object}.\n\t *\n\t *  @typedef geolocator~MapData\n\t *  @type Object\n\t *\n\t *  @property {HTMLElement} element\n\t *         DOM element which a (Google) map is created within.\n\t *  @property {google.maps.Map} instance\n\t *         Instance of a Google Maps `Map` object.\n\t *  @property {google.maps.Marker} marker\n\t *         Instance of a Google Maps `Marker` object, if any.\n\t *  @property {google.maps.InfoWindow} infoWindow\n\t *         Instance of a Google Maps `InfoWindow` object, if any.\n\t *  @property {Object} options\n\t *         Arbitrary object of applied map options.\n\t */\n\t\n\t/**\n\t *\t`Location` inner type that specifies geographic coordinates, address and\n\t *\ttime zone information for the fetched location.\n\t *\n\t *  This result object is passed to the callbacks of the corresponding\n\t *  asynchronous Geolocator methods (such as `.locate()` method), as the second\n\t *  argument. The contents of this object will differ for various  Geolocator\n\t *  methods, depending on the configured method options.\n\t *\n\t *  @typedef geolocator~Location\n\t *  @type Object\n\t *\n\t *  @property {Coordinates} coords\n\t *         Specifies the geographic location of the device. The location is\n\t *         expressed as a set of geographic coordinates together with\n\t *         information about heading and speed.\n\t *         See {@link #geolocator~Coordinates|`geolocator~Coordinates` type}\n\t *         for details.\n\t *  @property {Address} address\n\t *         Specifies the address of the fetched location. The address is\n\t *         expressed as a set of political and locality components.\n\t *         This property might be `undefined` if `addressLookup` option is not\n\t *         enabled for the corresponding method.\n\t *         See {@link #geolocator~Address|`geolocator~Address` type}\n\t *         for details.\n\t *  @property {String} formattedAddress\n\t *         The human-readable address of this location. Often this address is\n\t *         equivalent to the \"postal address,\" which sometimes differs from\n\t *         country to country.\n\t *  @property {Boolean} targetReached\n\t *         Specifies whether the defined target coordinates is reached.\n\t *         This property is only available for\n\t *         {@link #geolocator.watch|`geolocator.watch()`} method when `target`\n\t *         option is defined.\n\t *  @property {String} type\n\t *         Type of the location. See\n\t *         {@link #geolcoator.LocationType|`geolcoator.LocationType` enumeration}\n\t *         for details.\n\t *  @property {String} placeId\n\t *         A unique identifier that can be used with other Google APIs.\n\t *  @property {String} flag\n\t *         URL of the country flag image, in SVG format. This property exists\n\t *         only if address information is available.\n\t *  @property {TimeZone} timezone\n\t *         Specifies time offset data for the fetched location on the surface of\n\t *         the earth. See {@link #geolocator~TimeZone|`geolocator~TimeZone` type}\n\t *         for details.\n\t *  @property {MapData} map\n\t *         Provides references to the components of a created Google Maps `Map`\n\t *         and the containing DOM element. See\n\t *         {@link #geolocator~MapData|`geolocator~MapData` type} for details.\n\t *  @property {String} staticMap\n\t *         URL of a static Google map image, for the location.\n\t *  @property {Number} timestamp\n\t *         Specifies the time when the location information was retrieved and\n\t *         the `Location` object created.\n\t */\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar _toString = Object.prototype.toString;\n\t\n\t/**\n\t * Simple utility methods; internally used within Geolocator core;\n\t * made publically accessible.\n\t * @type {Object}\n\t * @readonly\n\t *\n\t * @license MIT\n\t * @copyright 2016, Onur Yıldırım (onur@cutepilot.com)\n\t */\n\tvar utils = {\n\t    noop: function noop() {},\n\t\n\t\n\t    // ---------------------------\n\t    // Validation\n\t    // ---------------------------\n\t\n\t    /**\n\t     * Checks if the type of the given value is `String`.\n\t     * @memberof utils\n\t     *\n\t     * @param {*} value - Value to be checked.\n\t     * @returns {Boolean}\n\t     */\n\t    isString: function isString(value) {\n\t        return typeof value === 'string';\n\t    },\n\t    isStringSet: function isStringSet(value) {\n\t        return typeof value === 'string' && value.trim().length > 0;\n\t    },\n\t\n\t\n\t    /**\n\t     * Checks if the type of the given value is `Number`.\n\t     * @memberof utils\n\t     *\n\t     * @param {*} value - Value to be checked.\n\t     * @returns {Boolean}\n\t     */\n\t    isNumber: function isNumber(value) {\n\t        return typeof value === 'number';\n\t    },\n\t\n\t\n\t    /**\n\t     * Checks if the type of the given value is an `Object` or `Function`.\n\t     * @memberof utils\n\t     *\n\t     * @param {*} value - Value to be checked.\n\t     * @returns {Boolean}\n\t     */\n\t    isObject: function isObject(value) {\n\t        var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);\n\t        return Boolean(value) && (type === 'object' || type === 'function');\n\t    },\n\t\n\t\n\t    /**\n\t     * Checks if the type of the given value is `Function`.\n\t     * @memberof utils\n\t     *\n\t     * @param {*} value - Value to be checked.\n\t     * @returns {Boolean}\n\t     */\n\t    isFunction: function isFunction(value) {\n\t        return typeof value === 'function';\n\t    },\n\t\n\t\n\t    /**\n\t     * Checks if the type of the given value is `Array`.\n\t     * @memberof utils\n\t     *\n\t     * @param {*} value - Value to be checked.\n\t     * @returns {Boolean}\n\t     */\n\t    isArray: function isArray(value) {\n\t        return Boolean(value) && _toString.call(value) === '[object Array]';\n\t    },\n\t\n\t\n\t    /**\n\t     * Checks if the given object is a non-empty `Array`.\n\t     * @memberof utils\n\t     *\n\t     * @param {*} array - Object to be checked.\n\t     * @returns {Boolean}\n\t     */\n\t    isFilledArray: function isFilledArray(array) {\n\t        return utils.isArray(array) && array.length > 0;\n\t    },\n\t\n\t\n\t    /**\n\t     * Checks if the given value is a plain `Object`.\n\t     * @memberof utils\n\t     *\n\t     * @param {*} value - Value to be checked.\n\t     * @returns {Boolean}\n\t     */\n\t    isPlainObject: function isPlainObject(value) {\n\t        return Boolean(value) && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && _toString.call(value) === '[object Object]';\n\t    },\n\t\n\t\n\t    /**\n\t     * Checks if the given value is a `Date`.\n\t     * @memberof utils\n\t     *\n\t     * @param {*} value - Value to be checked.\n\t     * @returns {Boolean}\n\t     */\n\t    isDate: function isDate(value) {\n\t        return Boolean(value) && _toString.call(value) === '[object Date]';\n\t    },\n\t\n\t\n\t    /**\n\t     * Checks if the given object is a DOM element.\n\t     * @memberof utils\n\t     *\n\t     * @param {Object} object - Object to be checked.\n\t     * @returns {Boolean}\n\t     */\n\t    isElement: function isElement(object) {\n\t        if (!object) return false;\n\t        return object instanceof HTMLElement || (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object.nodeType === 1;\n\t    },\n\t\n\t\n\t    /**\n\t     * Checks if the given object is a DOM node.\n\t     * @memberof utils\n\t     *\n\t     * @param {Object} object - Object to be checked.\n\t     * @returns {Boolean}\n\t     */\n\t    isNode: function isNode(object) {\n\t        if (!object) return false;\n\t        return object instanceof Node || (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && typeof object.nodeType === 'number';\n\t    },\n\t\n\t\n\t    /**\n\t     * Checks if the given object is a jQuery instance.\n\t     * This will still return `false` if the jQuery instance has no items.\n\t     * @memberof utils\n\t     *\n\t     * @param {Object} object - Object to be checked.\n\t     * @returns {Boolean}\n\t     */\n\t    isJQueryObject: function isJQueryObject(object) {\n\t        if (!object) return false;\n\t        return 'jQuery' in window && object instanceof window.jQuery && Boolean(object[0]);\n\t        // http://api.jquery.com/jquery-2/\n\t        // || (typeof object === 'object' && Boolean(object.jquery));\n\t    },\n\t\n\t\n\t    /**\n\t     * Checks if the type of the given value is an HTML5 `PositionError`.\n\t     * @memberof utils\n\t     *\n\t     * @param {*} value - Value to be checked.\n\t     * @returns {Boolean}\n\t     */\n\t    isPositionError: function isPositionError(value) {\n\t        return Boolean(value) && _toString.call(value) === '[object PositionError]';\n\t    },\n\t\n\t\n\t    /**\n\t     * Checks if the given value is an instance of `Error` or HTML5 `PositionError`.\n\t     * @memberof utils\n\t     *\n\t     * @param {*} value - Value to be checked.\n\t     * @returns {Boolean}\n\t     */\n\t    isError: function isError(value) {\n\t        return value instanceof Error || utils.isPositionError(value);\n\t    },\n\t\n\t\n\t    // ---------------------------\n\t    // String\n\t    // ---------------------------\n\t\n\t    /**\n\t     * Removes the query string portion from the given URL string.\n\t     * @memberof utils\n\t     *\n\t     * @param {String} str - String to be processed.\n\t     * @returns {String} - Returns the rest of the string.\n\t     */\n\t    removeQuery: function removeQuery(str) {\n\t        return str.replace(/\\?.*$/, '');\n\t    },\n\t\n\t\n\t    /**\n\t     * Removes the protocol portion from the given URL string.\n\t     * @memberof utils\n\t     *\n\t     * @param {String} str - String to be processed.\n\t     * @returns {String} - Returns the rest of the string.\n\t     */\n\t    removeProtocol: function removeProtocol(str) {\n\t        return str.replace(/^(.*:)?\\/\\//, '');\n\t    },\n\t\n\t\n\t    /**\n\t     * Sets the protocol of the given URL.\n\t     * @memberof utils\n\t     *\n\t     * @param {String} url\n\t     *        The URL to be modified.\n\t     * @param {Boolean} [https]\n\t     *        Specifies whether to set the protocol to HTTPS.\n\t     *        If omitted, current page protocol will be used.\n\t     *\n\t     * @returns {String} - The modified URL string.\n\t     */\n\t    setProtocol: function setProtocol(url, https) {\n\t        var p = void 0;\n\t        if (https === undefined || https === null) {\n\t            p = window.location.protocol;\n\t        } else {\n\t            p = https ? 'https:' : 'http:';\n\t        }\n\t        url = utils.removeProtocol(url);\n\t        return p + '//' + url;\n\t    },\n\t\n\t\n\t    /**\n\t     * Removes both the leading and trailing dots from the given string.\n\t     * @memberof utils\n\t     *\n\t     * @param {String} str - String to be processed.\n\t     * @returns {String} - Returns the rest of the string.\n\t     */\n\t    trimDots: function trimDots(str) {\n\t        return str.replace(/^\\.+?(.*?)\\.+?$/g, '$1');\n\t    },\n\t\n\t\n\t    /**\n\t     * URL-Encodes the given string. Note that the encoding is done Google's\n\t     * way; that is, spaces are replaced with `+` instead of `%20`.\n\t     * @memberof utils\n\t     *\n\t     * @param {String} str - String to be processed.\n\t     * @returns {String} - Returns the encoded string.\n\t     */\n\t    encodeURI: function encodeURI(str) {\n\t        return encodeURIComponent(str).replace(/%20/g, '+');\n\t    },\n\t\n\t\n\t    /**\n\t     * URL-Decodes the given string. This is the reverse of `utils.encodeURI()`;\n\t     * so pluses (`+`) are replaced with spaces.\n\t     * @memberof utils\n\t     *\n\t     * @param {String} str - String to be processed.\n\t     * @returns {String} - Returns the decoded string.\n\t     */\n\t    decodeURI: function decodeURI(str) {\n\t        return decodeURIComponent(str.replace(/\\+/g, '%20'));\n\t    },\n\t\n\t\n\t    /**\n\t     * Converts the given value to string.\n\t     * `null` and `undefined` converts to empty string.\n\t     * If value is a function, it's native `toString()` method is used.\n\t     * Otherwise, value is coerced.\n\t     * @memberof utils\n\t     *\n\t     * @param {*} value - String to be converted.\n\t     * @returns {String} - Returns the result string.\n\t     */\n\t    toString: function toString(value) {\n\t        if (value === null || value === undefined) return '';\n\t        if (value.toString && utils.isFunction(value.toString)) {\n\t            return value.toString();\n\t        }\n\t        return String(value);\n\t    },\n\t\n\t\n\t    /**\n\t     * Generates a random string with the number of characters.\n\t     * @memberof utils\n\t     *\n\t     * @param {Number} [len=1] - Length of the string.\n\t     * @returns {String} - Returns a random string.\n\t     */\n\t    randomString: function randomString(len) {\n\t        if (!len || !utils.isNumber(len)) len = 1;\n\t        len = -Math.abs(len);\n\t        return Math.random().toString(36).slice(len);\n\t    },\n\t\n\t\n\t    /**\n\t     * Gets the abbreviation of the given phrase.\n\t     * @memberof utils\n\t     *\n\t     * @param {String} str\n\t     *        String to abbreviate.\n\t     * @param {Object} [options]\n\t     *        Abbreviation options.\n\t     *     @param {Boolean} [options.upper=true]\n\t     *            Whether to convert to upper-case.\n\t     *     @param {Boolean} [options.dots=true]\n\t     *            Whether to add dots after each abbreviation.\n\t     *\n\t     * @returns {String} - Returns the abbreviation of the given phrase.\n\t     */\n\t    abbr: function abbr(str, options) {\n\t        options = utils.extend({\n\t            upper: true,\n\t            dots: true\n\t        }, options);\n\t        var d = options.dots ? '.' : '',\n\t            s = str.match(/(\\b\\w)/gi).join(d) + d;\n\t        return options.upper ? s.toUpperCase() : s;\n\t    },\n\t\n\t\n\t    /**\n\t     * Builds URI parameters from the given object.\n\t     * Note: This does not iterate deep objects.\n\t     * @memberof utils\n\t     *\n\t     * @param {Object} obj - Object to be processed.\n\t     * @param {Object} options - Parameterize options.\n\t     *     @param {Boolean} [options.encode=true]\n\t     *            Whether to encode URI components.\n\t     *     @param {String} [options.operator=\"=\"]\n\t     *     @param {String} [options.separator=\"&\"]\n\t     *     @param {Array} [options.include]\n\t     *            Keys to be included in the output params. If defined,\n\t     *            `options.exclude` is ignored.\n\t     *     @param {Array} [options.exclude]\n\t     *            Keys to be excluded from the output params.\n\t     *\n\t     * @returns {String} - URI parameters string.\n\t     */\n\t    params: function params(obj, options) {\n\t        if (!utils.isPlainObject(obj) || Object.keys(obj).length === 0) {\n\t            return '';\n\t        }\n\t\n\t        options = utils.extend({\n\t            encode: true,\n\t            operator: '=',\n\t            separator: '&',\n\t            include: undefined,\n\t            exclude: undefined\n\t        }, options);\n\t\n\t        var params = [],\n\t            inc = utils.isArray(options.include) ? options.include : null,\n\t            exc = !inc && utils.isArray(options.exclude) ? options.exclude : null;\n\t        utils.forIn(obj, function (value, key) {\n\t            if ((!inc || inc.indexOf(key) >= 0) && (!exc || exc.indexOf(key) < 0)) {\n\t                var v = utils.toString(value);\n\t                v = options.encode ? utils.encodeURI(v) : v;\n\t                var k = options.encode ? utils.encodeURI(key) : key;\n\t                params.push(k + options.operator + v);\n\t            }\n\t        });\n\t\n\t        return params.join(options.separator);\n\t    },\n\t\n\t\n\t    /**\n\t     * Gets the object from the given object notation string.\n\t     * @private\n\t     *\n\t     * @param {String} notation - Object notation.\n\t     * @returns {*} - Any existing object.\n\t     */\n\t    notateGlobalObj: function notateGlobalObj(notation) {\n\t        notation = utils.trimDots(notation);\n\t        var levels = notation.split('.'),\n\t            o = window;\n\t        if (levels[0] === 'window' || levels[0] === 'document') {\n\t            levels.shift();\n\t        }\n\t        levels.forEach(function (note) {\n\t            o = o[note];\n\t        });\n\t        return o;\n\t    },\n\t\n\t\n\t    // ---------------------------\n\t    // Object\n\t    // ---------------------------\n\t\n\t    /**\n\t     * Iterates over own properties of an object invoking a callback for each\n\t     * property.\n\t     * @memberof utils\n\t     *\n\t     * @param {Object} obj\n\t     *        Object to be processed.\n\t     * @param {Function} callback\n\t     *        Callback function with the following signature:\n\t     *        `function (value, key, object) { ... }`.\n\t     *        Explicitly returning `false` will exit the iteration early.\n\t     * @returns {void}\n\t     */\n\t    forIn: function forIn(obj, callback) {\n\t        var k = void 0;\n\t        for (k in obj) {\n\t            // if (obj.hasOwnProperty(k)) {} // Do this inside callback if needed.\n\t            if (callback(obj[k], k, obj) === false) break;\n\t        }\n\t    },\n\t\n\t\n\t    /**\n\t     * Extends the given object with the specified sources.\n\t     * Right most source overwrites the previous.\n\t     * NOTE: This is not a full implementation. Use with caution.\n\t     * @memberof utils\n\t     *\n\t     * @param {Object} destination\n\t     *        Destionation Object that will be extended and holds the default\n\t     *        values.\n\t     * @param {...Object} sources\n\t     *        Source objects to be merged.\n\t     *\n\t     * @returns {Object} - Returns the extended object.\n\t     */\n\t    extend: function extend(destination) {\n\t        if (!utils.isObject(destination)) return {};\n\t        var key = void 0,\n\t            value = void 0;\n\t\n\t        for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t            sources[_key - 1] = arguments[_key];\n\t        }\n\t\n\t        sources.forEach(function (source) {\n\t            for (key in source) {\n\t                // eslint-disable-line\n\t                value = source[key];\n\t                if (utils.isArray(value)) {\n\t                    destination[key] = value.concat();\n\t                } else if (utils.isDate(value)) {\n\t                    destination[key] = new Date(value);\n\t                } else if (utils.isFunction(value)) {\n\t                    // should be before object\n\t                    destination[key] = value;\n\t                } else if (utils.isObject(value)) {\n\t                    destination[key] = utils.extend({}, value);\n\t                } else {\n\t                    destination[key] = value;\n\t                }\n\t            }\n\t        });\n\t        return destination;\n\t    },\n\t\n\t\n\t    /**\n\t     * Clones the given object.\n\t     * NOTE: This is not a full implementation. Use with caution.\n\t     * @memberof utils\n\t     *\n\t     * @param {Object} obj\n\t     *        Target Object to be cloned.\n\t     * @param {Object|Array} [options]\n\t     *        Clone options or array of keys to be cloned.\n\t     *     @param {Array} [options.keys]\n\t     *            Keys of the properties to be cloned.\n\t     *     @param {Boolean} [options.own=true]\n\t     *            Whether to clone own properties only. This is only effective\n\t     *            if `keys` is not defined.\n\t     *\n\t     * @returns {Object} - Returns the cloned object.\n\t     */\n\t    clone: function clone(obj, options) {\n\t        if (!obj) return {};\n\t\n\t        if (utils.isArray(options)) {\n\t            options = { keys: options };\n\t        }\n\t        options = utils.extend({\n\t            keys: null,\n\t            own: true\n\t        }, options);\n\t\n\t        var include = void 0,\n\t            cloned = {};\n\t\n\t        utils.forIn(obj, function (value, key) {\n\t            include = options.keys ? options.keys.indexOf(key) >= 0 : options.own && obj.hasOwnProperty(key) || !options.own;\n\t            if (include) {\n\t                if (utils.isObject(value)) {\n\t                    cloned[key] = utils.clone(value, options);\n\t                } else {\n\t                    cloned[key] = value;\n\t                }\n\t            }\n\t        });\n\t        return cloned;\n\t    },\n\t\n\t\n\t    /**\n\t     *  Maps the values of the given object to a schema to re-structure a new\n\t     *  object.\n\t     *  @memberof utils\n\t     *\n\t     *  @param {Object} obj\n\t     *         Original object to be mapped.\n\t     *  @param {Object} schema\n\t     *         Schema to be used to map the object.\n\t     *\n\t     *  @returns {Object} - Mapped object.\n\t     */\n\t    mapToSchema: function mapToSchema(obj, schema) {\n\t        var mapped = {};\n\t        utils.forIn(schema, function (value, key) {\n\t            if (utils.isPlainObject(value)) {\n\t                mapped[key] = utils.mapToSchema(obj, value);\n\t            } else {\n\t                mapped[key] = obj[value];\n\t            }\n\t        });\n\t        return mapped;\n\t    },\n\t\n\t\n\t    // ---------------------------\n\t    // Misc\n\t    // ---------------------------\n\t\n\t    /**\n\t     * Safely parses the given JSON `String` into an `Object`.\n\t     * The only difference from `JSON.parse()` is that this method does not\n\t     * throw for invalid input. Instead, returns `null`.\n\t     * @memberof utils\n\t     *\n\t     * @param {String} str - JSON string to be parsed\n\t     * @returns {Object|null} - Returns the parsed `Object` or `null` if the\n\t     * input is invalid.\n\t     */\n\t    safeJsonParse: function safeJsonParse(str) {\n\t        var o = null;\n\t        try {\n\t            o = JSON.parse(str);\n\t        } catch (e) {}\n\t        return o;\n\t    },\n\t\n\t\n\t    /**\n\t     * Gets a timestamp that is seconds or milliseconds since midnight,\n\t     * January 1, 1970 UTC.\n\t     * @memberof utils\n\t     *\n\t     * @param {Boolean} [seconds=false]\n\t     *        Specifies whether seconds should be returned instead of\n\t     *        milliseconds.\n\t     *\n\t     * @returns {Number} - Returns seconds or milliseconds since midnight,\n\t     * January 1, 1970 UTC.\n\t     */\n\t    time: function time(seconds) {\n\t        var ts = Date.now();\n\t        return seconds ? parseInt(ts / 1000, 10) : ts;\n\t    }\n\t};\n\t\n\texports.default = utils;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _utils = __webpack_require__(2);\n\t\n\tvar _utils2 = _interopRequireDefault(_utils);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * Utility for making `XMLHttpRequest` and `JSONP` requests.\n\t *\n\t * @license MIT\n\t * @copyright 2016, Onur Yıldırım (onur@cutepilot.com)\n\t */\n\tvar fetch = function () {\n\t    function fetch() {\n\t        _classCallCheck(this, fetch);\n\t    }\n\t\n\t    _createClass(fetch, null, [{\n\t        key: 'jsonp',\n\t\n\t\n\t        // https://html.spec.whatwg.org/multipage/scripting.html#script\n\t\n\t        /**\n\t         * Makes a JSONP (GET) request by injecting a script tag in the browser.\n\t         * Note that using JSONP has some security implications. As JSONP is really\n\t         * javascript, it can do everything else javascript can do, so you need to\n\t         * trust the provider of the JSONP data.\n\t         * @see https://en.wikipedia.org/wiki/JSONP\n\t         * @memberof fetch\n\t         *\n\t         * @param {Object|String} options - Required. Either the URL string which\n\t         *     will set other options to defaults or an options object with the\n\t         *     following properties.\n\t         *     @param {String} options.url\n\t         *            Source URL to be called.\n\t         *     @param {String} [options.type]\n\t         *            The MIME type that identifies the scripting language of the\n\t         *            code referenced within the script element.\n\t         *            e.g. `\"text/javascript\"`\n\t         *     @param {String} [options.charset]\n\t         *            Indicates the character encoding of the external resource.\n\t         *            e.g. `\"utf-8\"`.\n\t         *     @param {Boolean} [options.async=true]\n\t         *            Indicates whether or not to perform the operation\n\t         *            asynchronously. See {@link http://caniuse.com/#feat=script-async|browser support}.\n\t         *     @param {Boolean} [options.defer=false]\n\t         *            Indicates whether the script should be executed when the page\n\t         *            has finished parsing. See {@link http://caniuse.com/#feat=script-defer|browser support}.\n\t         *     @param {String} [options.crossorigin]\n\t         *            Indicates the CORS setting for the script element being\n\t         *            injected. Note that this attribute is not widely supported.\n\t         *            Valid values: `\"anonymous\"`, `\"use-credentials\"`.\n\t         *            See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes|CORS settings}.\n\t         *     @param {Number} [options.timeout=0]\n\t         *            The number of milliseconds a request can take before\n\t         *            automatically being terminated. `0` disables timeout.\n\t         *     @param {Boolean} [options.clean=false]\n\t         *            Whether to remove the loaded script from DOM when the\n\t         *            operation ends. Note that the initial source might load\n\t         *            additional sources which are not deteceted or removed. Only\n\t         *            the initial source is removed.\n\t         *     @param {Object} [options.params]\n\t         *            Optional query parameters to be appended at the end of the URL.\n\t         *            e.g. `{ key: \"MY-KEY\" }`\n\t         *            You can also include the JSONP callback name parameter here\n\t         *            but if you want the object to be passed to the callback\n\t         *            argument of this method, use `options.callbackParam` to set\n\t         *            the callback parameter.\n\t         *     @param {String} [options.callbackParam]\n\t         *            If the endpoint supports JSONP callbacks, you can set the\n\t         *            callback parameter with this setting. This will enable a\n\t         *            second `obj` argument in the callback of this method which is\n\t         *            useful if the JSONP source invokes the callback with an\n\t         *            argument.\n\t         *     @param {String} [options.rootName]\n\t         *            The name (or notation) of the object that the generated JSONP\n\t         *            callback function should be assigned to. By default, this is\n\t         *            the `window` object but you can set this to a custom object\n\t         *            notation; for example, to prevent global namespace polution.\n\t         *            Note that this root object has to be globally accessible for\n\t         *            this to work. e.g. `\"window.myObject\"` (as string)\n\t         * @param {Function} [callback]\n\t         *        The callback function that will be executed when the script is\n\t         *        loaded. This callback has the following signature:\n\t         *        `function (err, obj) { ... }`. Note that the second argument\n\t         *        `obj` will always be `undefined` if the source endpoint does not\n\t         *        support JSONP callbacks or a callback param is not set explicitly\n\t         *        via `options.callbackParam` (or if the source does not invoke the\n\t         *        jsonp with an argument). However, the function will always execute\n\t         *        when the script loads or an error occurs.\n\t         *\n\t         * @returns {void}\n\t         *\n\t         * @example\n\t         * var opts1 = {\n\t         * \t   url: 'some/api',\n\t         * \t   callbackParam: 'jsonCallback',\n\t         * \t   params: { key: 'MY-KEY' }\n\t         * };\n\t         * // This will load the following source:\n\t         * // some/api?jsonCallback={auto-generated-fn-name}&key=MY-KEY\n\t         * fetch.jsonp(opts1, function (err, obj) {\n\t         * \t   console.log(obj); // some object\n\t         * });\n\t         *\n\t         * var opts2 = {\n\t         * \t   url: 'some/api',\n\t         * \t   params: {\n\t         * \t\t   key: 'MY-KEY',\n\t         * \t\t   jsonCallback: 'my-fn-name'\n\t         * \t   }\n\t         * };\n\t         * // This will load the following source:\n\t         * // some/api?jsonCallback=my-fn-name&key=MY-KEY\n\t         * fetch.jsonp(options, function (err, obj) {\n\t         * \t   console.log(obj); // undefined\n\t         * \t   // still executes, catch errors here\n\t         * });\n\t         * // JSON callback should be explicitly set.\n\t         * window['my-fn-name'] = function (obj) {\n\t         * \t   console.log(obj); // some object\n\t         * };\n\t         */\n\t        value: function jsonp(options, callback) {\n\t            var timeout = void 0;\n\t\n\t            callback = _utils2.default.isFunction(callback) ? callback : _utils2.default.noop;\n\t\n\t            if (_utils2.default.isString(options)) {\n\t                options = { url: options };\n\t            }\n\t\n\t            if (_utils2.default.isPlainObject(options)) {\n\t                options = _utils2.default.extend({\n\t                    // type: undefined,\n\t                    async: true,\n\t                    defer: false,\n\t                    // crossorigin: undefined,\n\t                    timeout: 0,\n\t                    params: {},\n\t                    // callbackParam: undefined,\n\t                    // rootName: undefined,\n\t                    clean: true\n\t                }, options);\n\t            } else {\n\t                return callback(new Error('No options or target URL is provided.'));\n\t            }\n\t\n\t            if (_utils2.default.isString(options.url) === false || options.url.trim() === '') {\n\t                return callback(new Error('No target URL is provided.'));\n\t            }\n\t\n\t            var script = document.createElement('script'),\n\t                cbParamSet = _utils2.default.isString(options.callbackParam) && options.callbackParam.trim() !== '',\n\t                cbFnName = void 0,\n\t                root = void 0,\n\t                rootNameSet = _utils2.default.isString(options.rootName) && options.rootName !== 'window' && options.rootName !== 'document' && options.rootName.trim() !== '';\n\t\n\t            if (cbParamSet) {\n\t                cbFnName = '_jsonp_' + _utils2.default.randomString(10);\n\t                options.params[options.callbackParam] = rootNameSet ? options.rootName + '.' + cbFnName : cbFnName;\n\t            }\n\t            var query = _utils2.default.params(options.params) || '',\n\t                qMark = options.url.indexOf('?') >= 0 ? '&' : '?',\n\t                url = query ? '' + options.url + qMark + query : options.url;\n\t            // console.log(url);\n\t\n\t            function execCb(err, timeUp, obj) {\n\t                if (timeout) {\n\t                    clearTimeout(timeout);\n\t                    timeout = null;\n\t                }\n\t                if ((timeUp || options.clean) && script.parentNode) {\n\t                    script.parentNode.removeChild(script);\n\t                }\n\t                // delete the jsonp callback function\n\t                if (rootNameSet) {\n\t                    delete root[cbFnName];\n\t                }\n\t                callback(err, obj);\n\t            }\n\t\n\t            if (cbFnName) {\n\t                var fn = function fn(obj) {\n\t                    execCb(null, false, obj);\n\t                };\n\t                root = rootNameSet\n\t                // ? window[options.rootName][cbFnName] = fn;\n\t                ? _utils2.default.notateGlobalObj(options.rootName) // if rootName is dot-notation.\n\t                : window;\n\t                root[cbFnName] = fn;\n\t            } else if (script.readyState) {\n\t                // IE < 11\n\t                script.onreadystatechange = function () {\n\t                    if (script.readyState === 'loaded' || script.readyState === 'complete') {\n\t                        script.onreadystatechange = null;\n\t                        execCb(null);\n\t                    }\n\t                };\n\t            } else {\n\t                // IE 11+\n\t                script.onload = function () {\n\t                    execCb(null);\n\t                };\n\t            }\n\t\n\t            script.onerror = function (error) {\n\t                var errMsg = 'Could not load source at ' + _utils2.default.removeQuery(options.url);\n\t                if (error) {\n\t                    errMsg += '\\n' + (error.message || error);\n\t                }\n\t                execCb(new Error(errMsg));\n\t            };\n\t\n\t            if (options.type) {\n\t                script.type = options.type;\n\t            }\n\t            if (options.charset) {\n\t                script.charset = options.charset;\n\t            }\n\t            if (options.async) {\n\t                script.async = true;\n\t            }\n\t            if (options.defer) {\n\t                script.defer = true;\n\t            }\n\t            if (options.crossorigin) {\n\t                script.crossorigin = options.crossorigin;\n\t            }\n\t\n\t            script.src = url;\n\t            document.getElementsByTagName('head')[0].appendChild(script);\n\t\n\t            // Timeout\n\t            if (_utils2.default.isNumber(options.timeout) && options.timeout > 0) {\n\t                timeout = setTimeout(function () {\n\t                    script.src = '';\n\t                    execCb(new Error('Operation timed out.'), true);\n\t                }, options.timeout);\n\t            }\n\t        }\n\t\n\t        /**\n\t         * Makes an XMLHttpRequest with the given parameters.\n\t         * Note that `\"Access-Control-Allow-Origin\"` header should be present on\n\t         * the requested resource. Otherwise, the request will not be allowed.\n\t         * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest|XMLHttpRequest}.\n\t         * @memberof fetch\n\t         *\n\t         * @param {Object|String} options\n\t         *        Either the URL string which will set other options to defaults or\n\t         *        the full options object.\n\t         *     @param {String} options.url\n\t         *            Target URL to be called.\n\t         *     @param {String} [options.method=\"GET\"]\n\t         *            HTTP method.\n\t         *     @param {*} [options.data]\n\t         *            Data to be sent with the request.\n\t         *     @param {Number} [options.timeout]\n\t         *            The number of milliseconds a request can take before\n\t         *            automatically being terminated. `0` disables timeout.\n\t         *     @param {Boolean} [options.withCredentials=false]\n\t         *            Indicates whether or not cross-site Access-Control requests\n\t         *            should be made using credentials such as cookies or\n\t         *            authorization headers.\n\t         *     @param {Boolean} [options.async=true]\n\t         *            Indicating whether or not to perform the operation\n\t         *            asynchronously. If this value is false, the `send()` method\n\t         *            does not return until the response is received. If `true`,\n\t         *            notification of a completed transaction is provided using\n\t         *            event listeners. This must be `true` if the multipart\n\t         *            attribute is `true`, or an exception will be thrown.\n\t         *     @param {String} [options.mimeType]\n\t         *            If set, overrides the MIME type returned by the server. This\n\t         *            may be used, for example, to force a stream to be treated and\n\t         *            parsed as `text/xml`, even if the server does not report it as\n\t         *            such.\n\t         *     @param {Object} [options.headers]\n\t         *            Sets the HTTP request headers. Each key should be a header\n\t         *            name with a value. e.g. `{ 'Content-Length': 50 }`. For\n\t         *            security reasons, some headers cannot be set and can only be\n\t         *            controlled by the user agent.\n\t         *     @param {String} [options.username=\"\"]\n\t         *            User name to use for authentication purposes.\n\t         *     @param {String} [options.password=\"\"]\n\t         *            Password to use for authentication purposes.\n\t         * @param {Function} [callback]\n\t         *        The callback function in the following signature:\n\t         *        `function (err, xhr) { ... }`\n\t         *        Note that `xhr` object is always passed regardless of an error.\n\t         *\n\t         * @returns {void}\n\t         */\n\t\n\t    }, {\n\t        key: 'xhr',\n\t        value: function xhr(options, callback) {\n\t            var xhr = void 0,\n\t                err = void 0;\n\t\n\t            if ('XMLHttpRequest' in window) {\n\t                xhr = new XMLHttpRequest();\n\t            } else {\n\t                throw new Error('XMLHttpRequest is not supported!');\n\t            }\n\t\n\t            var hasCallback = _utils2.default.isFunction(callback);\n\t            callback = hasCallback ? callback : _utils2.default.noop;\n\t\n\t            if (_utils2.default.isString(options)) {\n\t                options = { url: options };\n\t            }\n\t\n\t            if (_utils2.default.isPlainObject(options)) {\n\t                options = _utils2.default.extend({\n\t                    method: 'GET',\n\t                    data: undefined,\n\t                    async: true,\n\t                    timeout: 0, // no timeout\n\t                    withCredentials: false,\n\t                    mimeType: undefined,\n\t                    username: '',\n\t                    password: ''\n\t                }, options);\n\t            } else {\n\t                callback(new Error('No options or target URL is provided.'));\n\t            }\n\t\n\t            if (_utils2.default.isString(options.url) === false) {\n\t                callback(new Error('No target URL is provided.'));\n\t            }\n\t\n\t            options.username = String(options.username);\n\t            options.password = String(options.password);\n\t            options.method = options.method.toUpperCase();\n\t            if (options.method !== 'POST' && options.method !== 'PUT') {\n\t                options.data = undefined;\n\t            }\n\t            // console.log(JSON.stringify(options));\n\t\n\t            if (hasCallback) {\n\t                xhr.onreadystatechange = function () {\n\t                    if (xhr.readyState === fetch.XHR_READY_STATE.DONE) {\n\t                        if (xhr.status === 200) {\n\t                            callback(null, xhr);\n\t                        } else {\n\t                            // let response = utils.safeJsonParse(xhr.responseText);\n\t                            // if (response && response.error)\n\t                            var crossDomain = xhr.status === 0 ? '. Make sure you have permission if this is a cross-domain request.' : '';\n\t                            err = new Error('The request returned status: ' + xhr.status + crossDomain);\n\t                            // console.log(xhr);\n\t                            callback(err, xhr);\n\t                        }\n\t                    }\n\t                };\n\t\n\t                if (_utils2.default.isNumber(options.timeout) && options.timeout > 0) {\n\t                    xhr.timeout = options.timeout;\n\t                    xhr.ontimeout = function () {\n\t                        // xhr.abort();\n\t                        err = new Error('The request had timed out.');\n\t                        callback(err, xhr);\n\t                    };\n\t                }\n\t            }\n\t            // console.log(options);\n\t            xhr.open(options.method, options.url, options.async, options.username, options.password);\n\t\n\t            // xhr.setRequestHeader() method should b called œafter open(), but\n\t            // before send().\n\t            if (_utils2.default.isPlainObject(options.headers)) {\n\t                Object.keys(options.headers).forEach(function (key) {\n\t                    var value = options.headers[key];\n\t                    xhr.setRequestHeader(key, value);\n\t                });\n\t            }\n\t\n\t            // xhr.overrideMimeType() method must be called before send().\n\t            if (options.mimeType) {\n\t                xhr.overrideMimeType(options.mimeType);\n\t            }\n\t\n\t            xhr.send(options.data);\n\t        }\n\t\n\t        /**\n\t         * Alias of `fetch.xhr()` with request method set to `\"GET\"` by default.\n\t         * @memberof fetch\n\t         *\n\t         * @param {Object} options\n\t         *        Either the URL string which will set other options to defaults or\n\t         *        the full options object. See `fetch.xhr()` method options for\n\t         *        details.\n\t         * @param {Function} [callback]\n\t         *        The callback function in the following signature:\n\t         *        `function (err, xhr) { ... }`\n\t         *        Note that `xhr` object is always passed regardless of an error.\n\t         * @returns {void}\n\t         */\n\t\n\t    }, {\n\t        key: 'get',\n\t        value: function get(options, callback) {\n\t            return fetch.xhr(options, callback);\n\t        }\n\t\n\t        /**\n\t         * Alias of `fetch.xhr()` with request method set to `\"POST\"` by default.\n\t         * @memberof fetch\n\t         *\n\t         * @param {Object} options\n\t         *        Either the URL string which will set other options to defaults or\n\t         *        the full options object. See `fetch.xhr()` method options for\n\t         *        details.\n\t         * @param {Function} [callback]\n\t         *        The callback function in the following signature:\n\t         *        `function (err, xhr) { ... }`\n\t         *        Note that `xhr` object is always passed regardless of an error.\n\t         * @returns {void}\n\t         */\n\t\n\t    }, {\n\t        key: 'post',\n\t        value: function post(options, callback) {\n\t            return _xhr('POST', options, callback);\n\t        }\n\t\n\t        /**\n\t         * Alias of `fetch.xhr()` with request method set to `\"PUT\"` by default.\n\t         * @memberof fetch\n\t         *\n\t         * @param {Object} options\n\t         *        Either the URL string which will set other options to defaults or\n\t         *        the full options object. See `fetch.xhr()` method options for\n\t         *        details.\n\t         * @param {Function} [callback]\n\t         *        The callback function in the following signature:\n\t         *        `function (err, xhr) { ... }`\n\t         *        Note that `xhr` object is always passed regardless of an error.\n\t         * @returns {void}\n\t         */\n\t\n\t    }, {\n\t        key: 'put',\n\t        value: function put(options, callback) {\n\t            return _xhr('PUT', options, callback);\n\t        }\n\t\n\t        /**\n\t         * Alias of `fetch.xhr()` with request method set to `\"DELETE\"` by default.\n\t         * @memberof fetch\n\t         *\n\t         * @param {Object} options\n\t         *        Either the URL string which will set other options to defaults or\n\t         *        the full options object. See `fetch.xhr()` method options for\n\t         *        details.\n\t         * @param {Function} [callback]\n\t         *        The callback function in the following signature:\n\t         *        `function (err, xhr) { ... }`\n\t         *        Note that `xhr` object is always passed regardless of an error.\n\t         * @returns {void}\n\t         */\n\t\n\t    }, {\n\t        key: 'delete',\n\t        value: function _delete(options, callback) {\n\t            return _xhr('DELETE', options, callback);\n\t        }\n\t    }]);\n\t\n\t    return fetch;\n\t}();\n\t\n\t/**\n\t *  @private\n\t */\n\t\n\t\n\tfunction _xhr(method, options, callback) {\n\t    options = _utils2.default.isString(options) ? { url: options } : options || {};\n\t    options.method = method;\n\t    return fetch.xhr(options, callback);\n\t}\n\t\n\t/**\n\t * Enumerates `XMLHttpRequest` ready states.\n\t * Not to be confused with `script.readyState`.\n\t * @memberof fetch\n\t *\n\t * @enum {Number}\n\t */\n\tfetch.XHR_READY_STATE = {\n\t    /**\n\t     * `xhr.open()` has not been called yet.\n\t     * @type {Number}\n\t     */\n\t    UNSENT: 0,\n\t    /**\n\t     * `xhr.send()` has been called.\n\t     * @type {Number}\n\t     */\n\t    OPENED: 1,\n\t    /**\n\t     * `xhr.send()` has been called, and headers and status are available.\n\t     * @type {Number}\n\t     */\n\t    HEADERS_RECEIVED: 2,\n\t    /**\n\t     * Downloading; responseText holds partial data.\n\t     * @type {Number}\n\t     */\n\t    LOADING: 3,\n\t    /**\n\t     * The operation is complete.\n\t     * @type {Number}\n\t     */\n\t    DONE: 4\n\t};\n\t\n\texports.default = fetch;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _utils = __webpack_require__(2);\n\t\n\tvar _utils2 = _interopRequireDefault(_utils);\n\t\n\tvar _fetch = __webpack_require__(3);\n\t\n\tvar _fetch2 = _interopRequireDefault(_fetch);\n\t\n\tvar _enums = __webpack_require__(5);\n\t\n\tvar _enums2 = _interopRequireDefault(_enums);\n\t\n\tvar _geo = __webpack_require__(6);\n\t\n\tvar _geo2 = _interopRequireDefault(_geo);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/**\n\t *  Helper methods.\n\t *\n\t *  @license MIT\n\t *  @copyright 2016, Onur Yıldırım (onur@cutepilot.com)\n\t *  @type {Object}\n\t *  @private\n\t */\n\tvar geoHelper = {\n\t    toGoogleCoords: function toGoogleCoords(coords) {\n\t        return {\n\t            lat: coords.lat || coords.latitude,\n\t            lng: coords.lng || coords.longitude\n\t        };\n\t    },\n\t    fromGoogleCoords: function fromGoogleCoords(coords) {\n\t        return {\n\t            latitude: coords.latitude || coords.lat,\n\t            longitude: coords.longitude || coords.lng\n\t        };\n\t    },\n\t\n\t\n\t    // used for distance matrix origins and destinations\n\t    toPointList: function toPointList(arr) {\n\t        arr = _utils2.default.isArray(arr) ? arr : [arr];\n\t        return arr.map(function (o) {\n\t            return _utils2.default.isString(o) ? o : geoHelper.toGoogleCoords(o);\n\t        });\n\t    },\n\t    getGeocodeComps: function getGeocodeComps(comp) {\n\t        return {\n\t            route: comp.route,\n\t            locality: comp.locality,\n\t            administrative_area: comp.administrativeArea, // eslint-disable-line camelcase\n\t            postal_code: comp.postalCode, // eslint-disable-line camelcase\n\t            country: comp.country,\n\t            region: comp.region\n\t        };\n\t    },\n\t\n\t\n\t    // Geocode examples:\n\t    // address=1600+Amphitheatre+Parkway,+Mountain+View,+CA&key=API_KEY\n\t    // address=Winnetka&bounds=34.172684,-118.604794|34.236144,-118.500938&key=API_KEY\n\t    // address=santa+cruz&components=country:ES&key=API_KEY\n\t    // components=administrative_area:TX|country:US&key=API_KEY\n\t    // Reverse Geocode examples:\n\t    // latlng=40.714224,-73.961452&key=API_KEY\n\t    // place_id=ChIJd8BlQ2BZwokRAFUEcm_qrcA&key=API_KEY\n\t    buildGeocodeParams: function buildGeocodeParams(options, reverse) {\n\t        var params = [],\n\t            e = _utils2.default.encodeURI;\n\t\n\t        if (reverse) {\n\t            if (options.placeId) {\n\t                params.push('place_id=' + options.placeId);\n\t            } else if (options.latitude && options.longitude) {\n\t                params.push('latlng=' + options.latitude + ',' + options.longitude);\n\t            }\n\t        } else {\n\t            if (options.address) {\n\t                params.push('address=' + e(options.address));\n\t            }\n\t\n\t            var geoComps = geoHelper.getGeocodeComps(options);\n\t            geoComps = _utils2.default.params(geoComps, { operator: ':', separator: '|' });\n\t            params.push('components=' + geoComps);\n\t\n\t            var b = options.bounds;\n\t            if (_utils2.default.isArray(b) && b.length === 4) {\n\t                params.push('bounds=' + b[0] + ',' + b[1] + '|' + b[2] + ',' + b[3]);\n\t            } else if (_utils2.default.isPlainObject(b) && Object.keys(b).length === 4) {\n\t                params.push('bounds=' + b.southwestLat + ',' + b.southwestLng + '|' + b.northeastLat + ',' + b.northeastLng);\n\t            }\n\t        }\n\t\n\t        params.push('language=' + options.language);\n\t        params.push('key=' + options.key);\n\t        return params.join('&');\n\t    },\n\t\n\t\n\t    // See https://developers.google.com/maps/documentation/geocoding/intro\n\t    formatGeocodeResults: function formatGeocodeResults(results) {\n\t        if (!_utils2.default.isArray(results) || results.length <= 0) {\n\t            return {\n\t                location: null,\n\t                address: null,\n\t                formattedAddress: '',\n\t                type: null, // locationType\n\t                placeId: ''\n\t            };\n\t        }\n\t\n\t        var i = void 0,\n\t            c = void 0,\n\t            o = {},\n\t            data = results[0],\n\t            comps = data.address_components;\n\t\n\t        for (i = 0; i < comps.length; i += 1) {\n\t            c = comps[i];\n\t            if (c.types && c.types.length > 0) {\n\t                o[c.types[0]] = c.long_name;\n\t                o[c.types[0] + '_s'] = c.short_name;\n\t            }\n\t        }\n\t\n\t        var geometry = data.geometry;\n\t        return {\n\t            coords: geometry && geometry.location ? {\n\t                latitude: geometry.location.lat,\n\t                longitude: geometry.location.lng\n\t            } : null,\n\t            address: {\n\t                commonName: o.point_of_interest || o.premise || o.subpremise || o.colloquial_area || '',\n\t                streetNumber: o.street_number || '',\n\t                street: o.administrative_area_level_4 || o.administrative_area_level_3 || o.route || '',\n\t                route: o.route || '',\n\t                neighborhood: o.neighborhood || o.administrative_area_level_5 || o.administrative_area_level_4 || '',\n\t                town: o.sublocality || o.administrative_area_level_2 || '',\n\t                city: o.locality || o.administrative_area_level_1 || '',\n\t                region: o.administrative_area_level_2 || o.administrative_area_level_1 || '',\n\t                postalCode: o.postal_code || '',\n\t                state: o.administrative_area_level_1 || '',\n\t                stateCode: o.administrative_area_level_1_s || '',\n\t                country: o.country || '',\n\t                countryCode: o.country_s || ''\n\t            },\n\t            formattedAddress: data.formatted_address,\n\t            type: geometry.location_type || '',\n\t            placeId: data.place_id,\n\t            timestamp: _utils2.default.time()\n\t        };\n\t    },\n\t    geocode: function geocode(reverse, conf, options, callback) {\n\t        var opts = {};\n\t        if (_utils2.default.isString(options)) {\n\t            opts = {};\n\t            var prop = reverse ? 'placeId' : 'address';\n\t            opts[prop] = options;\n\t        } else if (_utils2.default.isPlainObject(options)) {\n\t            opts = options;\n\t        } else {\n\t            throw new _geo2.default(_geo2.default.Code.INVALID_PARAMETERS);\n\t        }\n\t\n\t        if (reverse) {\n\t            var coordsSet = _utils2.default.isNumber(options.latitude) && _utils2.default.isNumber(options.longitude);\n\t            if (!_utils2.default.isString(options.placeId) && !coordsSet) {\n\t                throw new _geo2.default(_geo2.default.Code.INVALID_PARAMETERS);\n\t            }\n\t        }\n\t\n\t        opts = _utils2.default.extend({\n\t            key: conf.google.key || '',\n\t            language: conf.language || 'en',\n\t            raw: false\n\t        }, opts);\n\t\n\t        var query = geoHelper.buildGeocodeParams(opts, reverse),\n\t            url = _utils2.default.setProtocol(_enums2.default.URL.GOOGLE_GEOCODE, conf.https),\n\t            xhrOpts = {\n\t            url: url + '?' + query\n\t        };\n\t\n\t        _fetch2.default.xhr(xhrOpts, function (err, xhr) {\n\t            if (err) return callback(_geo2.default.create(err), null);\n\t\n\t            var response = _utils2.default.safeJsonParse(xhr.responseText),\n\t                gErr = _geo2.default.fromResponse(response);\n\t\n\t            if (gErr) return callback(gErr, null);\n\t\n\t            response = options.raw ? response : geoHelper.formatGeocodeResults(response.results);\n\t            callback(null, response);\n\t        });\n\t    },\n\t\n\t\n\t    // See https://developers.google.com/maps/documentation/distance-matrix/intro\n\t    // Raw Result Example:\n\t    // {\n\t    //    \"destination_addresses\" : [ \"San Francisco, CA, USA\", \"Victoria, BC, Canada\" ],\n\t    //    \"origin_addresses\" : [ \"Vancouver, BC, Canada\", \"Seattle, WA, USA\" ],\n\t    //    \"rows\" : [\n\t    //       {\n\t    //          \"elements\" : [\n\t    //             {\n\t    //                \"distance\" : { \"text\" : \"1,704 km\", \"value\" : 1704324 },\n\t    //                \"duration\" : { \"text\" : \"3 days 19 hours\", \"value\" : 327061\n\t    //                },\n\t    //                \"status\" : \"OK\"\n\t    //             },\n\t    //             {\n\t    //                \"distance\" : { \"text\" : \"138 km\", \"value\" : 138295 },\n\t    //                \"duration\" : { \"text\" : \"6 hours 44 mins\", \"value\" : 24236 },\n\t    //                \"status\" : \"OK\"\n\t    //             }\n\t    //          ]\n\t    //       },\n\t    //       {\n\t    //          \"elements\" : [\n\t    //             {\n\t    //                \"distance\" : { \"text\" : \"1,452 km\", \"value\" : 1451623 },\n\t    //                \"duration\" : { \"text\" : \"3 days 4 hours\", \"value\" : 275062 },\n\t    //                \"status\" : \"OK\"\n\t    //             },\n\t    //             {\n\t    //                \"distance\" : { \"text\" : \"146 km\", \"value\" : 146496 },\n\t    //                \"duration\" : { \"text\" : \"2 hours 52 mins\", \"value\" : 10324 },\n\t    //                \"status\" : \"OK\"\n\t    //             }\n\t    //          ]\n\t    //       }\n\t    //    ],\n\t    //    \"status\" : \"OK\"\n\t    // }\n\t    // Formatted to:\n\t\n\t    formatDistanceResults: function formatDistanceResults(results) {\n\t        if (!_utils2.default.isPlainObject(results)) {\n\t            return null;\n\t        }\n\t\n\t        var arr = [],\n\t            origins = results.originAddresses,\n\t            dests = results.destinationAddresses,\n\t            rows = results.rows;\n\t\n\t        // [\n\t        //     {\n\t        //          from: 'Vancouver, BC, Canada',\n\t        //          to: 'San Francisco, CA, USA',\n\t        //          distance: { value: 1704107, text: \"1,704 km\" },\n\t        //          duration: { value: 327025, text: \"3 days 19 hours\" },\n\t        //          fare: { currency: \"USD\", value: 6, text: \"$6.00\" }\n\t        //     },\n\t        //     ...\n\t        // ]\n\t\n\t        var e = void 0;\n\t        origins.forEach(function (origin, oIndex) {\n\t            dests.forEach(function (dest, dIndex) {\n\t                e = rows[oIndex].elements[dIndex];\n\t                arr.push({\n\t                    from: origin,\n\t                    to: dest,\n\t                    distance: e.distance,\n\t                    duration: e.duration,\n\t                    fare: e.fare,\n\t                    timestamp: _utils2.default.time()\n\t                });\n\t            });\n\t        });\n\t\n\t        return arr;\n\t    },\n\t\n\t\n\t    // Converts a map-styles object in to static map styles (formatted query-string params).\n\t    // See https://developers.google.com/maps/documentation/static-maps/styling\n\t    mapStylesToParams: function mapStylesToParams(styles) {\n\t        if (!styles) return '';\n\t        if (!_utils2.default.isArray(styles)) styles = [styles];\n\t        var result = [];\n\t        styles.forEach(function (v, i, a) {\n\t            var style = '';\n\t            if (v.stylers) {\n\t                // only if there is a styler object\n\t                if (v.stylers.length > 0) {\n\t                    // Needs to have a style rule to be valid.\n\t                    style += (v.hasOwnProperty('featureType') ? 'feature:' + v.featureType : 'feature:all') + '|';\n\t                    style += (v.hasOwnProperty('elementType') ? 'element:' + v.elementType : 'element:all') + '|';\n\t                    v.stylers.forEach(function (val, i, a) {\n\t                        var propName = Object.keys(val)[0],\n\t                            propVal = val[propName].toString().replace('#', '0x');\n\t                        style += propName + ':' + propVal + '|';\n\t                    });\n\t                }\n\t            }\n\t            result.push('style=' + encodeURIComponent(style));\n\t        });\n\t        return result.join('&');\n\t    }\n\t};\n\t\n\texports.default = geoHelper;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tvar GOOGLE_MAPS_API_BASE = '//maps.googleapis.com/maps/api';\n\t\n\t/**\n\t * This file only includes partial documentation about `geolocator` enumerations.\n\t * Note that these enumerations are mostly an aggregation of\n\t * {@link https://developers.google.com/maps/documentation/javascript|Google Maps API} constants.\n\t *\n\t * @private\n\t * @readonly\n\t */\n\tvar enums = Object.freeze({\n\t  /**\n\t   * Enumerates API endpoints used within Geolocator core.\n\t   *\n\t   * @enum {String}\n\t   * @readonly\n\t   * @private\n\t   */\n\t  URL: {\n\t    /**\n\t     *  Public IP retrieval (free) service.\n\t     *  @type {String}\n\t     *  @private\n\t     */\n\t    IP: '//api.ipify.org',\n\t    /**\n\t     *  Country SVG flags.\n\t     *  e.g. <url>/tr.svg for Turkey flag.\n\t     *  @type {String}\n\t     *  @private\n\t     */\n\t    FLAG: '//cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.3.1/flags/4x3/',\n\t    /**\n\t     * Google Maps API bootstrap endpoint that loads all of the main\n\t     * Javascript objects and symbols for use in the Maps API.\n\t     * Some Maps API features are also available in self-contained\n\t     * libraries which are not loaded unless you specifically request them.\n\t     * See {@link https://developers.google.com/maps/documentation/javascript/libraries|details}.\n\t     * @type {String}\n\t     * @private\n\t     */\n\t    GOOGLE_MAPS_API: GOOGLE_MAPS_API_BASE + '/js',\n\t    /**\n\t     * Google Maps API Static Map endpoint.\n\t     * @type {String}\n\t     * @private\n\t     */\n\t    GOOGLE_SATATIC_MAP: GOOGLE_MAPS_API_BASE + '/staticmap',\n\t    /**\n\t     * Google Geolocation API endpoint.\n\t     * @type {String}\n\t     * @private\n\t     */\n\t    GOOGLE_GEOLOCATION: '//www.googleapis.com/geolocation/v1/geolocate',\n\t    /**\n\t     * Google Geocode API endpoint.\n\t     * @type {String}\n\t     * @private\n\t     */\n\t    GOOGLE_GEOCODE: '//maps.googleapis.com/maps/api/geocode/json',\n\t    /**\n\t     * Google TimeZone API endpoint.\n\t     * @type {String}\n\t     * @private\n\t     */\n\t    GOOGLE_TIMEZONE: '//maps.googleapis.com/maps/api/timezone/json',\n\t    /**\n\t     * Google Distance Matrix API endpoint.\n\t     * @type {String}\n\t     * @private\n\t     */\n\t    GOOGLE_DISTANCE_MATRIX: '//maps.googleapis.com/maps/api/distancematrix/json'\n\t  },\n\t  /**\n\t   * Enumerates Google map types.\n\t   * @memberof! geolocator\n\t   *\n\t   * @enum {String}\n\t   * @readonly\n\t   */\n\t  MapTypeId: {\n\t    /**\n\t     * Map type that displays a transparent layer of major streets on\n\t     * satellite images.\n\t     * @type {String}\n\t     */\n\t    HYBRID: 'hybrid',\n\t    /**\n\t     * Map type that displays a normal street map.\n\t     * @type {String}\n\t     */\n\t    ROADMAP: 'roadmap',\n\t    /**\n\t     * Map type that displays satellite images.\n\t     * @type {String}\n\t     */\n\t    SATELLITE: 'satellite',\n\t    /**\n\t     * Map type displays maps with physical features such as terrain and\n\t     * vegetation.\n\t     * @type {String}\n\t     */\n\t    TERRAIN: 'terrain'\n\t  },\n\t  /**\n\t   * Enumerates Google location types.\n\t   * @memberof! geolocator\n\t   *\n\t   * @enum {String}\n\t   * @readonly\n\t   */\n\t  LocationType: {\n\t    /**\n\t     * Indicates that the returned result is a precise geocode for which\n\t     * we have location information accurate down to street address\n\t     * precision.\n\t     * @type {String}\n\t     */\n\t    ROOFTOP: 'ROOFTOP',\n\t    /**\n\t     * Indicates that the returned result reflects an approximation\n\t     * (usually on a road) interpolated between two precise points (such as\n\t     * intersections). Interpolated results are generally returned when\n\t     * rooftop geocodes are unavailable for a street address.\n\t     * @type {String}\n\t     */\n\t    RANGE_INTERPOLATED: 'RANGE_INTERPOLATED',\n\t    /**\n\t     * Indicates that the returned result is the geometric center of a\n\t     * result such as a polyline (for example, a street) or polygon\n\t     * (region).\n\t     * @type {String}\n\t     */\n\t    GEOMETRIC_CENTER: 'GEOMETRIC_CENTER',\n\t    /**\n\t     * Indicates that the returned result is approximate.\n\t     * @type {String}\n\t     */\n\t    APPROXIMATE: 'APPROXIMATE'\n\t  },\n\t  /**\n\t   * Enumerates Google travel modes.\n\t   * @memberof! geolocator\n\t   *\n\t   * @enum {String}\n\t   * @readonly\n\t   */\n\t  TravelMode: {\n\t    /**\n\t     * Indicates distance calculation using the road network.\n\t     * @type {String}\n\t     */\n\t    DRIVING: 'DRIVING',\n\t    /**\n\t     * Requests distance calculation for walking via pedestrian paths &\n\t     * sidewalks (where available).\n\t     * @type {String}\n\t     */\n\t    WALKING: 'WALKING',\n\t    /**\n\t     * Requests distance calculation for bicycling via bicycle paths &\n\t     * preferred streets (where available).\n\t     * @type {String}\n\t     */\n\t    BICYCLING: 'BICYCLING',\n\t    /**\n\t     * Requests distance calculation via public transit routes (where\n\t     * available). This value may only be specified if the request includes\n\t     * an API key or a Google Maps APIs Premium Plan client ID. If you set\n\t     * the mode to transit you can optionally specify either a\n\t     * `departureTime` or an `arrivalTime`. If neither time is specified,\n\t     * the `departureTime` defaults to now (that is, the departure time defaults\n\t     * to the current time). You can also optionally include a `transitMode`\n\t     * and/or a `transitRoutingPreference`.\n\t     * @type {String}\n\t     */\n\t    TRANSIT: 'TRANSIT'\n\t  },\n\t  // /**\n\t  //  * Enumerates Google route restrictions.\n\t  //  * @memberof! geolocator\n\t  //  *\n\t  //  * @enum {String}\n\t  //  * @readonly\n\t  //  */\n\t  // RouteRestriction: {\n\t  //     TOLLS: 'tolls',\n\t  //     HIGHWAYS: 'highways',\n\t  //     FERRIES: 'ferries',\n\t  //     INDOOR: 'indoor'\n\t  // },\n\t  /**\n\t   * Enumerates Google unit systems.\n\t   * @memberof! geolocator\n\t   *\n\t   * @enum {Number}\n\t   * @readonly\n\t   */\n\t  UnitSystem: {\n\t    /**\n\t     * Distances in kilometers and meters.\n\t     * @type {Number}\n\t     */\n\t    METRIC: 0,\n\t    /**\n\t     * Distances defined in miles and feet.\n\t     * @type {Number}\n\t     */\n\t    IMPERIAL: 1\n\t  },\n\t  /**\n\t   * Enumerates mobile radio types.\n\t   * @memberof! geolocator\n\t   *\n\t   * @enum {String}\n\t   * @readonly\n\t   */\n\t  RadioType: {\n\t    /**\n\t     * LTE (Long-Term Evolution) mobile radio type.\n\t     * @type {String}\n\t     */\n\t    LTE: 'lte',\n\t    /**\n\t     * GSM (Global System for Mobile Communications) mobile radio type.\n\t     * @type {String}\n\t     */\n\t    GSM: 'gsm',\n\t    /**\n\t     * CDMA (Code division multiple access) mobile radio access technology.\n\t     * @type {String}\n\t     */\n\t    CDMA: 'cdma',\n\t    /**\n\t     * Wideband CDMA mobile radio access technology.\n\t     * @type {String}\n\t     */\n\t    WCDMA: 'wcdma'\n\t  },\n\t  /**\n\t   * Enumerates formulas/algorithms for calculating the distance between two\n\t   * lat/lng points.\n\t   * @memberof! geolocator\n\t   *\n\t   * @readonly\n\t   * @enum {String}\n\t   *\n\t   * @todo {@link https://en.wikipedia.org/wiki/Vincenty%27s_formulae|Vincenty's Formula}\n\t   */\n\t  DistanceFormula: {\n\t    /**\n\t     * Haversine formula for calculating the distance between two lat/lng points\n\t     * by relating the sides and angles of spherical triangles.\n\t     * @see {@link http://en.wikipedia.org/wiki/Haversine_formula|Haversine_formula}.\n\t     * @type {String}\n\t     */\n\t    HAVERSINE: 'haversine',\n\t    /**\n\t     * Formula based on the Pythagoras Theorem for calculating the\n\t     * distance between two lat/lng points on a Equirectangular projection\n\t     * to account for curvature of the longitude lines.\n\t     * @see {@link https://en.wikipedia.org/wiki/Pythagorean_theorem|Pythagorean_theorem}\n\t     * @type {String}\n\t     */\n\t    PYTHAGOREAN: 'pythagorean'\n\t  },\n\t  /**\n\t   *  Enumerates the image formats used for getting static Google Map images.\n\t   *  @memberof! geolocator\n\t   *\n\t   *  @readonly\n\t   *  @enum {String}\n\t   */\n\t  ImageFormat: {\n\t    /**\n\t     *  Specifies the PNG image format.\n\t     *  Same as `PNG_8`.\n\t     *  @type {String}\n\t     */\n\t    PNG: 'png',\n\t    /**\n\t     *  Specifies the 8-bit PNG image format.\n\t     *  Same as `PNG`.\n\t     *  @type {String}\n\t     */\n\t    PNG_8: 'png8',\n\t    /**\n\t     *  Specifies the 32-bit PNG image format.\n\t     *  @type {String}\n\t     */\n\t    PNG_32: 'png32',\n\t    /**\n\t     *  Specifies the GIF image format.\n\t     *  @type {String}\n\t     */\n\t    GIF: 'gif',\n\t    /**\n\t     *  Specifies the JPEG compressed image format.\n\t     *  @type {String}\n\t     */\n\t    JPG: 'jpg',\n\t    /**\n\t     *  Specifies a non-progressive JPEG compression image format.\n\t     *  @type {String}\n\t     */\n\t    JPG_BASELINE: 'jpg-baseline'\n\t  }\n\t});\n\t\n\texports.default = enums;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _utils = __webpack_require__(2);\n\t\n\tvar _utils2 = _interopRequireDefault(_utils);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * Geolocator Error class that provides a common type of error object for the\n\t * various APIs implemented in Geolocator. All callbacks of Geolocator will\n\t * include an instance of this object as the first argument; if the\n\t * corresponding operation fails. Also all thrown errors will be an instance of\n\t * this object.\n\t *\n\t * This object can be publicly accessed via `geolocator.Error`.\n\t *\n\t * @extends Error\n\t */\n\tvar GeoError = function () {\n\t    // extends Error (doesn't work with transpilers)\n\t\n\t    /**\n\t     * Costructs a new instance of `GeoError`.\n\t     *\n\t     * @param {String} [code=\"UNKNOWN_ERROR\"]\n\t     *        Any valid Geolocator Error code.\n\t     *        See {@link #GeoError.Code|`GeoError.Code` enumeration} for\n\t     *        possible values.\n\t     * @param {String} [message]\n\t     *        Error message. If omitted, this will be set to `code`.\n\t     *\n\t     * @returns {GeoError}\n\t     *\n\t     * @example\n\t     * var GeoError = geolocator.Error,\n\t     *     error = new GeoError(GeoError.Code.GEOLOCATION_NOT_SUPPORTED);\n\t     * console.log(error.code); // \"GEOLOCATION_NOT_SUPPORTED\"\n\t     * console.log(error instanceof GeoError); // true\n\t     */\n\t    function GeoError() {\n\t        var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : GeoError.Code.UNKNOWN_ERROR;\n\t        var message = arguments[1];\n\t\n\t        _classCallCheck(this, GeoError);\n\t\n\t        message = message || String(code);\n\t\n\t        /**\n\t         *  Gets the name of the Error object.\n\t         *  This always returns `\"GeoError\"`.\n\t         *  @name GeoError#name\n\t         *  @type {String}\n\t         */\n\t        Object.defineProperty(this, 'name', {\n\t            enumerable: false,\n\t            writable: false,\n\t            value: 'GeoError' // this.constructor.name\n\t        });\n\t\n\t        /**\n\t         *  Gets the error code set for this instance.\n\t         *  This will return one of\n\t         *  {@link #GeoError.Code|`GeoError.Code` enumeration}.\n\t         *  @name GeoError#code\n\t         *  @type {String}\n\t         */\n\t        Object.defineProperty(this, 'code', {\n\t            enumerable: false,\n\t            writable: true,\n\t            value: code\n\t        });\n\t\n\t        /**\n\t         *  Gets the error message set for this instance.\n\t         *  If no message is set, this will return the error code value.\n\t         *  @name GeoError#message\n\t         *  @type {String}\n\t         */\n\t        Object.defineProperty(this, 'message', {\n\t            enumerable: false,\n\t            writable: true,\n\t            value: message\n\t        });\n\t\n\t        if (Error.hasOwnProperty('captureStackTrace')) {\n\t            // V8\n\t            Error.captureStackTrace(this, this.constructor);\n\t        } else {\n\t            /**\n\t             *  Gets the error stack for this instance.\n\t             *  @name GeoError#stack\n\t             *  @type {String}\n\t             */\n\t            Object.defineProperty(this, 'stack', {\n\t                enumerable: false,\n\t                writable: false,\n\t                value: new Error(message).stack\n\t            });\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Creates a new instance of `GeoError` from the given value.\n\t     *\n\t     * @param {*} [err]\n\t     *        Value to be transformed. This is used to determine the proper\n\t     *        error code for the created instance. If an `Error` or `Object` is\n\t     *        passed, its `message` property is checked if it matches any of the\n\t     *        valid error codes. If omitted or no match is found, error code\n\t     *        `GeoError.Code.UNKNOWN_ERROR` will be used as default.\n\t     *\n\t     * @returns {GeoError}\n\t     *\n\t     * @example\n\t     * var GeoError = geolocator.Error,\n\t     * \t   error = GeoError.create();\n\t     * console.log(error.code); // \"UNKNOWN_ERROR\"\n\t     * error = GeoError.create(GeoError.Code.GEOLOCATION_NOT_SUPPORTED);\n\t     * console.log(error.code); // \"GEOLOCATION_NOT_SUPPORTED\"\n\t     */\n\t\n\t\n\t    _createClass(GeoError, null, [{\n\t        key: 'create',\n\t        value: function create(err) {\n\t            if (err instanceof GeoError) {\n\t                return err;\n\t            }\n\t\n\t            var code = void 0,\n\t                msg = void 0;\n\t\n\t            if (_utils2.default.isPositionError(err) && err.code) {\n\t                switch (err.code) {\n\t                    case 1:\n\t                        code = GeoError.Code.PERMISSION_DENIED;\n\t                        break;\n\t                    case 2:\n\t                        code = GeoError.Code.POSITION_UNAVAILABLE;\n\t                        break;\n\t                    case 3:\n\t                        code = GeoError.Code.TIMEOUT;\n\t                        break;\n\t                    default:\n\t                        code = GeoError.Code.UNKNOWN_ERROR;\n\t                        break;\n\t                }\n\t                return new GeoError(code, err.message || '');\n\t            }\n\t\n\t            if (typeof err === 'string') {\n\t                code = msg = err;\n\t            } else if ((typeof err === 'undefined' ? 'undefined' : _typeof(err)) === 'object') {\n\t                code = err.code || err.message;\n\t                msg = err.message || err.code;\n\t            }\n\t            if (code && GeoError.isValidErrorCode(code)) {\n\t                return new GeoError(code, msg);\n\t            }\n\t\n\t            return new GeoError(GeoError.Code.UNKNOWN_ERROR, msg);\n\t        }\n\t\n\t        /**\n\t         * Creates a new instance of `GeoError` from the given response object.\n\t         * Since Geolocator implements various Google APIs, we might receive\n\t         * responses if different structures. For example, some APIs return a\n\t         * response object with a `status:String` property (such as the TimeZone\n\t         * API) and some return responses with an `error:Object` property. This\n\t         * method will determine the correct reason or message and return a\n\t         * consistent error object.\n\t         *\n\t         * @param {Object|String} response\n\t         *        Response (Object) or status (String) to be transformed.\n\t         * @param {String} [message=null]\n\t         *        Error message.\n\t         *\n\t         * @returns {GeoError}\n\t         *          `GeoError` instance if response contains an error. Otherwise,\n\t         *          returns `null`.\n\t         *\n\t         * @example\n\t         * var error = geolocator.Error.fromResponse(googleResponse);\n\t         * console.log(error.code); // \"GOOGLE_KEY_INVALID\"\n\t         */\n\t\n\t    }, {\n\t        key: 'fromResponse',\n\t        value: function fromResponse(response) {\n\t            var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\t\n\t            // example Google Geolocation API response:\n\t            // https://developers.google.com/maps/documentation/geolocation/intro#errors\n\t            // {\n\t            //      \"error\": {\n\t            //          \"errors\": [\n\t            //              {\n\t            //                  \"domain\": \"global\",\n\t            //                  \"reason\": \"parseError\",\n\t            //                  \"message\": \"Parse Error\",\n\t            //              }\n\t            //          ],\n\t            //      \"code\": 400,\n\t            //      \"message\": \"Parse Error\"\n\t            //      }\n\t            // }\n\t            // example Google TimeZone API response:\n\t            // {\n\t            //     \"status\": \"REQUEST_DENIED\"\n\t            // }\n\t\n\t            if (!response) return new GeoError(GeoError.Code.INVALID_RESPONSE);\n\t\n\t            var errCode = void 0;\n\t\n\t            if (_utils2.default.isString(response)) {\n\t                errCode = errorCodeFromStatus(response);\n\t                if (errCode) return new GeoError(errCode, message || response);\n\t            }\n\t\n\t            if (!_utils2.default.isObject(response)) return null;\n\t\n\t            var errMsg = response.error_message || response.errorMessage || response.error && response.error.message || '' || '';\n\t\n\t            if (response.status) {\n\t                errCode = errorCodeFromStatus(response.status);\n\t                if (errCode) return new GeoError(errCode, errMsg || message || response.status);\n\t            }\n\t\n\t            if (response.error) {\n\t                var reason = response.reason || response.error.reason;\n\t                if (!reason) {\n\t                    var errors = response.error.errors;\n\t                    if (_utils2.default.isArray(errors) && errors.length > 0) {\n\t                        reason = errors[0].reason; // get the first reason only\n\t                        errMsg = errMsg || errors[0].message; // update errMsg\n\t                    }\n\t                }\n\t                errCode = errorCodeFromReason(reason) || GeoError.Code.UNKNOWN_ERROR;\n\t                return new GeoError(errCode, errMsg || reason || message);\n\t            }\n\t\n\t            if (errMsg) {\n\t                errCode = errorCodeFromStatus(errMsg) || GeoError.Code.UNKNOWN_ERROR;\n\t                return new GeoError(errCode, errMsg || message);\n\t            }\n\t\n\t            return null;\n\t        }\n\t\n\t        /**\n\t         *  Checks whether the given value is an instance of `GeoError`.\n\t         *\n\t         *  @param {*} err - Object to be checked.\n\t         *\n\t         *  @returns {Boolean}\n\t         */\n\t\n\t    }, {\n\t        key: 'isGeoError',\n\t        value: function isGeoError(err) {\n\t            return err instanceof GeoError;\n\t        }\n\t\n\t        /**\n\t         *  Checks whether the given value is a valid Geolocator Error code.\n\t         *\n\t         *  @param {String} errorCode - Error code to be checked.\n\t         *\n\t         *  @returns {Boolean}\n\t         */\n\t\n\t    }, {\n\t        key: 'isValidErrorCode',\n\t        value: function isValidErrorCode(errorCode) {\n\t            var prop = void 0;\n\t            for (prop in GeoError.Code) {\n\t                if (GeoError.Code.hasOwnProperty(prop) && errorCode === GeoError.Code[prop]) {\n\t                    return true;\n\t                }\n\t            }\n\t            return false;\n\t        }\n\t    }]);\n\t\n\t    return GeoError;\n\t}();\n\t\n\t/**\n\t *  Gets the string representation of the error instance.\n\t *\n\t *  @returns {String}\n\t */\n\t\n\t\n\tGeoError.prototype.toString = function () {\n\t    var msg = this.code !== this.message ? ' (' + this.message + ')' : '';\n\t    return this.name + ': ' + this.code + msg;\n\t};\n\t\n\t// `class x extends Error` doesn't work when using an ES6 transpiler, such as\n\t// Babel, since subclasses must extend a class. With Babel 6, we need\n\t// transform-builtin-extend plugin for this to work. So we're extending from\n\t// Error the old way. Now, `err instanceof Error` also returns `true`.\n\tif (typeof Object.setPrototypeOf === 'function') {\n\t    Object.setPrototypeOf(GeoError.prototype, Error.prototype);\n\t} else {\n\t    GeoError.prototype = Object.create(Error.prototype);\n\t}\n\t\n\t// ---------------------------\n\t// ERROR CODES\n\t// ---------------------------\n\t\n\t/**\n\t *  Enumerates Geolocator error codes.\n\t *  This enumeration combines Google API status (error) codes, HTML5 Geolocation\n\t *  position error codes and other Geolocator-specific error codes.\n\t *  @enum {String}\n\t */\n\tGeoError.Code = {\n\t    /**\n\t     *  Indicates that HTML5 Geolocation API is not supported by the browser.\n\t     *  @type {String}\n\t     */\n\t    GEOLOCATION_NOT_SUPPORTED: 'GEOLOCATION_NOT_SUPPORTED',\n\t    /**\n\t     *  Indicates that Geolocation-IP source is not set or invalid.\n\t     *  @type {String}\n\t     */\n\t    INVALID_GEO_IP_SOURCE: 'INVALID_GEO_IP_SOURCE',\n\t    /**\n\t     *  The acquisition of the geolocation information failed because the\n\t     *  page didn't have the permission to do it.\n\t     *  @type {String}\n\t     */\n\t    PERMISSION_DENIED: 'PERMISSION_DENIED',\n\t    /**\n\t     *  The acquisition of the geolocation failed because at least one\n\t     *  internal source of position returned an internal error.\n\t     *  @type {String}\n\t     */\n\t    POSITION_UNAVAILABLE: 'POSITION_UNAVAILABLE',\n\t    /**\n\t     *  The time allowed to acquire the geolocation, defined by\n\t     *  PositionOptions.timeout information was reached before\n\t     *  the information was obtained.\n\t     *  @type {String}\n\t     */\n\t    TIMEOUT: 'TIMEOUT',\n\t    /**\n\t     * Indicates that the request had one or more invalid parameters.\n\t     * @type {String}\n\t     */\n\t    INVALID_PARAMETERS: 'INVALID_PARAMETERS',\n\t    /**\n\t     * Indicates that the service returned invalid response.\n\t     * @type {String}\n\t     */\n\t    INVALID_RESPONSE: 'INVALID_RESPONSE',\n\t    /**\n\t     * Generally indicates that the query (address, components or latlng)\n\t     * is missing.\n\t     * @type {String}\n\t     */\n\t    INVALID_REQUEST: 'INVALID_REQUEST',\n\t    /**\n\t     * Indicates that the request was denied by the service.\n\t     * This will generally occur because of a missing API key or because the request\n\t     * is sent over HTTP instead of HTTPS.\n\t     * @type {String}\n\t     */\n\t    REQUEST_DENIED: 'REQUEST_DENIED',\n\t    /**\n\t     * Indicates that the request has failed.\n\t     * This will generally occur because of an XHR error.\n\t     * @type {String}\n\t     */\n\t    REQUEST_FAILED: 'REQUEST_FAILED',\n\t    /**\n\t     * Indicates that Google API could not be loaded.\n\t     * @type {String}\n\t     */\n\t    GOOGLE_API_FAILED: 'GOOGLE_API_FAILED',\n\t    /**\n\t     * Indicates that you are over your Google API quota.\n\t     * @type {String}\n\t     */\n\t    OVER_QUERY_LIMIT: 'OVER_QUERY_LIMIT',\n\t    /**\n\t     * Indicates that you've exceeded the requests per second per user limit that\n\t     * you configured in the Google Developers Console. This limit should be\n\t     * configured to prevent a single or small group of users from exhausting your\n\t     * daily quota, while still allowing reasonable access to all users.\n\t     * @type {String}\n\t     */\n\t    USER_RATE_LIMIT_EXCEEDED: 'USER_RATE_LIMIT_EXCEEDED',\n\t    /**\n\t     * Indicates that you've exceeded your daily limit for Google API(s).\n\t     * @type {String}\n\t     */\n\t    DAILY_LIMIT_EXCEEDED: 'DAILY_LIMIT_EXCEEDED',\n\t    /**\n\t     * Indicates that your Google API key is not valid. Please ensure that you've\n\t     * included the entire key, and that you've either purchased the API or have\n\t     * enabled billing and activated the API to obtain the free quota.\n\t     * @type {String}\n\t     */\n\t    GOOGLE_KEY_INVALID: 'GOOGLE_KEY_INVALID',\n\t    /**\n\t     * Indicates that maximum number of elements limit is exceeded. For\n\t     * example, for the Distance Matrix API; occurs when the product of\n\t     * origins and destinations exceeds the per-query limit.\n\t     * @type {String}\n\t     */\n\t    MAX_ELEMENTS_EXCEEDED: 'MAX_ELEMENTS_EXCEEDED',\n\t    /**\n\t     * Indicates that the request contained more than 25 origins,\n\t     * or more than 25 destinations.\n\t     * @type {String}\n\t     */\n\t    MAX_DIMENSIONS_EXCEEDED: 'MAX_DIMENSIONS_EXCEEDED',\n\t    /**\n\t     * Indicates that the request contained more than allowed waypoints.\n\t     * @type {String}\n\t     */\n\t    MAX_WAYPOINTS_EXCEEDED: 'MAX_WAYPOINTS_EXCEEDED',\n\t    /**\n\t     * Indicates that the request body is not valid JSON.\n\t     * @type {String}\n\t     */\n\t    PARSE_ERROR: 'PARSE_ERROR',\n\t    /**\n\t     * Indicates that the requested resource could not be found.\n\t     * Note that this also covers `ZERO_RESULTS`.\n\t     * @type {String}\n\t     */\n\t    NOT_FOUND: 'NOT_FOUND',\n\t    /**\n\t     * Indicates that an internal error (such as XHR cross-domain, etc) has occured.\n\t     * @type {String}\n\t     */\n\t    INTERNAL_ERROR: 'INTERNAL_ERROR',\n\t    /**\n\t     * Indicates that an unknown error has occured.\n\t     * @type {String}\n\t     */\n\t    UNKNOWN_ERROR: 'UNKNOWN_ERROR'\n\t};\n\t\n\t// ---------------------------\n\t// HELPER METHODS\n\t// ---------------------------\n\t\n\t/**\n\t *  @private\n\t */\n\tfunction errorCodeFromStatus(status) {\n\t    if (!status) return GeoError.Code.INVALID_RESPONSE;\n\t    if (status === 'OK') return null;\n\t    if (status === 'ZERO_RESULTS') return GeoError.Code.NOT_FOUND;\n\t    if (GeoError.Code.hasOwnProperty(status)) return status;\n\t    return null;\n\t}\n\t\n\t/**\n\t *  Gets `GeoError.Code` from the given response error reason.\n\t *  @private\n\t *\n\t *  @param {String} reason\n\t *         Google response error reason.\n\t *\n\t *  @returns {String}\n\t */\n\tfunction errorCodeFromReason(reason) {\n\t    switch (reason) {\n\t        case 'invalid':\n\t            return GeoError.Code.INVALID_REQUEST;\n\t        case 'dailyLimitExceeded':\n\t            return GeoError.Code.DAILY_LIMIT_EXCEEDED;\n\t        case 'keyInvalid':\n\t            return GeoError.Code.GOOGLE_KEY_INVALID;\n\t        case 'userRateLimitExceeded':\n\t            return GeoError.Code.USER_RATE_LIMIT_EXCEEDED;\n\t        case 'notFound':\n\t            return GeoError.Code.NOT_FOUND;\n\t        case 'parseError':\n\t            return GeoError.Code.PARSE_ERROR;\n\t        default:\n\t            return null;\n\t    }\n\t}\n\t\n\t// ---------------------------\n\t// EXPORT\n\t// ---------------------------\n\t\n\texports.default = GeoError;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _utils = __webpack_require__(2);\n\t\n\tvar _utils2 = _interopRequireDefault(_utils);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar GeoWatcher = function () {\n\t    function GeoWatcher(onChange, onError) {\n\t        var _this = this;\n\t\n\t        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\t\n\t        _classCallCheck(this, GeoWatcher);\n\t\n\t        this.isCleared = false;\n\t        this.cycle = 0;\n\t        this._timer = null;\n\t        this.id = navigator.geolocation.watchPosition(function (pos) {\n\t            _this.cycle++;\n\t            if (_utils2.default.isFunction(onChange)) onChange(pos);\n\t        }, function (err) {\n\t            _this.cycle++;\n\t            if (_utils2.default.isFunction(onError)) onError(err);\n\t            if (options.clearOnError) {\n\t                _this.clear();\n\t            }\n\t        }, options);\n\t    }\n\t\n\t    _createClass(GeoWatcher, [{\n\t        key: '_clear',\n\t        value: function _clear() {\n\t            navigator.geolocation.clearWatch(this.id);\n\t            this.isCleared = true;\n\t            this._timer = null;\n\t        }\n\t    }, {\n\t        key: 'clear',\n\t        value: function clear(delay, callback) {\n\t            var _this2 = this;\n\t\n\t            var d = _utils2.default.isNumber(delay) ? delay : 0,\n\t                cb = _utils2.default.isFunction(callback) ? callback : _utils2.default.isFunction(delay) ? delay : null;\n\t            // clear any previous timeout\n\t            if (this._timer) {\n\t                clearTimeout(this._timer);\n\t                this._timer = null;\n\t            }\n\t            // check if watcher is not cleared\n\t            if (!this.isCleared) {\n\t                if (d === 0) {\n\t                    this._clear();\n\t                    if (cb) cb();\n\t                    return;\n\t                }\n\t                this._timer = setTimeout(function () {\n\t                    _this2._clear();\n\t                    if (cb) cb();\n\t                }, d);\n\t            }\n\t        }\n\t    }]);\n\t\n\t    return GeoWatcher;\n\t}();\n\t\n\t// ---------------------------\n\t// EXPORT\n\t// ---------------------------\n\t\n\texports.default = GeoWatcher;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** geolocator.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 01ee82e326c666f6ff93\n **/","import geolocator from './core/geolocator';\n// export default geolocator;\n// http://stackoverflow.com/a/33683495/112731\nmodule.exports = geolocator;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","import utils from '../lib/utils';\nimport fetch from '../lib/fetch';\nimport geoHelper from './geo.helper';\nimport GeoError from './geo.error';\nimport GeoWatcher from './geo.watcher';\nimport enums from './enums';\n\n/**\n *  Radius of earth in kilometers.\n *  @private\n *  @type {Number}\n */\nconst EARTH_RADIUS_KM = 6371;\n\n/**\n *  Radius of earth in miles.\n *  @private\n *  @type {Number}\n */\nconst EARTH_RADIUS_MI = 3959;\n\n/**\n *  Storage for Geolocator default configuration.\n *\n *  @readonly\n *  @private\n */\nconst defaultConfig = {\n    language: 'en',\n    https: true,\n    google: {\n        version: '3', // latest 3.x\n        key: '',\n        styles: null\n    }\n};\n\n/**\n *  Geolocator library that provides methods for getting geo-location information,\n *  geocoding, address look-ups, distance & durations, timezone information and more...\n *  This library makes use of HTML5 position feautures, implements Google APIs\n *  and other services.\n *\n *  <b>Important Notes:</b>\n *\n *  Although some calls might work without a key, it is generally required by\n *  most {@link https://developers.google.com/maps/faq#using-google-maps-apis|Goolge APIs}\n *  (such as Time Zone API). To get a free (or premium) key,\n *  {@link https://developers.google.com/maps/documentation/javascript/|click here}.\n *  After getting a key, you can enable multiple APIs for it. Make sure you\n *  {@link https://console.developers.google.com|enable}\n *  all the APIs supported by Geolocator.\n *\n *  Note that browser API keys cannot have referer restrictions when used\n *  with some Google APIs.\n *\n *  Make sure your doctype is HTML5 and you're calling Geolocation APIs from an\n *  HTTPS page. Geolocation API is removed from unsecured origins in Chrome 50.\n *  Other browsers are expected to follow.\n *\n *  @license MIT\n *  @copyright 2016, Onur Yıldırım (onur@cutepilot.com)\n */\nclass geolocator {\n\n    // ---------------------------\n    // PROPERTIES\n    // ---------------------------\n\n    /**\n     *  Geolocator Error class that provides a common type of error object for\n     *  the various APIs implemented in Geolocator. All callbacks of Geolocator\n     *  will include an instance of this object as the first argument; if the\n     *  corresponding operation fails. Also all thrown errors will be an instance\n     *  of this object.\n     *\n     *  This object also enumerates\n     *  {@link ?api=geolocator-error#GeoError.Code|Geolocator Error codes}.\n     *\n     *  @see {@link ?api=geolocator-error|`GeoError` documentation}\n     *  @type {GeoError}\n     *  @readonly\n     */\n    static get Error() {\n        return GeoError;\n    }\n\n    /**\n     *  Documented separately in enums.js\n     *  @private\n     */\n    static get MapTypeId() {\n        return enums.MapTypeId;\n    }\n\n    /**\n     *  Documented separately in enums.js\n     *  @private\n     */\n    static get LocationType() {\n        return enums.LocationType;\n    }\n\n    /**\n     *  Documented separately in enums.js\n     *  @private\n     */\n    static get TravelMode() {\n        return enums.TravelMode;\n    }\n\n    /**\n     *  Documented separately in enums.js\n     *  @private\n     */\n    static get UnitSystem() {\n        return enums.UnitSystem;\n    }\n\n    /**\n     *  Documented separately in enums.js\n     *  @private\n     */\n    static get RadioType() {\n        return enums.RadioType;\n    }\n\n    /**\n     *  Documented separately in enums.js\n     *  @private\n     */\n    static get DistanceFormula() {\n        return enums.DistanceFormula;\n    }\n\n    /**\n     *  Documented separately in enums.js\n     *  @private\n     */\n    static get ImageFormat() {\n        return enums.ImageFormat;\n    }\n\n    // ---------------------------\n    // STATIC METHODS\n    // ---------------------------\n\n    /**\n     *  Sets or gets the geolocator configuration object.\n     *  Make sure you configure Geolocator before calling other methods that\n     *  require a Google API key.\n     *\n     *  @param {Object} [options]\n     *         Configuration object. If omitted, this method returns the current\n     *         configuration.\n     *      @param {String} [options.language=\"en\"]\n     *             Language to be used for API requests that supports language\n     *             configurations. This is generally used for Google APIs.\n     *             See {@link https://developers.google.com/maps/faq#languagesupport|supported languages}.\n     *      @param {Boolean} [options.https=true]\n     *             As Google recommends; using HTTPS encryption makes your site\n     *             more secure, and more resistant to snooping or tampering.\n     *             If set to `true`, the API calls are made over HTTPS, at all\n     *             times. Setting to `false` will switch to HTTP (even if the\n     *             page is on HTTPS). And if set to `null`, current protocol will\n     *             be used. Note that some APIs might not work with HTTP such as\n     *             Google Maps TimeZone API.\n     *      @param {Object} [options.google]\n     *             Google specific options.\n     *          @param {String} [options.google.version=\"3\"]\n     *                 Google Maps API version to be used (with\n     *                 `geolocator.createMap()`) method. The default version\n     *                 value is tested and works with Geolocator. You can set a\n     *                 greater value or the latest version number and it should\n     *                 work; but it's not guaranteed. Find out the\n     *                 {@link https://developers.google.com/maps/documentation/javascript/versions|latest version here}.\n     *          @param {String} [options.google.key=\"\"]\n     *                 API key to be used with Google API calls. Although some\n     *                 calls might work without a key, it is generally required\n     *                 by most Goolge APIs. To get a free (or premium) key,\n     *                 {@link https://developers.google.com/maps/documentation/javascript/|click here}.\n     *          @param {Array} [options.google.styles]\n     *                 An array of objects to customize the presentation of the\n     *                 Google base maps, changing the visual display of such\n     *                 elements as roads, parks, and built-up areas.\n     *                 See {@link https://developers.google.com/maps/documentation/javascript/styling|Styling Maps}.\n     *\n     *  @returns {Object} - Returns the current or updated configuration object.\n     *\n     *  @example\n     *  geolocator.config({\n     *      language: \"en\",\n     *      google: {\n     *          version: \"3\",\n     *          key: \"YOUR-GOOGLE-API-KEY\"\n     *      }\n     *  });\n     */\n    static config(options) {\n        if (options) {\n            geolocator._.config = utils.extend(defaultConfig, options);\n        }\n        return geolocator._.config;\n    }\n\n    /**\n     *  Gets a static map image URL which can be embeded via an `<img />` tag\n     *  on the page.\n     *\n     *  Note that, if `options.center` is set to an address (instead of\n     *  coordinates) and `options.marker` is also set; we will need to geocode\n     *  that address to get center coordinates for the marker.\n     *  In this case, you must use the `callback` parameter to get the async\n     *  result. Otherwise, this method will directly return a `String`.\n     *\n     *  Make sure you have enabled Static Maps API (and Geocoding API if\n     *  `marker` is enabled) in your Google Developers console.\n     *\n     *  For interactive map, see {@link #geolocator.createMap|`geolocator.createMap()` method}.\n     *\n     *  @see {@link https://developers.google.com/maps/documentation/static-maps/intro|Static Maps}\n     *  @see {@link https://developers.google.com/maps/documentation/static-maps/usage-limits|Usage Limits}\n     *\n     *  @param {Object} options\n     *         Static map options.\n     *         @param {String|Object} options.center\n     *                Defines the center of the map and the location.\n     *                Either an address `String` or an coordinates `Object` with\n     *                `latitude:Number` and `longitude:Number` properties.\n     *         @param {String} [options.mapTypeId=\"roadmap\"]\n     *                Type of the map to be created.\n     *                See {@link #geolocator.MapTypeId|`geolocator.MapTypeId` enumeration}\n     *                for possible values.\n     *         @param {String|Object} [options.size=\"600x300\"]\n     *                Defines the size (in pixels) of the returned image.\n     *                Either a string in `widthxheight` format or an Object\n     *                with `width:Number` and `height:Number` properties.\n     *         @param {Number} [options.scale=1]\n     *                Affects the number of pixels that are returned. scale=2\n     *                returns twice as many pixels as scale=1 while retaining\n     *                the same coverage area and level of detail (i.e. the\n     *                contents of the map don't change). Accepted values are 1,\n     *                2 and 4 (4 is only available to Google Maps APIs Premium\n     *                Plan customers.)\n     *         @param {Number} [options.zoom=9]\n     *                Zoom level to be set for the map.\n     *         @param {String} [options.format=png]\n     *                Defines the format of the resulting image.\n     *                See {@link #geolocator.ImageFormat|`geolocator.ImageFormat` enumeration}\n     *                for possible values.\n     *         @param {Boolean|String} [options.marker=true]\n     *                Specifies whether to add a marker to the center of the map.\n     *                You can define the color of the marker by passing a color\n     *                `String` instead of a `Boolean`. Color can be a predefined\n     *                color from the set `red` (default), `black`, `brown`,\n     *                `green`, `purple`, `yellow`, `blue`, `gray`, `orange` and\n     *                `white`; or a HEX 24-bit color (e.g. `\"0xFF0000\"`).\n     *                Note that marker will not be visible if `center` is set to\n     *                a `String` address and you don't use the callback.\n     *         @param {String} [options.region]\n     *                Defines the appropriate borders to display, based on\n     *                geo-political sensitivities. Accepts a region code\n     *                specified as a two-character ccTLD (top-level domain)\n     *                value. e.g. `\"us\"`.\n     *         @param {Array} [options.styles]\n     *                An array of objects to customize the presentation of the\n     *                Google base maps, changing the visual display of such\n     *                elements as roads, parks, and built-up areas.\n     *                This will default to the global styles set via\n     *                {@link #geolocator.config|`geolocator.config()` method}, if any.\n     *                See {@link https://developers.google.com/maps/documentation/javascript/styling|Styling Maps}.\n     *\n     *  @param {Function} [callback]\n     *         Callback function to be executed when the static map URL is built.\n     *         This takes 2 arguments: `function (err, url) { ... }`.\n     *         If omitted, this method will directly return the static map\n     *         image URL; but (if enabled) the marker will not be visible if\n     *         `options.center` is set to an address `String` instead of a\n     *         coordinates `Object`.\n     *\n     *  @returns {String|void}\n     *           If a callback is passed, this will return `void`.\n     *           Otherwise, a `String` that represents the URL of the static map.\n     *\n     *  @example\n     *  // Async example (with address and marker)\n     *  var options = {\n     *      center: \"Los Angles, CA, US\",\n     *      mapTypeId: geolocator.MapTypeId.ROADMAP,\n     *      size: \"600x300\",\n     *      scale: 1,\n     *      zoom: 5,\n     *      marker: \"0xFFCC00\",\n     *      format: geolocator.ImageFormat.PNG\n     *  };\n     *  geolocator.getStaticMap(options, function (err, url) {\n     *      if (!err) {\n     *          document.getElementById('my-img').src = url;\n     *      }\n     *  });\n     *\n     *  @example\n     *  // Sync example (with coordinates)\n     *  var options = {\n     *      center: {\n     *          longitude: 34.0522342,\n     *          latitude: -118.2436849\n     *      },\n     *      mapTypeId: geolocator.MapTypeId.ROADMAP,\n     *      size: \"600x300\",\n     *      scale: 1,\n     *      zoom: 5,\n     *      marker: \"0xFFCC00\",\n     *      format: geolocator.ImageFormat.PNG\n     *  };\n     *  document.getElementById('my-img').src = geolocator.getStaticMap(options);\n     */\n    static getStaticMap(options, callback) {\n        if (!utils.isPlainObject(options) || !options.center) {\n            throw new GeoError(GeoError.Code.INVALID_PARAMETERS,\n                'A center address or coordinates are required.');\n        }\n\n        if (utils.isString(options.center)) {\n            return geolocator.geocode(options.center, (err, location) => {\n                if (err) callback(err);\n                options.center = location.coords;\n                callback(null, geolocator.getStaticMap(options));\n            });\n        }\n\n        let conf = geolocator._.config;\n        let opts = utils.extend({\n            mapTypeId: enums.MapTypeId.ROADMAP,\n            size: {\n                width: 600,\n                height: 300\n            },\n            scale: 1, // 1 | 2 | (4 for business customers of google maps)\n            zoom: 9,\n            marker: 'red',\n            format: enums.ImageFormat.PNG,\n            language: conf.language || 'en',\n            region: null\n        }, options);\n\n        let center = utils.isPlainObject(opts.center)\n            ? `${opts.center.latitude},${opts.center.longitude}`\n            : String(opts.center);\n\n        let size = utils.isPlainObject(opts.size)\n            ? `${opts.size.width}x${opts.size.height}`\n            : String(opts.size);\n\n        let url = enums.URL.GOOGLE_SATATIC_MAP // not using utils.setProtocol() here\n            + `?center=${center}&maptype=${opts.mapTypeId}`\n            + `&size=${size}&scale=${opts.scale}&zoom=${opts.zoom}`\n            + `&format=${opts.format}&language=${opts.language}`;\n\n        if (opts.marker) {\n            let color = utils.isString(opts.marker) ? opts.marker : 'red';\n            url += '&markers=' + encodeURIComponent(`color:${color}|${center}`);\n        }\n        if (opts.region) url += '&region=' + opts.region;\n        if (conf.google.key) url += '&key=' + conf.google.key;\n\n        let styles = !utils.isFilledArray(opts.styles)\n            ? (utils.isFilledArray(conf.google.styles) ? conf.google.styles : null)\n            : opts.styles;\n        if (styles) url += '&' + geoHelper.mapStylesToParams(styles);\n\n        if (utils.isFunction(callback)) return callback(null, url);\n        return url;\n    }\n\n    /**\n     *  Creates an interactive Google Map within the given element.\n     *  Make sure you have enabled Google Static Maps API in your Google Developers console.\n     *  For static map, see {@link #geolocator.getStaticMap|`geolocator.getStaticMap()` method}.\n     *  @see {@link https://developers.google.com/maps/documentation/javascript/reference|Google Maps JavaScript API}\n     *  @see {@link https://developers.google.com/maps/documentation/javascript/usage|Usage Limits}\n     *\n     *  @param {Object|String|HTMLElement|Map} options\n     *         Either map options object with the following properties or; the ID\n     *         of a DOM element, or element itself which the map will be\n     *         created within; or a previously created `google.maps.Map` instance.\n     *         If a map instance is set, this only will apply the options without\n     *         re-creating it.\n     *      @param {String|HTMLElement|Map} options.element\n     *             Either the ID of a DOM element or the element itself;\n     *             which the map will be created within; or a previously created\n     *             `google.maps.Map` instance. If a map instance is set, this\n     *             only will apply the options without re-creating it.\n     *      @param {Object} options.center\n     *             Center coordinates for the map to be created.\n     *          @param {Number} options.center.latitude\n     *                 Latitude of the center point coordinates.\n     *          @param {Number} options.center.longitude\n     *                 Longitude of the center point coordinates.\n     *      @param {String} [options.mapTypeId=\"roadmap\"]\n     *             Type of the map to be created.\n     *             See {@link #geolocator.MapTypeId|`geolocator.MapTypeId` enumeration}\n     *             for possible values.\n     *      @param {String} [options.title]\n     *             Title text to be displayed within an `InfoWindow`, when the\n     *             marker is clicked. This only take effect if `marker` is\n     *             enabled.\n     *      @param {Boolean} [options.marker=true]\n     *             Whether to place a marker at the given coordinates.\n     *             If `title` is set, an `InfoWindow` will be opened when the\n     *             marker is clicked.\n     *      @param {Number} [options.zoom=9]\n     *             Zoom level to be set for the map.\n     *      @param {Array} [options.styles]\n     *             An array of objects to customize the presentation of the\n     *             Google base maps, changing the visual display of such\n     *             elements as roads, parks, and built-up areas.\n     *             This will default to the global styles set via\n     *             {@link #geolocator.config|`geolocator.config` method}`, if any.\n     *             See {@link https://developers.google.com/maps/documentation/javascript/styling|Styling Maps}.\n     *\n     *  @param {Function} callback\n     *         Callback function to be executed when the map is created.\n     *         This takes 2 arguments: `function (err, map) { ... }`.\n     *         See {@link #geolocator~MapData|`geolocator~MapData` type} for details.\n     *\n     *  @returns {void}\n     *\n     *  @example\n     *  var options = {\n     *      element: \"my-map\",\n     *      center: {\n     *          latitude: 48.8534100,\n     *          longitude: 2.3488000\n     *  \t},\n     *  \tmarker: true,\n     *  \ttitle: \"Paris, France\",\n     *  \tzoom: 12\n     *  };\n     *  geolocator.createMap(options, function (err, map) {\n     *      if (map && map.infoWindow) {\n     *          map.infoWindow.open(map.instance, map.marker);\n     *      }\n     *  });\n     */\n    static createMap(options, callback) {\n        // if options is not a plain object, consider element ID, `HTMLElement`,\n        // `jQuery` instance or `google.maps.Map` instance.\n        if (!utils.isPlainObject(options)) {\n            options = { element: options };\n        }\n\n        options = utils.extend({\n            element: null,\n            mapTypeId: enums.MapTypeId.ROADMAP,\n            title: undefined,\n            marker: true,\n            zoom: 9\n        }, options);\n\n        let e = options.element,\n            elem;\n        if (utils.isString(e)) {\n            elem = document.getElementById(e);\n        } else if (utils.isJQueryObject(e)) {\n            elem = e[0];\n        } else if (geolocator.isGoogleLoaded() && e instanceof google.maps.Map) {\n            elem = e.getDiv();\n        }\n\n        if (!utils.isElement(elem) && !utils.isNode(elem)) {\n            throw new GeoError(GeoError.Code.INVALID_PARAMETERS,\n                'A valid DOM element or element ID is required to create a map.');\n        }\n\n        if (!utils.isPlainObject(options.center)\n                || !utils.isNumber(options.center.latitude)\n                || !utils.isNumber(options.center.longitude)) {\n            throw new GeoError(GeoError.Code.INVALID_PARAMETERS,\n                'Center coordinates are required to create a map.');\n        }\n\n        options.element = elem;\n\n        let conf = geolocator._.config,\n            key = conf.google.key;\n\n        options.styles = !utils.isFilledArray(options.styles)\n            ? (utils.isFilledArray(conf.google.styles) ? conf.google.styles : null)\n            : options.styles;\n\n        geolocator.ensureGoogleLoaded(key, err => {\n            if (err) {\n                throw new GeoError(GeoError.Code.GOOGLE_API_FAILED, String(err.message || err));\n            }\n\n            let mapData = configCreateMap(options);\n            callback(null, mapData);\n        });\n    }\n\n    /**\n     *  Locates the user's location via HTML5 geolocation. This may\n     *  require/prompt for user's permission. If the permission is granted we'll\n     *  get the most accurate location information. Otherwise, we'll fallback to\n     *  locating via user's IP (if enabled).\n     *\n     *  For better accuracy, Geolocator implements a different approach than the\n     *  `getCurrentPosition` API; which generally triggers before the device's\n     *  GPS hardware can provide anything accurate. Thanks to\n     *  {@link https://github.com/gwilson/getAccurateCurrentPosition#background|Greg Wilson}\n     *  for the idea.\n     *\n     *  Also note that HTML5 Geolocation feature no more allows insecure origins.\n     *  See {@link https://goo.gl/rStTGz|this} for more details.\n     *  This means if you don't call this method from an HTTPS page, it will\n     *  fail. And if `options.fallbackToIP` is enabled, this will locate by IP.\n     *\n     *  @param {Object} [options]\n     *         HTML5 geo-location settings with some additional options.\n     *      @param {Boolean} [options.enableHighAccuracy=true]\n     *             Specifies whether the device should provide the most accurate\n     *             position it can. Note that setting this to `true` might\n     *             consume more CPU and/or battery power; and result in slower\n     *             response times.\n     *      @param {Number} [options.desiredAccuracy=30]\n     *             Minimum accuracy desired, in meters. Position will not be\n     *             returned until this is met, before the timeout. This only\n     *             takes effect if `enableHighAccuracy` is set to `true`.\n     *      @param {Number} [options.timeout=5000]\n     *             HTML5 position timeout setting in milliseconds. Setting this\n     *             to `Infinity` means that Geolocator won't return until the\n     *             position is available.\n     *      @param {Number} [options.maximumWait=10000]\n     *             Maximum time to wait (in milliseconds) for the desired\n     *             accuracy (which should be greater than `timeout`).\n     *             This only takes effect if `enableHighAccuracy` is set to\n     *             `true`.\n     *      @param {Number} [options.maximumAge=0]\n     *             HTML5 position maximum age. Indicates the maximum age in\n     *             milliseconds of a possible cached position that is acceptable\n     *             to return. `0` means, the device cannot use a cached position\n     *             and must attempt to retrieve the real current position. If set\n     *             to `Infinity` the device must return a cached position\n     *             regardless of its age. Note that if `enableHighAccuracy` is\n     *             set to `true`, `maximumAge` will be forced to `0`.\n     *      @param {Function} [options.onProgress]\n     *             If `enableHighAccuracy` is set to `true`, you can use this\n     *             callback to check the progress of the location accuracy;\n     *             while waiting for the final, best accurate location.\n     *      @param {Boolean} [options.fallbackToIP=false]\n     *             Specifies whether to fallback to IP geolocation if the HTML5\n     *             geolocation fails (e.g. user rejection).\n     *      @param {Boolean} [options.addressLookup=false]\n     *             Specifies whether to run a reverse-geocode operation for the\n     *             fetched coordinates to retrieve detailed address information.\n     *             Note that this means an additional request which requires a\n     *             Google API key to be set in the Geolocator configuration.\n     *             See {@link #geolocator.config|`geolocator.config()`}.\n     *      @param {Boolean} [options.timezone=false]\n     *             Specifies whether to also fetch the time zone information for\n     *             the receieved coordinates. Note that this means an additional\n     *             request which requires a Google API key to be set in the\n     *             Geolocator configuration.\n     *             See {@link #geolocator.config|`geolocator.config()`}.\n     *      @param {String|Object} [options.map]\n     *             In order to create an interactive map from the fetched\n     *             location coordinates; either set this to map options object\n     *             or; the ID of a DOM element or DOM element itself which the\n     *             map will be created within.\n     *      @param {Boolean|Object} [options.staticMap=false]\n     *             Set to `true` to get a static Google Map image URL (with\n     *             default options); or pass a static map options object.\n     *\n     *  @param {Function} callback\n     *         Callback function to be executed when the request completes.\n     *         This takes 2 arguments: `function (err, location) { ... }`.\n     *         See {@link #geolocator~Location|`geolocator~Location` type} for details.\n     *\n     *  @returns {void}\n     *\n     *  @example\n     *  var options = {\n     *      enableHighAccuracy: true,\n     *      desiredAccuracy: 30,\n     *      timeout: 5000,\n     *      maximumWait: 10000,\n     *      maximumAge: 0,\n     *      fallbackToIP: true,\n     *      addressLookup: true,\n     *      timezone: true,\n     *      map: \"my-map\",\n     *      staticMap: true\n     *  };\n     *  geolocator.locate(options, function (err, location) {\n     *      console.log(err || location);\n     *  });\n     *\n     * @example\n     *  // location result:\n     *  {\n     *      coords: {\n     *          latitude: 37.4224764,\n     *          longitude: -122.0842499,\n     *          accuracy: 30,\n     *          altitude: null,\n     *          altitudeAccuracy: null,\n     *          heading: null,\n     *          speed: null\n     *      },\n     *      address: {\n     *          commonName: \"\",\n     *          street: \"Amphitheatre Pkwy\",\n     *          route: \"Amphitheatre Pkwy\",\n     *          streetNumber: \"1600\",\n     *          neighborhood: \"\",\n     *          town: \"\",\n     *          city: \"Mountain View\",\n     *          region: \"Santa Clara County\",\n     *          state: \"California\",\n     *          stateCode: \"CA\",\n     *          postalCode: \"94043\",\n     *          country: \"United States\",\n     *          countryCode: \"US\"\n     *      },\n     *      formattedAddress: \"1600 Amphitheatre Parkway, Mountain View, CA 94043, USA\",\n     *      type: \"ROOFTOP\",\n     *      placeId: \"ChIJ2eUgeAK6j4ARbn5u_wAGqWA\",\n     *      timezone: {\n     *          id: \"America/Los_Angeles\",\n     *          name: \"Pacific Standard Time\",\n     *          abbr: \"PST\",\n     *          dstOffset: 0,\n     *          rawOffset: -28800\n     *      },\n     *      flag: \"//cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.3.1/flags/4x3/us.svg\",\n     *      map: {\n     *          element: HTMLElement,\n     *          instance: Object, // google.maps.Map\n     *          marker: Object, // google.maps.Marker\n     *          infoWindow: Object, // google.maps.InfoWindow\n     *          options: Object // map options\n     *      },\n     *      staticMap: \"//maps.googleapis.com/maps/api/staticmap?center=37.4224764,-122.0842499&maptype=roadmap&size=600x300&scale=1&zoom=9&format=png&language=en&markers=color%3Ared%7C37.4224764%2C2-122.0842499&key=YOUR-GOOGLE-API-KEY\",\n     *      timestamp: 1456795956380\n     *  }\n     */\n    static locate(options, callback) {\n        options = utils.extend({\n            enableHighAccuracy: true,\n            timeout: 5000,\n            maximumWait: 10000,\n            maximumAge: 0,\n            desiredAccuracy: 30,\n            onProgress: utils.noop,\n            fallbackToIP: false,\n            addressLookup: false,\n            timezone: false,\n            map: undefined,\n            staticMap: false\n        }, options);\n\n        // force disable cache if high-accuracy is enabled\n        if (options.enableHighAccuracy) options.maximumAge = 0;\n        // set a min value for timeout\n        if (options.timeout < 1000) options.timeout = 1000;\n        // max wait should not be less than timeout\n        if (options.maximumWait < options.timeout) options.maximumWait = options.timeout;\n\n        // check options and Google key\n        checkGoogleKey(options);\n\n        let cb = callbackMap(options, callback);\n\n        function fallbackToIP(error) {\n            if (options.fallbackToIP) {\n                return geolocator.locateByIP(options, (err, location) => {\n                    if (err) return cb(err, null);\n                    return cb(null, location);\n                });\n            }\n            cb(error, null);\n        }\n        function onPositionReceived(location) {\n            fetchAddressAndTimezone(location, options, cb);\n        }\n        function onPositionError(err) {\n            err = GeoError.create(err);\n            fallbackToIP(err);\n        }\n\n        if (geolocator.isGeolocationSupported()) {\n            if (options.enableHighAccuracy) {\n                locateAccurate(options, onPositionReceived, onPositionError);\n            } else {\n                navigator.geolocation.getCurrentPosition(onPositionReceived, onPositionError, options);\n            }\n        } else {\n            let err = new GeoError(GeoError.Code.GEOLOCATION_NOT_SUPPORTED);\n            fallbackToIP(err);\n        }\n    }\n\n    /**\n     *  Returns a location and accuracy radius based on information about cell\n     *  towers and WiFi nodes that the mobile client can detect; via the Google\n     *  Maps Geolocation API.\n     *  @see {@link https://developers.google.com/maps/documentation/geolocation/intro|Google Maps Geolocation API}\n     *  @see {@link https://developers.google.com/maps/documentation/geolocation/usage-limits|Usage Limits}\n     *\n     *  @param {Object} [options]\n     *         Geolocation options.\n     *      @param {Number} [options.homeMobileCountryCode]\n     *             The mobile country code (MCC) for the device's home network.\n     *      @param {Number} [options.homeMobileNetworkCode]\n     *             The mobile network code (MNC) for the device's home network.\n     *      @param {String} [options.radioType]\n     *             The mobile radio type.\n     *             See {@link #geolocator.RadioType|`geolocator.RadioType` enumeration}\n     *             for possible values. While this field is optional, it should\n     *             be included if a value is available, for more accurate results.\n     *      @param {string} [options.carrier]\n     *             The carrier name. e.g. \"Vodafone\"\n     *      @param {Boolean} [options.fallbackToIP=false]\n     *             Specifies whether to fallback to IP geolocation if wifi and\n     *             cell tower signals are not available. Note that the IP address\n     *             in the request header may not be the IP of the device. Set\n     *             `fallbackToIP` to `false` to disable fall back.\n     *      @param {Array} [options.cellTowers]\n     *             An array of cell tower objects.\n     *             See {@link https://developers.google.com/maps/documentation/geolocation/intro#cell_tower_object|Cell tower objects} for details.\n     *      @param {Array} [options.wifiAccessPoints]\n     *             An array of WiFi access point objects.\n     *             See {@link https://developers.google.com/maps/documentation/geolocation/intro#wifi_access_point_object|WiFi access point objects} for details.\n     *      @param {Boolean} [options.addressLookup=false]\n     *             Specifies whether to run a reverse-geocode operation for the\n     *             fetched coordinates to retrieve detailed address information.\n     *             Note that this means an additional request which requires a\n     *             Google API key to be set in the Geolocator configuration.\n     *             See {@link #geolocator.config|`geolocator.config()`}.\n     *      @param {Boolean} [options.timezone=false]\n     *             Specifies whether to also fetch the time zone information for\n     *             the receieved coordinates. Note that this means an additional\n     *             request which requires a Google API key to be set in the\n     *             Geolocator configuration.\n     *             See {@link #geolocator.config|`geolocator.config()`}.\n     *      @param {String|Object} [options.map]\n     *             In order to create an interactive map from the fetched\n     *             location coordinates; either set this to map options object\n     *             or; the ID of a DOM element or DOM element itself which the\n     *             map will be created within.\n     *      @param {Boolean|Object} [options.staticMap=false]\n     *             Set to `true` to get a static Google Map image URL (with\n     *             default options); or pass a static map options object.\n     *      @param {Boolean} [options.raw=false]\n     *      \t      Whether to return the raw Google API result.\n     *  @param {Function} callback\n     *         Callback function to be executed when the request completes.\n     *         This takes 2 arguments: `function (err, location) { ... }`.\n     *         See {@link #geolocator~Location|`geolocator~Location` type} for details.\n     *\n     *  @returns {void}\n     *\n     *  @example\n     *  var options = {\n     *      homeMobileCountryCode: 310,\n     *      homeMobileNetworkCode: 410,\n     *      carrier: 'Vodafone',\n     *      radioType: geolocator.RadioType.GSM,\n     *      fallbackToIP: true,\n     *      addressLookup: false,\n     *      timezone: false,\n     *      map: \"my-map\",\n     *      staticMap: false\n     *  };\n     *  geolocator.locateByMobile(options, function (err, location) {\n     *      console.log(err || location);\n     *  });\n     */\n    static locateByMobile(options, callback) {\n        if (!utils.isPlainObject(options)) {\n            throw new GeoError(GeoError.Code.INVALID_PARAMETERS);\n        }\n\n        let cb = callbackMap(options, callback);\n\n        options = utils.extend({\n            homeMobileCountryCode: undefined,\n            homeMobileNetworkCode: undefined,\n            radioType: undefined,\n            carrier: undefined,\n            fallbackToIP: false,\n            cellTowers: undefined,\n            wifiAccessPoints: undefined,\n            addressLookup: false,\n            timezone: false,\n            map: undefined,\n            raw: false\n        }, options);\n\n        options.considerIp = options.fallbackToIP;\n        // check Google key\n        checkGoogleKey();\n\n        let conf = geolocator._.config,\n            key = conf.google.key || '',\n            url = utils.setProtocol(enums.URL.GOOGLE_GEOLOCATION, conf.https),\n            xhrOpts = {\n                url: `${url}?key=${key}`,\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                data: JSON.stringify(options)\n            };\n        // console.log(xhrOpts.data);\n\n        fetch.post(xhrOpts, (err, xhr) => {\n            let response = getXHRResponse(err, xhr);\n            if (GeoError.isGeoError(response)) return cb(response, null);\n\n            response = options.raw ? response : {\n                coords: {\n                    latitude: response.location.lat,\n                    longitude: response.location.lng,\n                    accuracy: response.accuracy\n                },\n                timestamp: utils.time()\n            };\n\n            fetchAddressAndTimezone(response, options, cb);\n\n            // e.g. raw response\n            // {\n            //     \"location\": {\n            //         \"lat\": 51.0,\n            //         \"lng\": -0.1\n            //     },\n            //     \"accuracy\": 1200.4\n            // }\n        });\n    }\n\n    /**\n     *  Locates the user's location by the client's IP.\n     *\n     *  This method uses FreeGeoIP's lookup service, by default.\n     *  In order to change the source provider, you can use\n     *  {@link #geolocator.setGeoIPSource|`geolocator.setGeoIPSource()` method}.\n     *\n     *  @param {Object} [options]\n     *         Locate options.\n     *      @param {Boolean} [options.addressLookup=false]\n     *             Specifies whether to run a reverse-geocode operation for the\n     *             fetched coordinates to retrieve detailed address information.\n     *             Since no precise address can be fetched from an IP addres; you\n     *             should only enable this if the Geo-IP Source returns no useful\n     *             address information other than coordinates. Also, note that\n     *             this means an additional request which requires a Google API\n     *             key to be set in the Geolocator configuration.\n     *             See {@link #geolocator.config|`geolocator.config()`}.\n     *      @param {Boolean} [options.timezone=false]\n     *             Specifies whether to also fetch the time zone information for\n     *             the receieved coordinates. Note that this means an additional\n     *             request which requires a Google API key to be set in the\n     *             Geolocator configuration.\n     *             See {@link #geolocator.config|`geolocator.config()`}.\n     *      @param {String|Object} [options.map]\n     *             In order to create an interactive map from the fetched\n     *             location coordinates; either set this to map options object\n     *             or; the ID of a DOM element or DOM element itself which the\n     *             map will be created within.\n     *      @param {Boolean|Object} [options.staticMap=false]\n     *             Set to `true` to get a static Google Map image URL (with\n     *             default options); or pass a static map options object.\n     *  @param {Function} callback\n     *         Callback function to be executed when the request completes.\n     *         This takes 2 arguments: `function (err, location) { ... }`.\n     *         See {@link #geolocator~Location|`geolocator~Location` type} for details.\n     *\n     *  @returns {void}\n     *\n     *  @example\n     *  var options = {\n     *  \taddressLookup: true,\n     *  \ttimezone: true,\n     *  \tmap: \"my-map\",\n     *  \tstaticMap: true\n     *  };\n     *  geolocator.locateByIP(options, function (err, location) {\n     *  \tconsole.log(err || location);\n     *  });\n     *\n     *  @example\n     *  // location result:\n     *  {\n     *      coords: {\n     *          latitude: 41.0214,\n     *          longitude: 28.9948,\n     *      },\n     *      address: {\n     *          city: \"Istanbul\",\n     *          region: \"34\",\n     *          state: \"34\",\n     *          country: \"Turkey\",\n     *          countryCode: \"TR\"\n     *      },\n     *      formattedAddress: \"Demirtaş, Tesviyeci Sk. No:7, 34134 Fatih/İstanbul, Turkey\",\n     *      type: \"ROOFTOP\",\n     *      placeId: \"ChIJ-ZRLfO25yhQRBi5YJxX80Q0\",\n     *      timezone: {\n     *          id: \"Europe/Istanbul\",\n     *          name: \"Eastern European Summer Time\",\n     *          abbr: \"EEST\",\n     *          dstOffset: 3600,\n     *          rawOffset: 7200\n     *      },\n     *      flag: \"//cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.3.1/flags/4x3/tr.svg\",\n     *      map: {\n     *          element: HTMLElement,\n     *          instance: Object, // google.maps.Map\n     *          marker: Object, // google.maps.Marker\n     *          infoWindow: Object, // google.maps.InfoWindow\n     *          options: Object // map options\n     *      },\n     *      staticMap: \"//maps.googleapis.com/maps/api/staticmap?center=41.0214,28.9948&maptype=roadmap&size=600x300&scale=1&zoom=9&format=png&language=en&markers=color%3Ared%7C41.0214%2C228.9948&key=YOUR-GOOGLE-API-KEY\",\n     *      provider: \"freegeoip\",\n     *      timestamp: 1466216325223\n     *  }\n     */\n    static locateByIP(options, callback) {\n        // passed source can be a string or object\n        let source = geolocator._.geoIpSource;\n\n        if (!utils.isPlainObject(source)) {\n            throw new GeoError(\n                GeoError.Code.INVALID_GEO_IP_SOURCE,\n                'Please set a valid Geo-IP Source via geolocator.setGeoIPSource(options).'\n            );\n        }\n\n        // check options and Google key\n        checkGoogleKey(options || {});\n\n        let jsonpOpts = {\n            url: source.url,\n            async: true,\n            clean: true\n            // params: {}\n        };\n        if (source.callbackParam) {\n            jsonpOpts.callbackParam = source.callbackParam;\n            jsonpOpts.rootName = 'geolocator._.cb';\n        } else if (!source.globalVar) {\n            throw new GeoError(\n                GeoError.Code.INVALID_GEO_IP_SOURCE,\n                'Either callbackParam or globalVar should be set for Geo-IP source.'\n            );\n        }\n        return fetch.jsonp(jsonpOpts, (err, response) => {\n            if (err) {\n                return callback(GeoError.create(err), null);\n            }\n            if (source.globalVar) {\n                if (window[source.globalVar]) {\n                    response = utils.clone(window[source.globalVar]);\n                    delete window[source.globalVar];\n                } else {\n                    response = null;\n                }\n            }\n            if (!response) {\n                err = new GeoError(GeoError.Code.INVALID_RESPONSE);\n                return callback(err, null);\n            }\n            if (utils.isPlainObject(source.schema)) {\n                response = utils.mapToSchema(response, source.schema);\n            }\n            response.provider = source.provider || 'unknown';\n            setLocationURLs(response, options);\n            if (response.coords) {\n                response.coords.latitude = Number(response.coords.latitude);\n                response.coords.longitude = Number(response.coords.longitude);\n            }\n            let cb = callbackMap(options, callback);\n            fetchAddressAndTimezone(response, options, cb);\n        });\n    }\n\n    /**\n     *  Sets the Geo-IP source to be used for fetching location information\n     *  by user's IP; which is internally used by\n     *  {@link #geolocator.locateByIP|`geolocator.locateByIP()` method}.\n     *\n     *  By default, Geolocator uses FreeGeoIP as the Geo-IP source provider.\n     *  You can use this method to change this; or you can choose from\n     *  ready-to-use\n     *  {@link https://github.com/onury/geolocator/tree/master/src/geo-ip-sources|Geo-IP sources}.\n     *\n     *  @param {Object} options\n     *         Geo-IP Source options.\n     *      @param {String} [options.provider]\n     *             Source or service provider's name.\n     *      @param {String} options.url\n     *             Source URL without the callback query parameter. The callback\n     *             name (if supported) should be set via `options.callbackParam`.\n     *             Also, make sure the service supports the protocol you use in\n     *             the enums.URL. If it supports both HTTP and HTTPS, you can omit the\n     *             protocol. In this case, it will be determined via Geolocator\n     *             configuration.\n     *             See {@link #geolocator.config|`geolocator.config()`}.\n     *             NOTE: Do not forget to include your API key in the query\n     *             parameters of the URL, if you have one.\n     *      @param {String} [options.callbackParam]\n     *             If JSON callback is supported, pass the name of the callback\n     *             parameter, defined by the provider.\n     *      @param {Object} [options.globalVar]\n     *             Set this instead of `options.callbackParam` if the service\n     *             does not support JSON callbacks, but weirdly set a global\n     *             variable in the document. For example, if the response is\n     *             `Geo = { lat, lng }`, you should set this to `\"Geo\"`.\n     *      @param {Object} [options.schema]\n     *             Schema object to be used to re-structure the response returned\n     *             from the service. Set the response object's keys as values of\n     *             a custom object to map the format to the `location` object.\n     *             For example; if the service returns a response like\n     *             `{ lat: 40.112233, lng: 10.112233, otherProp: 'hello' }`.\n     *             Then you should set the following schema:\n     *             `{ coords: { latitude: 'lat', longitude: 'lng' } }`.\n     *\n     *  @return {geolocator}\n     */\n    static setGeoIPSource(options) {\n        if (!utils.isPlainObject(options)) {\n            throw new GeoError(GeoError.Code.INVALID_PARAMETERS, 'Geo-IP source options is invalid.');\n        }\n        if (!utils.isStringSet(options.url)) {\n            throw new GeoError(GeoError.Code.INVALID_PARAMETERS, 'Geo-IP source should have a valid URI.');\n        }\n        // if (!utils.isStringSet(options.callbackParam) && !utils.isStringSet(options.globalVar)) {\n        //     throw new GeoError(GeoError.Code.INVALID_PARAMETERS, 'No \\'callbackParam\\' or \\'globalVar\\' is provided for the Geo-IP Source options.');\n        // }\n        geolocator._.geoIpSource = Object.freeze(options);\n    }\n\n    /**\n     *  Registers a handler for watching the user's location via HTML5\n     *  geolocation; that is triggered each time the position of the device\n     *  changes. This may require/prompt for user's permission.\n     *\n     *  @param {Object} [options]\n     *         HTML5 geo-location settings.\n     *      @param {Boolean} [options.enableHighAccuracy=true]\n     *             Specifies whether the device should provide the most accurate\n     *             position it can. Note that setting this to `true` might consume\n     *             more CPU and/or battery power; and result in slower response\n     *             times.\n     *      @param {Number} [options.timeout=6000]\n     *             HTML5 position timeout setting in milliseconds. Setting this\n     *             to `Infinity` means that Geolocator won't return until the\n     *             position is available.\n     *      @param {Number} [options.maximumAge=0]\n     *             HTML5 position maximum age. Indicates the maximum age in\n     *             milliseconds of a possible cached position that is acceptable\n     *             to return. `0` means, the device cannot use a cached position\n     *             and must attempt to retrieve the real current position. If set\n     *             to `Infinity` the device must return a cached position\n     *             regardless of its age.\n     *      @param {Boolean} [options.clearOnError=false]\n     *             Specifies whether to clear the watcher on first error so that\n     *             it does not execute any more callbacks.\n     *      @param {Object} [options.target]\n     *             Object that defines the target location and settings; that\n     *             when the location is reached, the watcher will auto-clear\n     *             itself and invoke the callback.\n     *      @param {Number} options.target.latitude\n     *             The `latitude` of the target location.\n     *      @param {Number} options.target.longitude\n     *             The `longitude` of the target location.\n     *      @param {Number} [options.target.radius=0.5]\n     *             The radius, in other words; the minimum distance (in\n     *             kilometers or miles) to the target point that should be\n     *             reached.\n     *      @param {Number} [options.target.unitSystem=0]\n     *             Unit system to be used for target radius.\n     *             See {@link #geolocator.UnitSystem|`geolocator.UnitSystem` enumeration}\n     *             for possible values.\n     *  @param {Function} callback\n     *         Callback function to be executed when the request completes.\n     *         This takes 2 arguments: `function (err, location) { ... }`.\n     *         If `options.target` is set, `location` will also\n     *         include a `targetReached:Boolean` property.\n     *         See {@link #geolocator~Location|`geolocator~Location` type} for details.\n     *\n     *  @returns {GeoWatcher} - A watcher object that provides a\n     *  `.clear(delay:Number, callback:Function)` method to clear the watcher\n     *  when needed. Optional `delay` argument can be set (in milliseconds) to\n     *  clear in a later time. Omitting this argument will clear the watcher\n     *  immediately. You should always call this method, except if you've set up\n     *  a target; which will auto-clear the watcher when reached.\n     *\n     *  @example\n     *  // Watch my position for 5 minutes.\n     *  var options = { enableHighAccuracy: true, timeout: 6000, maximumAge: 0 };\n     *  var watcher = geolocator.watch(options, function (err, location) {\n     *      console.log(err || location);\n     *  });\n     *  console.log(watcher.id); // ID of the watcher\n     *  watcher.clear(300000); // clear after 5 minutes.\n     *\n     *  @example\n     *  // Watch my position until I'm 350 meters near Disneyland Park.\n     *  options.target = {\n     *      latitude: 33.8120918,\n     *      longitude: -117.9233569,\n     *      radius: 0.35,\n     *      unitSystem: geolocator.UnitSystem.METRIC\n     *  };\n     *  watcher = geolocator.watch(options, function (err, location) {\n     *      if (err) {\n     *          console.log(err);\n     *          return;\n     *      }\n     *      if (location.targetReached) {\n     *          console.log(watcher.isCleared); // true\n     *          console.log(watcher.cycle); // 15 — target reached after 15 cycles\n     *      } else {\n     *          console.log(watcher.isCleared); // false — watcher is active.\n     *      }\n     *  });\n     */\n    static watch(options, callback) {\n        if (!geolocator.isGeolocationSupported()) {\n            callback(new GeoError(GeoError.Code.GEOLOCATION_NOT_SUPPORTED), null);\n            return {};\n        }\n\n        let watcher, target;\n\n        options = utils.extend({\n            enableHighAccuracy: true,\n            timeout: 6000,\n            maximumAge: 0,\n            clearOnError: false\n        }, options);\n\n        if (utils.isPlainObject(options.target)) {\n            target = utils.extend({\n                radius: 0.5,\n                unitSystem: geolocator.UnitSystem.METRIC\n            }, options.target);\n        }\n\n        function onPositionChanged(location) {\n            let pos = utils.clone(location, { own: false });\n            if (target) {\n                let distance = geolocator.calcDistance({\n                    from: location.coords,\n                    to: target,\n                    formula: geolocator.DistanceFormula.HAVERSINE,\n                    unitSystem: target.unitSystem\n                });\n                pos.targetReached = distance <= target.radius;\n                if (watcher && pos.targetReached) {\n                    watcher.clear(() => {\n                        return callback(null, pos);\n                    });\n                }\n            }\n            return callback(null, pos);\n        }\n        function onPositionError(err) {\n            callback(GeoError.create(err), null);\n        }\n        return new GeoWatcher(onPositionChanged, onPositionError, options);\n    }\n\n    /**\n     *  Converts a given address (or address components) into geographic\n     *  coordinates (i.e. latitude, longitude); and gets detailed address\n     *  information.\n     *  @see {@link https://developers.google.com/maps/documentation/geocoding/intro|Google Maps Geocoding API}\n     *  @see {@link https://developers.google.com/maps/documentation/geocoding/usage-limits|Usage Limits}\n     *\n     *  @param {String|Object} options\n     *         Either the address to geocode or geocoding options with the\n     *         following properties.\n     *      @param {String} options.address\n     *             The street address to geocode, in the format used by the\n     *             national postal service of the country concerned. Additional\n     *             address elements such as business names and unit, suite or\n     *             floor numbers should be avoided. Note that any address\n     *             component (route, locality, administrativeArea, postalCode and\n     *             country) should be specified either in address or the\n     *             corresponding property - not both. Doing so may result in\n     *             `ZERO_RESULTS`.\n     *      @param {String} [options.route]\n     *      \t      Long or short name of a route.\n     *      @param {String} [options.locality]\n     *      \t      Locality and sublocality of the location.\n     *      @param {String} [options.administrativeArea]\n     *      \t      Administrative area of the location.\n     *      @param {String} [options.postalCode]\n     *      \t      Postal code of the location.\n     *      @param {String} [options.country]\n     *      \t      A country name or a two letter ISO 3166-1 country code.\n     *      @param {String} [options.region]\n     *      \t      The region code, specified as a ccTLD (\"top-level domain\")\n     *      \t      two-character value. e.g.: `\"fr\"` for France.\n     *      @param {Array|Object} [options.bounds]\n     *      \t      The bounding box of the viewport within which to bias geocode\n     *      \t      results more prominently. e.g.:\n     *      \t      `[ southwestLat:Number, southwestLng:Number, northeastLat:Number, northeastLng:Number ]`\n     *      @param {String|Object} [options.map]\n     *             In order to create an interactive map from the fetched\n     *             location coordinates; either set this to map options object\n     *             or; the ID of a DOM element or DOM element itself which the\n     *             map will be created within.\n     *      @param {Boolean|Object} [options.staticMap=false]\n     *             Set to `true` to get a static Google Map image URL (with\n     *             default options); or pass a static map options object.\n     *      @param {Boolean} [options.raw=false]\n     *      \t      Whether to return the raw Google API result.\n     *  @param {Function} callback\n     *         Callback function to be executed when the request completes.\n     *         This takes 2 arguments: `function (err, location) { ... }`.\n     *         See {@link #geolocator~Location|`geolocator~Location` type} for details.\n     *\n     *  @returns {void}\n     *\n     *  @example\n     *  var address = '1600 Amphitheatre Parkway, CA';\n     *  geolocator.geocode(address, function (err, location) {\n     *      console.log(err || location);\n     *  });\n     *\n     *  @example\n     *  // location result:\n     *  {\n     *      coords: {\n     *          latitude: 37.4224764,\n     *          longitude: -122.0842499\n     *      },\n     *      address: {\n     *          commonName: \"\",\n     *          street: \"Amphitheatre Pkwy\",\n     *          route: \"Amphitheatre Pkwy\",\n     *          streetNumber: \"1600\",\n     *          neighborhood: \"\",\n     *          town: \"\",\n     *          city: \"Mountain View\",\n     *          region: \"Santa Clara County\",\n     *          state: \"California\",\n     *          stateCode: \"CA\",\n     *          postalCode: \"94043\",\n     *          country: \"United States\",\n     *          countryCode: \"US\"\n     *      },\n     *      formattedAddress: \"1600 Amphitheatre Parkway, Mountain View, CA 94043, USA\",\n     *      type: \"ROOFTOP\",\n     *      placeId: \"ChIJ2eUgeAK6j4ARbn5u_wAGqWA\",\n     *      flag: \"//cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.3.1/flags/4x3/us.svg\",\n     *      map: {\n     *          element: HTMLElement,\n     *          instance: Object, // google.maps.Map\n     *          marker: Object, // google.maps.Marker\n     *          infoWindow: Object, // google.maps.InfoWindow\n     *          options: Object // map options\n     *      },\n     *      timestamp: 1456795956380\n     *  }\n     */\n    static geocode(options, callback) {\n        geocode(false, options, callback);\n    }\n\n    /**\n     *  Converts the given geographic coordinates into a human-readable address\n     *  information.\n     *  @see {@link https://developers.google.com/maps/documentation/geocoding/intro#ReverseGeocoding|Google Maps (Reverse) Geocoding API}\n     *  @see {@link https://developers.google.com/maps/documentation/geocoding/usage-limits|Usage Limits}\n     *  @alias geolocator.addressLookup\n     *\n     *  @param {Object|String} options\n     *         Either the `placeId` of the location or Reverse Geocoding options\n     *         with the following properties.\n     *      @param {Number} options.latitude\n     *      Latitude of the target location.\n     *      @param {Number} options.longitude\n     *      Longitude of the target location.\n     *      @param {String} [options.placeId]\n     *             Required if `latitude` and `longitude` are omitted. The place\n     *             ID of the place for which you wish to obtain the\n     *             human-readable address. The place ID is a unique identifier\n     *             that can be used with other Google APIs. Note that if\n     *             `placeId` is set, `latitude` and `longitude` are ignored.\n     *      @param {String|Object} [options.map]\n     *             In order to create an interactive map from the fetched\n     *             location coordinates; either set this to map options object\n     *             or; the ID of a DOM element or DOM element itself which the\n     *             map will be created within.\n     *      @param {Boolean|Object} [options.staticMap=false]\n     *             Set to `true` to get a static Google Map image URL (with\n     *             default options); or pass a static map options object.\n     *      @param {Boolean} [options.raw=false]\n     *             Whether to return the raw Google API result.\n     *  @param {Function} callback\n     *         Callback function to be executed when the request completes.\n     *         This takes 2 arguments: `function (err, location) { ... }`\n     *         See {@link #geolocator~Location|`geolocator~Location` type} for details.\n     *\n     *  @returns {void}\n     *\n     *  @example\n     *  var coords = {\n     *      latitude: 37.4224764,\n     *      longitude: -122.0842499\n     *  };\n     *\n     *  geolocator.reverseGeocode(coords, function (err, location) {\n     *      console.log(err || location);\n     *  });\n     *\n     *  @example\n     *  // location result:\n     *  {\n     *      coords: {\n     *          latitude: 37.4224764,\n     *          longitude: -122.0842499\n     *      },\n     *      address: {\n     *          commonName: \"\",\n     *          street: \"Amphitheatre Pkwy\",\n     *          route: \"Amphitheatre Pkwy\",\n     *          streetNumber: \"1600\",\n     *          neighborhood: \"\",\n     *          town: \"\",\n     *          city: \"Mountain View\",\n     *          region: \"Santa Clara County\",\n     *          state: \"California\",\n     *          stateCode: \"CA\",\n     *          postalCode: \"94043\",\n     *          country: \"United States\",\n     *          countryCode: \"US\"\n     *      },\n     *      formattedAddress: \"1600 Amphitheatre Parkway, Mountain View, CA 94043, USA\",\n     *      type: \"ROOFTOP\",\n     *      placeId: \"ChIJ2eUgeAK6j4ARbn5u_wAGqWA\",\n     *      flag: \"//cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.3.1/flags/4x3/us.svg\",\n     *      map: {\n     *          element: HTMLElement,\n     *          instance: Object, // google.maps.Map\n     *          marker: Object, // google.maps.Marker\n     *          infoWindow: Object, // google.maps.InfoWindow\n     *          options: Object // map options\n     *      },\n     *      timestamp: 1456795956380\n     *  }\n     */\n    static reverseGeocode(options, callback) {\n        geocode(true, options, callback);\n    }\n\n    /**\n     *  Alias for `geolocator.reverseGeocode`\n     *  @private\n     */\n    static addressLookup(options, callback) {\n        geolocator.reverseGeocode(options, callback);\n    }\n\n    /**\n     *  Gets timezone information for the given coordinates.\n     *  Note: Google Browser API keys cannot have referer restrictions when used with this API.\n     *  @see {@link https://developers.google.com/maps/documentation/timezone/intro|Google Maps TimeZone API}\n     *  @see {@link https://developers.google.com/maps/documentation/timezone/usage-limits|Usage Limits}\n     *\n     *  @param {Object} options\n     *         Time zone options.\n     *      @param {Number} options.latitude\n     *             Latitude of location.\n     *      @param {Number} options.longitude\n     *             Longitude of location.\n     *      @param {Number} [options.timestamp=Date.now()]\n     *             Specifies the desired time as seconds since midnight, January\n     *             1, 1970 UTC. This is used to determine whether or not Daylight\n     *             Savings should be applied.\n     *      @param {Boolean} [options.raw=false]\n     *             Whether to return the raw Google API result.\n     *  @param {Function} callback\n     *         Callback function to be executed when the request completes, in\n     *         the following signature: `function (err, timezone) { ... }`.\n     *         See {@link #geolocator~TimeZone|`geolocator~TimeZone` type} for\n     *         details.\n     *\n     *  @returns {void}\n     *\n     *  @example\n     *  var options = {\n     *      latitude: 48.8534100,\n     *      longitude: 2.3488000\n     *  };\n     *  geolocator.getTimeZone(options, function (err, timezone) {\n     *      console.log(err || timezone);\n     *  });\n     *\n     *  @example\n     *  // timezone result:\n     *  {\n     *      id: \"Europe/Paris\",\n     *      name: \"Central European Standard Time\",\n     *      abbr: \"CEST\",\n     *      dstOffset: 0,\n     *      rawOffset: 3600,\n     *      timestamp: 1455733120\n     *  }\n     */\n    static getTimeZone(options, callback) {\n        if (!utils.isPlainObject(options)\n                || !utils.isNumber(options.latitude)\n                || !utils.isNumber(options.longitude)) {\n            throw new GeoError(GeoError.Code.INVALID_PARAMETERS);\n        }\n\n        checkGoogleKey();\n\n        let conf = geolocator._.config;\n        options = utils.extend({\n            key: conf.google.key || '',\n            language: conf.language || 'en',\n            timestamp: utils.time(true),\n            raw: false\n        }, options);\n\n        let url = utils.setProtocol(enums.URL.GOOGLE_TIMEZONE, conf.https),\n            xhrOpts = {\n                url: `${url}?location=${options.latitude},${options.longitude}&timestamp=${options.timestamp}&language=${options.language}&key=${options.key}`\n            };\n\n        fetch.xhr(xhrOpts, (err, xhr) => {\n            let response = getXHRResponse(err, xhr);\n            if (GeoError.isGeoError(response)) return callback(response, null);\n\n            response = options.raw ? response : {\n                id: response.timeZoneId,\n                name: response.timeZoneName,\n                abbr: utils.abbr(response.timeZoneName, { dots: false }),\n                dstOffset: response.dstOffset,\n                rawOffset: response.rawOffset,\n                timestamp: options.timestamp\n            };\n            callback(err, response);\n        });\n    }\n\n    /**\n     *  Gets the distance and duration values based on the recommended route\n     *  between start and end points.\n     *  @see {@link https://developers.google.com/maps/documentation/distance-matrix/intro|Google Maps Distance Matrix API}\n     *  @see {@link https://developers.google.com/maps/documentation/distance-matrix/usage-limits|Usage Limits}\n     *\n     *  @param {Object} options\n     *         Distance matrix options.\n     *      @param {String|Object|Array} options.origins\n     *             One or more addresses and/or an object of latitude/longitude\n     *             values, from which to calculate distance and time. If you pass\n     *             an address as a string, the service will geocode the string\n     *             and convert it to a latitude/longitude coordinate to calculate\n     *             distances. Following are valid examples:\n     *  <pre><code>options.origins = 'London';\n     *  options.origins = ['London', 'Paris'];\n     *  options.origins = { latitude: 51.5085300, longitude: -0.1257400 };\n     *  options.origins = [\n     *      { latitude: 51.5085300, longitude: -0.1257400 },\n     *      { latitude: 48.8534100, longitude: 2.3488000 }\n     *  ];\n     *  </code></pre>\n     *      @param {String|Object|Array} options.destinations\n     *             One or more addresses and/or an object of latitude/longitude\n     *             values, from which to calculate distance and time. If you pass\n     *             an address as a string, the service will geocode the string\n     *             and convert it to a latitude/longitude coordinate to calculate\n     *             distances.\n     *      @param {String} [options.travelMode=\"DRIVING\"]\n     *             Type of routing requested.\n     *             See {@link #geolocator.TravelMode|`geolocator.TravelMode` enumeration}\n     *             for possible values.\n     *      @param {Boolean} [options.avoidFerries]\n     *             If true, instructs the Distance Matrix service to avoid\n     *             ferries where possible.\n     *      @param {Boolean} [options.avoidHighways]\n     *             If true, instructs the Distance Matrix service to avoid\n     *             highways where possible.\n     *      @param {Boolean} [options.avoidTolls]\n     *             If true, instructs the Distance Matrix service to avoid toll\n     *             roads where possible.\n     *      @param {Number} [options.unitSystem=0]\n     *             Preferred unit system to use when displaying distance.\n     *             See {@link #geolocator.UnitSystem|`geolocator.UnitSystem` enumeration}\n     *             for possible values.\n     *      @param {String} [options.region]\n     *             Region code used as a bias for geocoding requests.\n     *  @param {Boolean} [options.raw=false]\n     *         Whether to return the raw Google API result.\n     *  @param {Function} callback\n     *         Callback function to be executed when the request completes,\n     *         in the following signature: `function (err, result) { ... }`\n     *\n     *  @returns {void}\n     *\n     *  @example\n     *  var options = {\n     *      origins: [{ latitude: 51.5085300, longitude: -0.1257400 }],\n     *      destinations: [{ latitude: 48.8534100, longitude: 2.3488000 }],\n     *      travelMode: geolocator.TravelMode.DRIVING,\n     *      unitSystem: geolocator.UnitSystem.METRIC\n     *  };\n     *  geolocator.getDistanceMatrix(options, function (err, result) {\n     *      console.log(err || result);\n     *  });\n     *\n     *  @example\n     *  // result:\n     *  [\n     *  \t{\n     *  \t\tfrom: \"449 Duncannon St, London WC2R 0DZ, UK\",\n     *  \t\tto: \"1 Parvis Notre-Dame - Pl. Jean-Paul II, 75004 Paris-4E-Arrondissement, France\",\n     *  \t\tdistance: {\n     *  \t\t\tvalue: 475104,\n     *  \t\t\ttext: \"475 km\"\n     *  \t\t},\n     *  \t\tduration: {\n     *  \t\t\tvalue: 20193,\n     *  \t\t\ttext: \"5 hours 37 mins\"\n     *  \t\t},\n     *  \t\tfare: undefined,\n     *  \t\ttimestamp: 1456795956380\n     *  \t}\n     *  ]\n     */\n    static getDistanceMatrix(options, callback) {\n        checkGoogleKey();\n\n        let key = geolocator._.config.google.key;\n        geolocator.ensureGoogleLoaded(key, err => {\n            if (err) {\n                throw new GeoError(GeoError.Code.GOOGLE_API_FAILED, String(err.message || err));\n            }\n\n            let o = options.origins || options.origin || options.from,\n                d = options.destinations || options.destination || options.to;\n            if (!utils.isPlainObject(options) || invalidOriginOrDest(o) || invalidOriginOrDest(d)) {\n                throw new GeoError(GeoError.Code.INVALID_PARAMETERS);\n            }\n            options.origins = geoHelper.toPointList(o);\n            options.destinations = geoHelper.toPointList(d);\n\n            options = utils.extend({\n                travelMode: google.maps.TravelMode.DRIVING,\n                avoidFerries: undefined,\n                avoidHighways: undefined,\n                avoidTolls: undefined,\n                unitSystem: google.maps.UnitSystem.METRIC\n            }, options);\n\n            let service = new google.maps.DistanceMatrixService();\n            service.getDistanceMatrix(options, (response, status) => {\n                let err = null;\n                if (status !== google.maps.DistanceMatrixStatus.OK) {\n                    err = GeoError.fromResponse(status)\n                        || GeoError.fromResponse(response);\n                    response = null;\n                } else {\n                    response = options.raw ? response : geoHelper.formatDistanceResults(response);\n                }\n                callback(err, response);\n            });\n        });\n    }\n\n    /**\n     *  Calculates the distance between two geographic points.\n     *\n     *  @param {Object} options\n     *         Calculation and display options.\n     *      @param {Object} options.from\n     *             Object containing the `latitude` and `longitude` of original\n     *             location.\n     *      @param {Object} options.to\n     *             Object containing the `latitude` and `longitude` of destination.\n     *      @param {String} [options.formula=\"haversine\"]\n     *             The algorithm or formula to calculate the distance.\n     *             See {@link #geolocator.DistanceFormula|`geolocator.DistanceFormula` enumeration}.\n     *      @param {Number} [options.unitSystem=0]\n     *             Preferred unit system to use when displaying distance.\n     *             See {@link #geolocator.UnitSystem|`geolocator.UnitSystem` enumeration}.\n     *\n     *  @returns {Number} - The calculated distance.\n     *\n     *  @example\n     *  // Calculate distance from London to Paris.\n     *  var result = geolocator.calcDistance({\n     *      from: {\n     *          latitude: 51.5085300,\n     *          longitude: -0.1257400\n     *      },\n     *      to: {\n     *          latitude: 48.8534100,\n     *          longitude: 2.3488000\n     *      },\n     *      formula: geolocator.DistanceFormula.HAVERSINE,\n     *      unitSystem: geolocator.UnitSystem.METRIC\n     *  });\n     *  // result: 366.41656039126093 (kilometers)\n     */\n    static calcDistance(options) {\n        options = utils.extend({\n            formula: geolocator.DistanceFormula.HAVERSINE,\n            unitSystem: geolocator.UnitSystem.METRIC\n        }, options);\n\n        let from = options.from,\n            to = options.to,\n            radius = options.unitSystem === geolocator.UnitSystem.METRIC\n                ? EARTH_RADIUS_KM : EARTH_RADIUS_MI;\n\n        if (options.formula === geolocator.DistanceFormula.HAVERSINE) {\n            let dLat = geolocator.degToRad(to.latitude - from.latitude),\n                dLng = geolocator.degToRad(to.longitude - from.longitude),\n                a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n                    Math.cos(geolocator.degToRad(from.latitude)) *\n                    Math.cos(geolocator.degToRad(to.longitude)) *\n                    Math.sin(dLng / 2) * Math.sin(dLng / 2),\n                c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n            return radius * c;\n        }\n        // geolocator.DistanceFormula.PYTHAGOREAN\n        let latA = geolocator.degToRad(from.latitude),\n            latB = geolocator.degToRad(to.latitude),\n            lngA = geolocator.degToRad(from.longitude),\n            lngB = geolocator.degToRad(to.longitude),\n            x = (lngB - lngA) * Math.cos((latA + latB) / 2),\n            y = (latB - latA);\n        return Math.sqrt(x * x + y * y) * radius;\n    }\n\n    /**\n     *  Gets the current public IP of the client.\n     *\n     *  @param {Function} callback\n     *         Callback function to be executed when the request completes, in\n     *         the following signature: `function (err, result) { ... }`\n     *\n     *  @returns {void}\n     *\n     *  @example\n     *  geolocator.getIP(function (err, result) {\n     *      console.log(err || result);\n     *  });\n     *\n     *  @example\n     *  // result:\n     *  {\n     *      ip: \"176.232.71.155\",\n     *      timestamp: 1457573683427\n     *  }\n     */\n    static getIP(callback) {\n        let conf = geolocator._.config;\n\n        let jsonpOpts = {\n            url: utils.setProtocol(enums.URL.IP, conf.https),\n            async: true,\n            clean: true,\n            params: {\n                format: 'jsonp'\n            },\n            callbackParam: 'callback',\n            rootName: 'geolocator._.cb'\n        };\n        return fetch.jsonp(jsonpOpts, (err, response) => {\n            if (err) {\n                return callback(GeoError.create(err), null);\n            }\n            if (!response) {\n                err = new GeoError(GeoError.Code.INVALID_RESPONSE);\n                return callback(err, null);\n            }\n            if (typeof response === 'object') response.timestamp = utils.time();\n            callback(null, response);\n        });\n    }\n\n    /**\n     *  Ensures Google Maps API is loaded. If not, this will load all of the\n     *  main Javascript objects and symbols for use in the Maps API.\n     *\n     *  Note that, Google Maps API is loaded only when needed. For example,\n     *  the DistanceMatrix API does not support Web Service requests and\n     *  requires this API to be loaded. However, the TimeZone API requests are\n     *  made throught the Web Service without requiring a `google` object\n     *  within DOM.\n     *\n     *  Also note that this will not re-load the API if `google.maps` object\n     *  already exists. In this case, the `callback` is still executed and\n     *  no errors are passed.\n     *\n     *  You can use the following overload to omit the `key` argument altogether:\n     *\n     *  `geolocator.ensureGoogleLoaded(callback)`\n     *\n     *  @param {String} [key]\n     *         Google API key.\n     *  @param {Function} callback\n     *         Callback function to be executed when the operation ends.\n     *\n     *  @returns {void}\n     *\n     *  @example\n     *  geolocator.ensureGoogleLoaded(function (err) {\n     *      if (err) return;\n     *      console.log('google' in window); // true\n     *  });\n     */\n    static ensureGoogleLoaded(key, callback) {\n        let k;\n        if (utils.isFunction(key)) {\n            callback = key;\n        } else {\n            k = key;\n        }\n        if (!geolocator.isGoogleLoaded()) {\n            let jsonpOpts = {\n                url: enums.URL.GOOGLE_MAPS_API,\n                async: true,\n                callbackParam: 'callback',\n                params: {\n                    key: k || ''\n                    // callback: ''\n                },\n                rootName: 'geolocator._.cb'\n            };\n            return fetch.jsonp(jsonpOpts, callback);\n        }\n        callback();\n    }\n\n    /**\n     *  Checks whether the Google Maps API is loaded.\n     *\n     *  @returns {Boolean} - Returns `true` if already loaded.\n     */\n    static isGoogleLoaded() {\n        return ('google' in window) && google.maps;\n    }\n\n    /**\n     *  Checks whether the type of the given object is an HTML5 `PositionError`.\n     *\n     *  @param {*} obj - Object to be checked.\n     *  @return {Boolean}\n     */\n    static isPositionError(obj) {\n        return utils.isPositionError(obj);\n    }\n\n    /**\n     *  Checks whether the given value is an instance of `GeoError`.\n     *\n     *  @param {*} obj - Object to be checked.\n     *  @return {Boolean}\n     */\n    static isGeoError(obj) {\n        return GeoError.isGeoError(obj);\n    }\n\n    /**\n     *  Checks whether HTML5 Geolocation API is supported.\n     *\n     *  @return {Boolean}\n     */\n    static isGeolocationSupported() {\n        return navigator && ('geolocation' in navigator);\n    }\n\n    /**\n     *  Converts kilometers to miles.\n     *\n     *  @param {Number} km - Kilometers to be converted.\n     *  @returns {Number} - Miles.\n     */\n    static kmToMi(km) {\n        return km * 0.621371;\n    }\n\n    /**\n     *  Converts miles to kilometers.\n     *\n     *  @param {Number} mi - Miles to be converted.\n     *  @returns {Number} - Kilometers.\n     */\n    static miToKm(mi) {\n        return mi / 0.621371;\n    }\n\n    /**\n     *  Converts degrees to radians.\n     *\n     *  @param {Number} deg - Degrees to be converted.\n     *  @returns {Number} - Radians.\n     */\n    static degToRad(degrees) {\n        return degrees * (Math.PI / 180);\n    }\n\n    /**\n     *  Converts radians to degrees.\n     *\n     *  @param {Number} rad - Radians to be converted.\n     *  @returns {Number} - Degrees.\n     */\n    static radToDeg(radians) {\n        return radians * (180 / Math.PI);\n    }\n\n    /**\n     *  Converts decimal coordinates (either lat or lng) to degrees, minutes, seconds.\n     *\n     *  @param {Number} dec\n     *         Decimals to be converted.\n     *  @param {Boolean} [isLng=false]\n     *         Indicates whether the given decimals is longitude.\n     *\n     *  @returns {String} - Degrees, minutes, seconds.\n     */\n    static decToDegMinSec(dec, isLng = false) {\n        // Degrees Latitude must be in the range of -90. to 90.\n        // Degrees Longitude must be in the range of -180 to 180.\n        // +Latitude is North, -Latitude is South\n        // +Longitude is East, -Longitude is West\n        let sign = dec < 0 ? -1 : 1,\n            sn = dec < 0 ? 'S' : 'N',\n            we = dec < 0 ? 'W' : 'E',\n            nsew = !isLng ? sn : we,\n            absValue = Math.abs(Math.round(dec * 1000000.0));\n        return ((Math.floor(absValue / 1000000) * sign) + '° ' + Math.floor(((absValue / 1000000) - Math.floor(absValue / 1000000)) * 60) + '\\' ' +\n                (Math.floor(((((absValue / 1000000) - Math.floor(absValue / 1000000)) * 60) - Math.floor(((absValue / 1000000) - Math.floor(absValue / 1000000)) * 60)) * 100000) * 60 / 100000) + '\" ') + nsew;\n    }\n\n}\n\n// ---------------------------\n// HELPER METHODS\n// ---------------------------\n\n/**\n *  Used with distance matrix calls.\n *  @private\n */\nfunction invalidOriginOrDest(value) {\n    return !utils.isString(value)\n        && !utils.isArray(value)\n        && !utils.isPlainObject(value);\n}\n\n/**\n *  Check if XHR response is an error response and returns a `GeoError`.\n *  If not, returns the parsed response.\n *  @private\n *\n *  @param {Error} err\n *         XHR error.\n *  @param {Object} xhr\n *         XHR object to be checked.\n *\n *  @returns {GeoError|Object}\n */\nfunction getXHRResponse(err, xhr) {\n    if (err) return GeoError.create(err);\n    if (!xhr) return new GeoError(GeoError.Code.REQUEST_FAILED);\n    let response = utils.safeJsonParse(xhr.responseText);\n    // Check if XHR response is an error response.\n    // return response if not.\n    return GeoError.fromResponse(response) || response;\n}\n\n/**\n *  Checks the given options and determines if Google key is required.\n *  Throws if key is required but not set or valid.\n *  @private\n *\n *  @param {Object} [options]\n *         Options to be checked. If `undefined`, directly checks Googke key.\n */\nfunction checkGoogleKey(options) {\n    if (!options || (options.addressLookup || options.timezone || options.map || options.staticMap)) {\n        if (!geolocator._.config.google.key) {\n            throw new GeoError(GeoError.Code.GOOGLE_KEY_INVALID, 'A Google API key is required but it\\'s not set or valid.');\n        }\n    }\n}\n\n/**\n *  Checks and adds necessary properties to map options from the given location\n *  result object. This is used with methods that support `map` option; to\n *  create a map from the result coordinates; such as locate() method.\n *  @private\n *\n *  @param {Object|String} options\n *         Original options object.\n *  @param {Object} location\n *         Location result object.\n *\n *  @returns {Object} - Final map options object.\n */\nfunction getMapOpts(mapOptions, location) {\n    if (utils.isObject(mapOptions)) {\n        mapOptions.center = location.coords;\n    } else {\n        mapOptions = {\n            element: mapOptions,\n            center: location.coords\n        };\n    }\n    // this will enable infoWindow\n    if (location.formattedAddress) {\n        mapOptions.title = location.formattedAddress;\n    }\n    // if location has accuracy, (and zoom is not set) we can zoom in a bit more\n    if (!mapOptions.zoom\n            && location.coords\n            && utils.isNumber(location.coords.accuracy)\n            && location.coords.accuracy < 1500) {\n        mapOptions.zoom = 15;\n    }\n    return mapOptions;\n}\n\n/**\n *  Checks the HTMLElement to see whether a previous map and related objects\n *  (marker, infoWindow) are created for it; by checking our private property\n *  `_geolocatorMapData`. If there is a map, this does not re-create it (which\n *  will break the map) but only re-adjust center, zoom and re-create the marker\n *  if needed. We use this approach bec. Google maps has no feature to destroy\n *  a map. This is considered a bug by Google developers.\n *  @private\n *\n *  @param {Object} options\n *         Options for creating a map.\n */\nfunction configCreateMap(options) {\n    let elem = options.element,\n        // when geolocator creates a map, it will set a `_geolocatorMapData`\n        // property on the element. So we can use this map instance later,\n        // when the same HTMLElement is passed to create a map. So check if\n        // we have it here.\n        mapData = elem._geolocatorMapData,\n        map = (mapData && mapData.instance) || null,\n        marker = (mapData && mapData.marker) || null,\n        infoWindow = (mapData && mapData.infoWindow) || null,\n        center = new google.maps.LatLng(options.center.latitude, options.center.longitude),\n        mapOptions = {\n            mapTypeId: options.mapTypeId,\n            center: center,\n            zoom: options.zoom,\n            styles: options.styles || null\n        };\n\n    // if we have a map, we'll just configure it. otherwise, we'll create\n    // one.\n    if (map) {\n        map.setOptions(mapOptions);\n    } else {\n        map = new google.maps.Map(options.element, mapOptions);\n    }\n\n    // destroy marker and infoWindow if previously created for this element.\n    if (infoWindow) infoWindow = null;\n    if (marker && marker instanceof google.maps.Marker) {\n        google.maps.event.clearInstanceListeners(marker);\n        marker.setMap(null);\n        marker = null;\n    }\n\n    // check the new options to see if we need to re-create a marker for\n    // this.\n    if (options.marker) {\n        marker = new google.maps.Marker({\n            position: mapOptions.center,\n            map: map\n        });\n        if (options.title) {\n            infoWindow = new google.maps.InfoWindow();\n            infoWindow.setContent(options.title);\n            // infoWindow.open(map, marker);\n            google.maps.event.addListener(marker, 'click', () => {\n                infoWindow.open(map, marker);\n            });\n        }\n    }\n\n    mapData = {\n        element: elem,\n        instance: map,\n        marker: marker,\n        infoWindow: infoWindow,\n        options: mapOptions\n    };\n    // set the reference on the element for later use, if needed.\n    elem._geolocatorMapData = mapData;\n    return mapData;\n}\n\n/**\n *  Sets the `flag` and `staticMap` (if enabled) property of the given location.\n *  @private\n *\n *  @param {Object} location - Fetched location result.\n *  @param {Object} options - initial options.\n */\nfunction setLocationURLs(location, options) {\n    if (!location || !location.address) return;\n    let cc,\n        address = location.address;\n    if (utils.isString(address.countryCode) && address.countryCode.length === 2) {\n        cc = address.countryCode;\n    } else if (utils.isString(address.country) && address.country.length === 2) {\n        cc = address.country;\n    }\n    if (!cc) return;\n    location.flag = enums.URL.FLAG + cc.toLowerCase() + '.svg';\n    if (options.staticMap) {\n        let opts = utils.isPlainObject(options.staticMap)\n            ? utils.clone(options.staticMap)\n            : {};\n        opts.center = location.coords;\n        location.staticMap = geolocator.getStaticMap(opts);\n    }\n}\n\n/**\n *  Nests `createMap` callback within the given callback.\n *  @private\n *\n *  @param {Object} options\n *         Method options.\n *  @param {Function} callback\n *         Parent callback.\n *\n *  @returns {Function} - Nested callback.\n */\nfunction callbackMap(options, callback) {\n    return function cb(err, location) {\n        if (err) return callback(GeoError.create(err), null);\n        setLocationURLs(location, options);\n        if (!options.map) return callback(null, location);\n        options.map = getMapOpts(options.map, location);\n        geolocator.createMap(options.map, (error, map) => {\n            if (error) return callback(error, null);\n            location.map = map;\n            return callback(null, location);\n        });\n    };\n}\n\n/**\n *  Sends a geocode or reverse-geocode request with the given options.\n *  @private\n *\n *  @param {Boolean} reverse\n *         Whether to send reverse-geocode request.\n *  @param {Object} options\n *         Geocode options.\n *  @param {Function} callback\n *         Callback to be nested and executed with map callback.\n */\nfunction geocode(reverse, options, callback) {\n    checkGoogleKey();\n    geoHelper.geocode(\n        reverse,\n        geolocator._.config,\n        options,\n        callbackMap(options, callback)\n    );\n}\n\n/**\n *  Runs both an address and a timezone look-up for the given location.\n *  @private\n *\n *  @param {Object} location\n *         Location object.\n *  @param {Object} options\n *         Method options.\n *  @param {Function} callback\n *         Parent callback.\n */\nfunction fetchAddressAndTimezone(location, options, callback) {\n    let loc = utils.clone(location, { own: false });\n    if (!options.addressLookup && !options.timezone) {\n        return callback(null, loc);\n    }\n    function getTZ(cb) {\n        geolocator.getTimeZone(loc.coords, (err, timezone) => {\n            if (err) {\n                return cb(err, null);\n            }\n            delete timezone.timestamp;\n            loc.timezone = timezone;\n            loc.timestamp = utils.time(); // update timestamp\n            cb(null, loc);\n        });\n    }\n    if (options.addressLookup) {\n        geolocator.reverseGeocode(loc.coords, (err, result) => {\n            if (err) return callback(err, null);\n            loc = utils.extend({}, result, loc);\n            loc.address = result.address;\n            loc.timestamp = utils.time(); // update timestamp\n            if (!options.timezone) {\n                callback(err, loc);\n            } else {\n                getTZ(callback);\n            }\n        });\n    } else if (options.timezone) {\n        getTZ(callback);\n    } else {\n        callback(null, loc);\n    }\n}\n\n/**\n *  Gets the position with better accuracy.\n *  See https://github.com/gwilson/getAccurateCurrentPosition#background\n *  @private\n *\n *  @param {Object} options\n *         Locate options.\n *  @param {Function} onPositionReceived\n *         Success callback.\n *  @param {Function} onPositionError\n *         Error callback.\n */\nfunction locateAccurate(options, onPositionReceived, onPositionError) {\n    let loc,\n        watcher,\n        onProgress = !utils.isFunction(options.onProgress)\n            ? utils.noop\n            : options.onProgress;\n\n    function complete() {\n        if (!loc) {\n            onPositionError(new GeoError(GeoError.Code.POSITION_UNAVAILABLE));\n        } else {\n            onPositionReceived(loc);\n        }\n    }\n\n    watcher = geolocator.watch(options, (err, location) => {\n        if (err) {\n            return watcher.clear(() => {\n                onPositionError(err);\n            });\n        }\n        loc = location;\n        // ignore the first event if not the only result; for more accuracy.\n        if ((watcher.cycle > 1) && (loc.coords.accuracy <= options.desiredAccuracy)) {\n            watcher.clear(complete);\n        } else {\n            onProgress(loc);\n        }\n    });\n    watcher.clear(options.maximumWait + 100, complete);\n}\n\n// ---------------------------\n// INITIALIZE\n// ---------------------------\n\n/**\n *  @private\n *  @type {Object}\n */\ngeolocator._ = {\n    config: utils.extend({}, defaultConfig),\n    // Storage for global callbacks.\n    cb: {}\n};\n\n// setting default Geo-IP source, FreeGeoIP\ngeolocator.setGeoIPSource({\n    provider: 'freegeoip',\n    url: 'https://freegeoip.net/json',\n    callbackParam: 'callback',\n    schema: {\n        ip: 'ip',\n        coords: {\n            latitude: 'latitude',\n            longitude: 'longitude'\n        },\n        address: {\n            city: 'city',\n            state: 'region_name',\n            stateCode: 'region_code',\n            postalCode: 'zip_code',\n            countryCode: 'country_code',\n            country: 'country_name',\n            region: 'region_name'\n        },\n        timezone: {\n            id: 'time_zone'\n        }\n    }\n});\n\n// ---------------------------\n// EXPORT\n// ---------------------------\n\nexport default geolocator;\n\n// ---------------------------\n// ADDITIONAL DOCUMENTATION\n// ---------------------------\n\n/**\n *  `Coordinates` inner type that specifies the geographic position of the\n *  device. The position is expressed as a set of geographic coordinates\n *  together with information about heading and speed.\n *\n *  This is generally returned as part of the\n *  {@link ?api=geolocator#geolocator~Location|`Location` result object}.\n *\n *  @typedef geolocator~Coordinates\n *  @type Object\n *\n *  @property {Number} latitude\n *         Specifies the latitude estimate in decimal degrees. The value\n *         range is [-90.00, +90.00].\n *  @property {Number} longitude\n *         Specifies the longitude estimate in decimal degrees. The value\n *         range is [-180.00, +180.00].\n *  @property {Number} altitude\n *         Specifies the altitude estimate in meters above the WGS 84\n *         ellipsoid.\n *  @property {Number} accuracy\n *         Specifies the accuracy of the latitude and longitude estimates in\n *         meters.\n *  @property {Number} altitudeAccuracy\n *         Specifies the accuracy of the altitude estimate in meters.\n *  @property {Number} heading\n *         Specifies the device's current direction of movement in degrees\n *         counting clockwise relative to true north.\n *  @property {Number} speed\n *         Specifies the device's current ground speed in meters per second.\n */\n\n/**\n *\t`Address` inner type that specifies the address of the fetched location.\n *\tThe address is expressed as a set of political and locality components.\n *\n *  This is generally returned as part of the\n *  {@link ?api=geolocator#geolocator~Location|`Location` result object}.\n *\n *  @typedef geolocator~Address\n *  @type Object\n *\n *  @property {String} commonName\n *         Indicates a point of interest, a premise or colloquial area name for\n *         the fetched location, if any.\n *  @property {String} streetNumber\n *         Indicates the precise street number of the fetched location, if any.\n *  @property {String} street\n *         Indicates the street name of the fetched location, if any.\n *  @property {String} route\n *         Indicates the route name of the fetched location, if any.\n *  @property {String} neighborhood\n *         Indicates the neighborhood name of the fetched location, if any.\n *  @property {String} town\n *         Indictes the town of the fetched location, if any.\n *  @property {String} city\n *         Indicates the city of the fetched location.\n *  @property {String} region\n *         Indicates the political region name of the fetched location, if any.\n *  @property {String} postalCode\n *         Indicates the postal code of the fetched location, if any.\n *  @property {String} state\n *         Indicates the state of the fetched location, if any.\n *  @property {String} stateCode\n *         Indicates the state code of the fetched location, if any.\n *  @property {String} country\n *         Indicates the national political entity of the fetched location.\n *  @property {String} countryCode\n *         Indicates the ISO alpha-2 country code of the fetched location.\n */\n\n/**\n *\t`TimeZone` inner type that specifies time offset data for the fetched\n *\tlocation on the surface of the earth.\n *\n *  This is generally returned as part of the\n *  {@link ?api=geolocator#geolocator~Location|`Location` result object}.\n *\n *  @typedef geolocator~TimeZone\n *  @type Object\n *\n *  @property {String} id\n *         The ID of the time zone, such as `\"America/Los_Angeles\"` or\n *         `\"Australia/Sydney\"`. These IDs are defined in the\n *         {@link http://www.iana.org/time-zones|IANA Time Zone Database},\n *         which is also available in searchable format in Wikipedia's\n *         {@link http://en.wikipedia.org/wiki/List_of_tz_database_time_zones|List of tz database time zones}.\n *  @property {String} name\n *         The long form name of the time zone. This field will be localized if\n *         the Geolocator `language` is configured. e.g. `\"Pacific Daylight Time\"`\n *         or `\"Australian Eastern Daylight Time\"`.\n *  @property {String} abbr\n *         The abbreviation of the time zone.\n *  @property {Number} dstOffset\n *         The offset for daylight-savings time in seconds. This will be zero\n *         if the time zone is not in Daylight Savings Time during the specified\n *         timestamp.\n *  @property {Number} rawOffset\n *         The offset from UTC (in seconds) for the given location. This does\n *         not take into effect daylight savings.\n */\n\n/**\n *\t`MapData` inner type that provides references to the components of a\n *\tcreated Google Maps `Map` and the containing DOM element.\n *\n *  This is generally returned as part of the\n *  {@link ?api=geolocator#geolocator~Location|`Location` result object}.\n *\n *  @typedef geolocator~MapData\n *  @type Object\n *\n *  @property {HTMLElement} element\n *         DOM element which a (Google) map is created within.\n *  @property {google.maps.Map} instance\n *         Instance of a Google Maps `Map` object.\n *  @property {google.maps.Marker} marker\n *         Instance of a Google Maps `Marker` object, if any.\n *  @property {google.maps.InfoWindow} infoWindow\n *         Instance of a Google Maps `InfoWindow` object, if any.\n *  @property {Object} options\n *         Arbitrary object of applied map options.\n */\n\n/**\n *\t`Location` inner type that specifies geographic coordinates, address and\n *\ttime zone information for the fetched location.\n *\n *  This result object is passed to the callbacks of the corresponding\n *  asynchronous Geolocator methods (such as `.locate()` method), as the second\n *  argument. The contents of this object will differ for various  Geolocator\n *  methods, depending on the configured method options.\n *\n *  @typedef geolocator~Location\n *  @type Object\n *\n *  @property {Coordinates} coords\n *         Specifies the geographic location of the device. The location is\n *         expressed as a set of geographic coordinates together with\n *         information about heading and speed.\n *         See {@link #geolocator~Coordinates|`geolocator~Coordinates` type}\n *         for details.\n *  @property {Address} address\n *         Specifies the address of the fetched location. The address is\n *         expressed as a set of political and locality components.\n *         This property might be `undefined` if `addressLookup` option is not\n *         enabled for the corresponding method.\n *         See {@link #geolocator~Address|`geolocator~Address` type}\n *         for details.\n *  @property {String} formattedAddress\n *         The human-readable address of this location. Often this address is\n *         equivalent to the \"postal address,\" which sometimes differs from\n *         country to country.\n *  @property {Boolean} targetReached\n *         Specifies whether the defined target coordinates is reached.\n *         This property is only available for\n *         {@link #geolocator.watch|`geolocator.watch()`} method when `target`\n *         option is defined.\n *  @property {String} type\n *         Type of the location. See\n *         {@link #geolcoator.LocationType|`geolcoator.LocationType` enumeration}\n *         for details.\n *  @property {String} placeId\n *         A unique identifier that can be used with other Google APIs.\n *  @property {String} flag\n *         URL of the country flag image, in SVG format. This property exists\n *         only if address information is available.\n *  @property {TimeZone} timezone\n *         Specifies time offset data for the fetched location on the surface of\n *         the earth. See {@link #geolocator~TimeZone|`geolocator~TimeZone` type}\n *         for details.\n *  @property {MapData} map\n *         Provides references to the components of a created Google Maps `Map`\n *         and the containing DOM element. See\n *         {@link #geolocator~MapData|`geolocator~MapData` type} for details.\n *  @property {String} staticMap\n *         URL of a static Google map image, for the location.\n *  @property {Number} timestamp\n *         Specifies the time when the location information was retrieved and\n *         the `Location` object created.\n */\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/core/geolocator.js\n **/","\nlet _toString = Object.prototype.toString;\n\n/**\n * Simple utility methods; internally used within Geolocator core;\n * made publically accessible.\n * @type {Object}\n * @readonly\n *\n * @license MIT\n * @copyright 2016, Onur Yıldırım (onur@cutepilot.com)\n */\nconst utils = {\n\n    noop() {},\n\n    // ---------------------------\n    // Validation\n    // ---------------------------\n\n    /**\n     * Checks if the type of the given value is `String`.\n     * @memberof utils\n     *\n     * @param {*} value - Value to be checked.\n     * @returns {Boolean}\n     */\n    isString(value) {\n        return typeof value === 'string';\n    },\n\n    isStringSet(value) {\n        return typeof value === 'string' && value.trim().length > 0;\n    },\n\n    /**\n     * Checks if the type of the given value is `Number`.\n     * @memberof utils\n     *\n     * @param {*} value - Value to be checked.\n     * @returns {Boolean}\n     */\n    isNumber(value) {\n        return typeof value === 'number';\n    },\n\n    /**\n     * Checks if the type of the given value is an `Object` or `Function`.\n     * @memberof utils\n     *\n     * @param {*} value - Value to be checked.\n     * @returns {Boolean}\n     */\n    isObject(value) {\n        let type = typeof value;\n        return Boolean(value) && (type === 'object' || type === 'function');\n    },\n\n    /**\n     * Checks if the type of the given value is `Function`.\n     * @memberof utils\n     *\n     * @param {*} value - Value to be checked.\n     * @returns {Boolean}\n     */\n    isFunction(value) {\n        return typeof value === 'function';\n    },\n\n    /**\n     * Checks if the type of the given value is `Array`.\n     * @memberof utils\n     *\n     * @param {*} value - Value to be checked.\n     * @returns {Boolean}\n     */\n    isArray(value) {\n        return Boolean(value) && _toString.call(value) === '[object Array]';\n    },\n\n    /**\n     * Checks if the given object is a non-empty `Array`.\n     * @memberof utils\n     *\n     * @param {*} array - Object to be checked.\n     * @returns {Boolean}\n     */\n    isFilledArray(array) {\n        return utils.isArray(array) && array.length > 0;\n    },\n\n    /**\n     * Checks if the given value is a plain `Object`.\n     * @memberof utils\n     *\n     * @param {*} value - Value to be checked.\n     * @returns {Boolean}\n     */\n    isPlainObject(value) {\n        return Boolean(value)\n            && typeof value === 'object'\n            && _toString.call(value) === '[object Object]';\n    },\n\n    /**\n     * Checks if the given value is a `Date`.\n     * @memberof utils\n     *\n     * @param {*} value - Value to be checked.\n     * @returns {Boolean}\n     */\n    isDate(value) {\n        return Boolean(value) && _toString.call(value) === '[object Date]';\n    },\n\n    /**\n     * Checks if the given object is a DOM element.\n     * @memberof utils\n     *\n     * @param {Object} object - Object to be checked.\n     * @returns {Boolean}\n     */\n    isElement(object) {\n        if (!object) return false;\n        return object instanceof HTMLElement\n            || (typeof object === 'object' && object.nodeType === 1);\n    },\n\n    /**\n     * Checks if the given object is a DOM node.\n     * @memberof utils\n     *\n     * @param {Object} object - Object to be checked.\n     * @returns {Boolean}\n     */\n    isNode(object) {\n        if (!object) return false;\n        return object instanceof Node\n            || (typeof object === 'object' && typeof object.nodeType === 'number');\n    },\n\n    /**\n     * Checks if the given object is a jQuery instance.\n     * This will still return `false` if the jQuery instance has no items.\n     * @memberof utils\n     *\n     * @param {Object} object - Object to be checked.\n     * @returns {Boolean}\n     */\n    isJQueryObject(object) {\n        if (!object) return false;\n        return ('jQuery' in window && object instanceof window.jQuery && Boolean(object[0]));\n            // http://api.jquery.com/jquery-2/\n            // || (typeof object === 'object' && Boolean(object.jquery));\n    },\n\n    /**\n     * Checks if the type of the given value is an HTML5 `PositionError`.\n     * @memberof utils\n     *\n     * @param {*} value - Value to be checked.\n     * @returns {Boolean}\n     */\n    isPositionError(value) {\n        return Boolean(value) && _toString.call(value) === '[object PositionError]';\n    },\n\n    /**\n     * Checks if the given value is an instance of `Error` or HTML5 `PositionError`.\n     * @memberof utils\n     *\n     * @param {*} value - Value to be checked.\n     * @returns {Boolean}\n     */\n    isError(value) {\n        return (value instanceof Error) || utils.isPositionError(value);\n    },\n\n    // ---------------------------\n    // String\n    // ---------------------------\n\n    /**\n     * Removes the query string portion from the given URL string.\n     * @memberof utils\n     *\n     * @param {String} str - String to be processed.\n     * @returns {String} - Returns the rest of the string.\n     */\n    removeQuery(str) {\n        return str.replace(/\\?.*$/, '');\n    },\n\n    /**\n     * Removes the protocol portion from the given URL string.\n     * @memberof utils\n     *\n     * @param {String} str - String to be processed.\n     * @returns {String} - Returns the rest of the string.\n     */\n    removeProtocol(str) {\n        return str.replace(/^(.*:)?\\/\\//, '');\n    },\n\n    /**\n     * Sets the protocol of the given URL.\n     * @memberof utils\n     *\n     * @param {String} url\n     *        The URL to be modified.\n     * @param {Boolean} [https]\n     *        Specifies whether to set the protocol to HTTPS.\n     *        If omitted, current page protocol will be used.\n     *\n     * @returns {String} - The modified URL string.\n     */\n    setProtocol(url, https) {\n        let p;\n        if (https === undefined || https === null) {\n            p = window.location.protocol;\n        } else {\n            p = https ? 'https:' : 'http:';\n        }\n        url = utils.removeProtocol(url);\n        return `${p}//${url}`;\n    },\n\n    /**\n     * Removes both the leading and trailing dots from the given string.\n     * @memberof utils\n     *\n     * @param {String} str - String to be processed.\n     * @returns {String} - Returns the rest of the string.\n     */\n    trimDots(str) {\n        return str.replace(/^\\.+?(.*?)\\.+?$/g, '$1');\n    },\n\n    /**\n     * URL-Encodes the given string. Note that the encoding is done Google's\n     * way; that is, spaces are replaced with `+` instead of `%20`.\n     * @memberof utils\n     *\n     * @param {String} str - String to be processed.\n     * @returns {String} - Returns the encoded string.\n     */\n    encodeURI(str) {\n        return encodeURIComponent(str).replace(/%20/g, '+');\n    },\n\n    /**\n     * URL-Decodes the given string. This is the reverse of `utils.encodeURI()`;\n     * so pluses (`+`) are replaced with spaces.\n     * @memberof utils\n     *\n     * @param {String} str - String to be processed.\n     * @returns {String} - Returns the decoded string.\n     */\n    decodeURI(str) {\n        return decodeURIComponent(str.replace(/\\+/g, '%20'));\n    },\n\n    /**\n     * Converts the given value to string.\n     * `null` and `undefined` converts to empty string.\n     * If value is a function, it's native `toString()` method is used.\n     * Otherwise, value is coerced.\n     * @memberof utils\n     *\n     * @param {*} value - String to be converted.\n     * @returns {String} - Returns the result string.\n     */\n    toString(value) {\n        if (value === null || value === undefined) return '';\n        if (value.toString && utils.isFunction(value.toString)) {\n            return value.toString();\n        }\n        return String(value);\n    },\n\n    /**\n     * Generates a random string with the number of characters.\n     * @memberof utils\n     *\n     * @param {Number} [len=1] - Length of the string.\n     * @returns {String} - Returns a random string.\n     */\n    randomString(len) {\n        if (!len || !utils.isNumber(len)) len = 1;\n        len = -Math.abs(len);\n        return Math.random().toString(36).slice(len);\n    },\n\n    /**\n     * Gets the abbreviation of the given phrase.\n     * @memberof utils\n     *\n     * @param {String} str\n     *        String to abbreviate.\n     * @param {Object} [options]\n     *        Abbreviation options.\n     *     @param {Boolean} [options.upper=true]\n     *            Whether to convert to upper-case.\n     *     @param {Boolean} [options.dots=true]\n     *            Whether to add dots after each abbreviation.\n     *\n     * @returns {String} - Returns the abbreviation of the given phrase.\n     */\n    abbr(str, options) {\n        options = utils.extend({\n            upper: true,\n            dots: true\n        }, options);\n        let d = options.dots ? '.' : '',\n            s = str.match(/(\\b\\w)/gi).join(d) + d;\n        return options.upper ? s.toUpperCase() : s;\n    },\n\n    /**\n     * Builds URI parameters from the given object.\n     * Note: This does not iterate deep objects.\n     * @memberof utils\n     *\n     * @param {Object} obj - Object to be processed.\n     * @param {Object} options - Parameterize options.\n     *     @param {Boolean} [options.encode=true]\n     *            Whether to encode URI components.\n     *     @param {String} [options.operator=\"=\"]\n     *     @param {String} [options.separator=\"&\"]\n     *     @param {Array} [options.include]\n     *            Keys to be included in the output params. If defined,\n     *            `options.exclude` is ignored.\n     *     @param {Array} [options.exclude]\n     *            Keys to be excluded from the output params.\n     *\n     * @returns {String} - URI parameters string.\n     */\n    params(obj, options) {\n        if (!utils.isPlainObject(obj) || Object.keys(obj).length === 0) {\n            return '';\n        }\n\n        options = utils.extend({\n            encode: true,\n            operator: '=',\n            separator: '&',\n            include: undefined,\n            exclude: undefined\n        }, options);\n\n        let params = [],\n            inc = utils.isArray(options.include) ? options.include : null,\n            exc = !inc && utils.isArray(options.exclude) ? options.exclude : null;\n        utils.forIn(obj, (value, key) => {\n            if ((!inc || inc.indexOf(key) >= 0)\n                    && (!exc || exc.indexOf(key) < 0)) {\n                let v = utils.toString(value);\n                v = options.encode ? utils.encodeURI(v) : v;\n                let k = options.encode ? utils.encodeURI(key) : key;\n                params.push(k + options.operator + v);\n            }\n        });\n\n        return params.join(options.separator);\n    },\n\n    /**\n     * Gets the object from the given object notation string.\n     * @private\n     *\n     * @param {String} notation - Object notation.\n     * @returns {*} - Any existing object.\n     */\n    notateGlobalObj(notation) {\n        notation = utils.trimDots(notation);\n        let levels = notation.split('.'),\n            o = window;\n        if (levels[0] === 'window' || levels[0] === 'document') {\n            levels.shift();\n        }\n        levels.forEach(note => {\n            o = o[note];\n        });\n        return o;\n    },\n\n    // ---------------------------\n    // Object\n    // ---------------------------\n\n    /**\n     * Iterates over own properties of an object invoking a callback for each\n     * property.\n     * @memberof utils\n     *\n     * @param {Object} obj\n     *        Object to be processed.\n     * @param {Function} callback\n     *        Callback function with the following signature:\n     *        `function (value, key, object) { ... }`.\n     *        Explicitly returning `false` will exit the iteration early.\n     * @returns {void}\n     */\n    forIn(obj, callback) {\n        let k;\n        for (k in obj) {\n            // if (obj.hasOwnProperty(k)) {} // Do this inside callback if needed.\n            if (callback(obj[k], k, obj) === false) break;\n        }\n    },\n\n    /**\n     * Extends the given object with the specified sources.\n     * Right most source overwrites the previous.\n     * NOTE: This is not a full implementation. Use with caution.\n     * @memberof utils\n     *\n     * @param {Object} destination\n     *        Destionation Object that will be extended and holds the default\n     *        values.\n     * @param {...Object} sources\n     *        Source objects to be merged.\n     *\n     * @returns {Object} - Returns the extended object.\n     */\n    extend(destination, ...sources) {\n        if (!utils.isObject(destination)) return {};\n        let key, value;\n        sources.forEach(source => {\n            for (key in source) { // eslint-disable-line\n                value = source[key];\n                if (utils.isArray(value)) {\n                    destination[key] = value.concat();\n                } else if (utils.isDate(value)) {\n                    destination[key] = new Date(value);\n                } else if (utils.isFunction(value)) { // should be before object\n                    destination[key] = value;\n                } else if (utils.isObject(value)) {\n                    destination[key] = utils.extend({}, value);\n                } else {\n                    destination[key] = value;\n                }\n            }\n        });\n        return destination;\n    },\n\n    /**\n     * Clones the given object.\n     * NOTE: This is not a full implementation. Use with caution.\n     * @memberof utils\n     *\n     * @param {Object} obj\n     *        Target Object to be cloned.\n     * @param {Object|Array} [options]\n     *        Clone options or array of keys to be cloned.\n     *     @param {Array} [options.keys]\n     *            Keys of the properties to be cloned.\n     *     @param {Boolean} [options.own=true]\n     *            Whether to clone own properties only. This is only effective\n     *            if `keys` is not defined.\n     *\n     * @returns {Object} - Returns the cloned object.\n     */\n    clone(obj, options) {\n        if (!obj) return {};\n\n        if (utils.isArray(options)) {\n            options = { keys: options };\n        }\n        options = utils.extend({\n            keys: null,\n            own: true\n        }, options);\n\n        let include,\n            cloned = {};\n\n        utils.forIn(obj, (value, key) => {\n            include = options.keys\n                ? options.keys.indexOf(key) >= 0\n                : (options.own && obj.hasOwnProperty(key)) || !options.own;\n            if (include) {\n                if (utils.isObject(value)) {\n                    cloned[key] = utils.clone(value, options);\n                } else {\n                    cloned[key] = value;\n                }\n            }\n        });\n        return cloned;\n    },\n\n    /**\n     *  Maps the values of the given object to a schema to re-structure a new\n     *  object.\n     *  @memberof utils\n     *\n     *  @param {Object} obj\n     *         Original object to be mapped.\n     *  @param {Object} schema\n     *         Schema to be used to map the object.\n     *\n     *  @returns {Object} - Mapped object.\n     */\n    mapToSchema(obj, schema) {\n        let mapped = {};\n        utils.forIn(schema, (value, key) => {\n            if (utils.isPlainObject(value)) {\n                mapped[key] = utils.mapToSchema(obj, value);\n            } else {\n                mapped[key] = obj[value];\n            }\n        });\n        return mapped;\n    },\n\n    // ---------------------------\n    // Misc\n    // ---------------------------\n\n    /**\n     * Safely parses the given JSON `String` into an `Object`.\n     * The only difference from `JSON.parse()` is that this method does not\n     * throw for invalid input. Instead, returns `null`.\n     * @memberof utils\n     *\n     * @param {String} str - JSON string to be parsed\n     * @returns {Object|null} - Returns the parsed `Object` or `null` if the\n     * input is invalid.\n     */\n    safeJsonParse(str) {\n        let o = null;\n        try {\n            o = JSON.parse(str);\n        } catch (e) {}\n        return o;\n    },\n\n    /**\n     * Gets a timestamp that is seconds or milliseconds since midnight,\n     * January 1, 1970 UTC.\n     * @memberof utils\n     *\n     * @param {Boolean} [seconds=false]\n     *        Specifies whether seconds should be returned instead of\n     *        milliseconds.\n     *\n     * @returns {Number} - Returns seconds or milliseconds since midnight,\n     * January 1, 1970 UTC.\n     */\n    time(seconds) {\n        let ts = Date.now();\n        return seconds ? parseInt(ts / 1000, 10) : ts;\n    }\n\n};\n\nexport default utils;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/lib/utils.js\n **/","import utils from './utils';\n\n/**\n * Utility for making `XMLHttpRequest` and `JSONP` requests.\n *\n * @license MIT\n * @copyright 2016, Onur Yıldırım (onur@cutepilot.com)\n */\nclass fetch {\n\n    // https://html.spec.whatwg.org/multipage/scripting.html#script\n\n    /**\n     * Makes a JSONP (GET) request by injecting a script tag in the browser.\n     * Note that using JSONP has some security implications. As JSONP is really\n     * javascript, it can do everything else javascript can do, so you need to\n     * trust the provider of the JSONP data.\n     * @see https://en.wikipedia.org/wiki/JSONP\n     * @memberof fetch\n     *\n     * @param {Object|String} options - Required. Either the URL string which\n     *     will set other options to defaults or an options object with the\n     *     following properties.\n     *     @param {String} options.url\n     *            Source URL to be called.\n     *     @param {String} [options.type]\n     *            The MIME type that identifies the scripting language of the\n     *            code referenced within the script element.\n     *            e.g. `\"text/javascript\"`\n     *     @param {String} [options.charset]\n     *            Indicates the character encoding of the external resource.\n     *            e.g. `\"utf-8\"`.\n     *     @param {Boolean} [options.async=true]\n     *            Indicates whether or not to perform the operation\n     *            asynchronously. See {@link http://caniuse.com/#feat=script-async|browser support}.\n     *     @param {Boolean} [options.defer=false]\n     *            Indicates whether the script should be executed when the page\n     *            has finished parsing. See {@link http://caniuse.com/#feat=script-defer|browser support}.\n     *     @param {String} [options.crossorigin]\n     *            Indicates the CORS setting for the script element being\n     *            injected. Note that this attribute is not widely supported.\n     *            Valid values: `\"anonymous\"`, `\"use-credentials\"`.\n     *            See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes|CORS settings}.\n     *     @param {Number} [options.timeout=0]\n     *            The number of milliseconds a request can take before\n     *            automatically being terminated. `0` disables timeout.\n     *     @param {Boolean} [options.clean=false]\n     *            Whether to remove the loaded script from DOM when the\n     *            operation ends. Note that the initial source might load\n     *            additional sources which are not deteceted or removed. Only\n     *            the initial source is removed.\n     *     @param {Object} [options.params]\n     *            Optional query parameters to be appended at the end of the URL.\n     *            e.g. `{ key: \"MY-KEY\" }`\n     *            You can also include the JSONP callback name parameter here\n     *            but if you want the object to be passed to the callback\n     *            argument of this method, use `options.callbackParam` to set\n     *            the callback parameter.\n     *     @param {String} [options.callbackParam]\n     *            If the endpoint supports JSONP callbacks, you can set the\n     *            callback parameter with this setting. This will enable a\n     *            second `obj` argument in the callback of this method which is\n     *            useful if the JSONP source invokes the callback with an\n     *            argument.\n     *     @param {String} [options.rootName]\n     *            The name (or notation) of the object that the generated JSONP\n     *            callback function should be assigned to. By default, this is\n     *            the `window` object but you can set this to a custom object\n     *            notation; for example, to prevent global namespace polution.\n     *            Note that this root object has to be globally accessible for\n     *            this to work. e.g. `\"window.myObject\"` (as string)\n     * @param {Function} [callback]\n     *        The callback function that will be executed when the script is\n     *        loaded. This callback has the following signature:\n     *        `function (err, obj) { ... }`. Note that the second argument\n     *        `obj` will always be `undefined` if the source endpoint does not\n     *        support JSONP callbacks or a callback param is not set explicitly\n     *        via `options.callbackParam` (or if the source does not invoke the\n     *        jsonp with an argument). However, the function will always execute\n     *        when the script loads or an error occurs.\n     *\n     * @returns {void}\n     *\n     * @example\n     * var opts1 = {\n     * \t   url: 'some/api',\n     * \t   callbackParam: 'jsonCallback',\n     * \t   params: { key: 'MY-KEY' }\n     * };\n     * // This will load the following source:\n     * // some/api?jsonCallback={auto-generated-fn-name}&key=MY-KEY\n     * fetch.jsonp(opts1, function (err, obj) {\n     * \t   console.log(obj); // some object\n     * });\n     *\n     * var opts2 = {\n     * \t   url: 'some/api',\n     * \t   params: {\n     * \t\t   key: 'MY-KEY',\n     * \t\t   jsonCallback: 'my-fn-name'\n     * \t   }\n     * };\n     * // This will load the following source:\n     * // some/api?jsonCallback=my-fn-name&key=MY-KEY\n     * fetch.jsonp(options, function (err, obj) {\n     * \t   console.log(obj); // undefined\n     * \t   // still executes, catch errors here\n     * });\n     * // JSON callback should be explicitly set.\n     * window['my-fn-name'] = function (obj) {\n     * \t   console.log(obj); // some object\n     * };\n     */\n    static jsonp(options, callback) {\n        let timeout;\n\n        callback = utils.isFunction(callback)\n            ? callback\n            : utils.noop;\n\n        if (utils.isString(options)) {\n            options = { url: options };\n        }\n\n        if (utils.isPlainObject(options)) {\n            options = utils.extend({\n                // type: undefined,\n                async: true,\n                defer: false,\n                // crossorigin: undefined,\n                timeout: 0,\n                params: {},\n                // callbackParam: undefined,\n                // rootName: undefined,\n                clean: true\n            }, options);\n        } else {\n            return callback(new Error('No options or target URL is provided.'));\n        }\n\n        if (utils.isString(options.url) === false || options.url.trim() === '') {\n            return callback(new Error('No target URL is provided.'));\n        }\n\n        let script = document.createElement('script'),\n            cbParamSet = utils.isString(options.callbackParam)\n                && options.callbackParam.trim() !== '',\n            cbFnName,\n            root,\n            rootNameSet = utils.isString(options.rootName)\n                && options.rootName !== 'window'\n                && options.rootName !== 'document'\n                && options.rootName.trim() !== '';\n\n        if (cbParamSet) {\n            cbFnName = '_jsonp_' + utils.randomString(10);\n            options.params[options.callbackParam] = rootNameSet\n                ? `${options.rootName}.${cbFnName}`\n                : cbFnName;\n        }\n        let query = utils.params(options.params) || '',\n            qMark = options.url.indexOf('?') >= 0 ? '&' : '?',\n            url = query ? `${options.url}${qMark}${query}` : options.url;\n        // console.log(url);\n\n        function execCb(err, timeUp, obj) {\n            if (timeout) {\n                clearTimeout(timeout);\n                timeout = null;\n            }\n            if ((timeUp || options.clean) && script.parentNode) {\n                script.parentNode.removeChild(script);\n            }\n            // delete the jsonp callback function\n            if (rootNameSet) {\n                delete root[cbFnName];\n            }\n            callback(err, obj);\n        }\n\n        if (cbFnName) {\n            let fn = obj => {\n                execCb(null, false, obj);\n            };\n            root = rootNameSet\n                // ? window[options.rootName][cbFnName] = fn;\n                ? utils.notateGlobalObj(options.rootName) // if rootName is dot-notation.\n                : window;\n            root[cbFnName] = fn;\n        } else if (script.readyState) { // IE < 11\n            script.onreadystatechange = () => {\n                if (script.readyState === 'loaded'\n                        || script.readyState === 'complete') {\n                    script.onreadystatechange = null;\n                    execCb(null);\n                }\n            };\n        } else { // IE 11+\n            script.onload = () => {\n                execCb(null);\n            };\n        }\n\n        script.onerror = error => {\n            let errMsg = 'Could not load source at ' + utils.removeQuery(options.url);\n            if (error) {\n                errMsg += '\\n' + (error.message || error);\n            }\n            execCb(new Error(errMsg));\n        };\n\n        if (options.type) {\n            script.type = options.type;\n        }\n        if (options.charset) {\n            script.charset = options.charset;\n        }\n        if (options.async) {\n            script.async = true;\n        }\n        if (options.defer) {\n            script.defer = true;\n        }\n        if (options.crossorigin) {\n            script.crossorigin = options.crossorigin;\n        }\n\n        script.src = url;\n        document.getElementsByTagName('head')[0].appendChild(script);\n\n        // Timeout\n        if (utils.isNumber(options.timeout) && options.timeout > 0) {\n            timeout = setTimeout(() => {\n                script.src = '';\n                execCb(new Error('Operation timed out.'), true);\n            }, options.timeout);\n        }\n    }\n\n    /**\n     * Makes an XMLHttpRequest with the given parameters.\n     * Note that `\"Access-Control-Allow-Origin\"` header should be present on\n     * the requested resource. Otherwise, the request will not be allowed.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest|XMLHttpRequest}.\n     * @memberof fetch\n     *\n     * @param {Object|String} options\n     *        Either the URL string which will set other options to defaults or\n     *        the full options object.\n     *     @param {String} options.url\n     *            Target URL to be called.\n     *     @param {String} [options.method=\"GET\"]\n     *            HTTP method.\n     *     @param {*} [options.data]\n     *            Data to be sent with the request.\n     *     @param {Number} [options.timeout]\n     *            The number of milliseconds a request can take before\n     *            automatically being terminated. `0` disables timeout.\n     *     @param {Boolean} [options.withCredentials=false]\n     *            Indicates whether or not cross-site Access-Control requests\n     *            should be made using credentials such as cookies or\n     *            authorization headers.\n     *     @param {Boolean} [options.async=true]\n     *            Indicating whether or not to perform the operation\n     *            asynchronously. If this value is false, the `send()` method\n     *            does not return until the response is received. If `true`,\n     *            notification of a completed transaction is provided using\n     *            event listeners. This must be `true` if the multipart\n     *            attribute is `true`, or an exception will be thrown.\n     *     @param {String} [options.mimeType]\n     *            If set, overrides the MIME type returned by the server. This\n     *            may be used, for example, to force a stream to be treated and\n     *            parsed as `text/xml`, even if the server does not report it as\n     *            such.\n     *     @param {Object} [options.headers]\n     *            Sets the HTTP request headers. Each key should be a header\n     *            name with a value. e.g. `{ 'Content-Length': 50 }`. For\n     *            security reasons, some headers cannot be set and can only be\n     *            controlled by the user agent.\n     *     @param {String} [options.username=\"\"]\n     *            User name to use for authentication purposes.\n     *     @param {String} [options.password=\"\"]\n     *            Password to use for authentication purposes.\n     * @param {Function} [callback]\n     *        The callback function in the following signature:\n     *        `function (err, xhr) { ... }`\n     *        Note that `xhr` object is always passed regardless of an error.\n     *\n     * @returns {void}\n     */\n    static xhr(options, callback) {\n        let xhr, err;\n\n        if ('XMLHttpRequest' in window) {\n            xhr = new XMLHttpRequest();\n        } else {\n            throw new Error('XMLHttpRequest is not supported!');\n        }\n\n        let hasCallback = utils.isFunction(callback);\n        callback = hasCallback\n            ? callback\n            : utils.noop;\n\n        if (utils.isString(options)) {\n            options = { url: options };\n        }\n\n        if (utils.isPlainObject(options)) {\n            options = utils.extend({\n                method: 'GET',\n                data: undefined,\n                async: true,\n                timeout: 0, // no timeout\n                withCredentials: false,\n                mimeType: undefined,\n                username: '',\n                password: ''\n            }, options);\n        } else {\n            callback(new Error('No options or target URL is provided.'));\n        }\n\n        if (utils.isString(options.url) === false) {\n            callback(new Error('No target URL is provided.'));\n        }\n\n        options.username = String(options.username);\n        options.password = String(options.password);\n        options.method = options.method.toUpperCase();\n        if (options.method !== 'POST' && options.method !== 'PUT') {\n            options.data = undefined;\n        }\n        // console.log(JSON.stringify(options));\n\n        if (hasCallback) {\n            xhr.onreadystatechange = () => {\n                if (xhr.readyState === fetch.XHR_READY_STATE.DONE) {\n                    if (xhr.status === 200) {\n                        callback(null, xhr);\n                    } else {\n                        // let response = utils.safeJsonParse(xhr.responseText);\n                        // if (response && response.error)\n                        let crossDomain = xhr.status === 0\n                            ? '. Make sure you have permission if this is a cross-domain request.'\n                            : '';\n                        err = new Error(`The request returned status: ${xhr.status}${crossDomain}`);\n                        // console.log(xhr);\n                        callback(err, xhr);\n                    }\n                }\n            };\n\n            if (utils.isNumber(options.timeout) && options.timeout > 0) {\n                xhr.timeout = options.timeout;\n                xhr.ontimeout = () => {\n                    // xhr.abort();\n                    err = new Error('The request had timed out.');\n                    callback(err, xhr);\n                };\n            }\n        }\n        // console.log(options);\n        xhr.open(options.method, options.url, options.async, options.username, options.password);\n\n        // xhr.setRequestHeader() method should b called œafter open(), but\n        // before send().\n        if (utils.isPlainObject(options.headers)) {\n            Object.keys(options.headers).forEach(key => {\n                let value = options.headers[key];\n                xhr.setRequestHeader(key, value);\n            });\n        }\n\n        // xhr.overrideMimeType() method must be called before send().\n        if (options.mimeType) {\n            xhr.overrideMimeType(options.mimeType);\n        }\n\n        xhr.send(options.data);\n    }\n\n    /**\n     * Alias of `fetch.xhr()` with request method set to `\"GET\"` by default.\n     * @memberof fetch\n     *\n     * @param {Object} options\n     *        Either the URL string which will set other options to defaults or\n     *        the full options object. See `fetch.xhr()` method options for\n     *        details.\n     * @param {Function} [callback]\n     *        The callback function in the following signature:\n     *        `function (err, xhr) { ... }`\n     *        Note that `xhr` object is always passed regardless of an error.\n     * @returns {void}\n     */\n    static get(options, callback) {\n        return fetch.xhr(options, callback);\n    }\n\n    /**\n     * Alias of `fetch.xhr()` with request method set to `\"POST\"` by default.\n     * @memberof fetch\n     *\n     * @param {Object} options\n     *        Either the URL string which will set other options to defaults or\n     *        the full options object. See `fetch.xhr()` method options for\n     *        details.\n     * @param {Function} [callback]\n     *        The callback function in the following signature:\n     *        `function (err, xhr) { ... }`\n     *        Note that `xhr` object is always passed regardless of an error.\n     * @returns {void}\n     */\n    static post(options, callback) {\n        return _xhr('POST', options, callback);\n    }\n\n    /**\n     * Alias of `fetch.xhr()` with request method set to `\"PUT\"` by default.\n     * @memberof fetch\n     *\n     * @param {Object} options\n     *        Either the URL string which will set other options to defaults or\n     *        the full options object. See `fetch.xhr()` method options for\n     *        details.\n     * @param {Function} [callback]\n     *        The callback function in the following signature:\n     *        `function (err, xhr) { ... }`\n     *        Note that `xhr` object is always passed regardless of an error.\n     * @returns {void}\n     */\n    static put(options, callback) {\n        return _xhr('PUT', options, callback);\n    }\n\n    /**\n     * Alias of `fetch.xhr()` with request method set to `\"DELETE\"` by default.\n     * @memberof fetch\n     *\n     * @param {Object} options\n     *        Either the URL string which will set other options to defaults or\n     *        the full options object. See `fetch.xhr()` method options for\n     *        details.\n     * @param {Function} [callback]\n     *        The callback function in the following signature:\n     *        `function (err, xhr) { ... }`\n     *        Note that `xhr` object is always passed regardless of an error.\n     * @returns {void}\n     */\n    static delete(options, callback) {\n        return _xhr('DELETE', options, callback);\n    }\n}\n\n/**\n *  @private\n */\nfunction _xhr(method, options, callback) {\n    options = utils.isString(options)\n        ? { url: options }\n        : options || {};\n    options.method = method;\n    return fetch.xhr(options, callback);\n}\n\n/**\n * Enumerates `XMLHttpRequest` ready states.\n * Not to be confused with `script.readyState`.\n * @memberof fetch\n *\n * @enum {Number}\n */\nfetch.XHR_READY_STATE = {\n    /**\n     * `xhr.open()` has not been called yet.\n     * @type {Number}\n     */\n    UNSENT: 0,\n    /**\n     * `xhr.send()` has been called.\n     * @type {Number}\n     */\n    OPENED: 1,\n    /**\n     * `xhr.send()` has been called, and headers and status are available.\n     * @type {Number}\n     */\n    HEADERS_RECEIVED: 2,\n    /**\n     * Downloading; responseText holds partial data.\n     * @type {Number}\n     */\n    LOADING: 3,\n    /**\n     * The operation is complete.\n     * @type {Number}\n     */\n    DONE: 4\n};\n\nexport default fetch;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/lib/fetch.js\n **/","import utils from '../lib/utils';\nimport fetch from '../lib/fetch';\nimport enums from './enums';\nimport GeoError from './geo.error';\n\n/**\n *  Helper methods.\n *\n *  @license MIT\n *  @copyright 2016, Onur Yıldırım (onur@cutepilot.com)\n *  @type {Object}\n *  @private\n */\nconst geoHelper = {\n\n    toGoogleCoords(coords) {\n        return {\n            lat: coords.lat || coords.latitude,\n            lng: coords.lng || coords.longitude\n        };\n    },\n\n    fromGoogleCoords(coords) {\n        return {\n            latitude: coords.latitude || coords.lat,\n            longitude: coords.longitude || coords.lng\n        };\n    },\n\n    // used for distance matrix origins and destinations\n    toPointList(arr) {\n        arr = utils.isArray(arr) ? arr : [arr];\n        return arr.map(o => {\n            return utils.isString(o) ? o : geoHelper.toGoogleCoords(o);\n        });\n    },\n\n    getGeocodeComps(comp) {\n        return {\n            route: comp.route,\n            locality: comp.locality,\n            administrative_area: comp.administrativeArea, // eslint-disable-line camelcase\n            postal_code: comp.postalCode, // eslint-disable-line camelcase\n            country: comp.country,\n            region: comp.region\n        };\n    },\n\n    // Geocode examples:\n    // address=1600+Amphitheatre+Parkway,+Mountain+View,+CA&key=API_KEY\n    // address=Winnetka&bounds=34.172684,-118.604794|34.236144,-118.500938&key=API_KEY\n    // address=santa+cruz&components=country:ES&key=API_KEY\n    // components=administrative_area:TX|country:US&key=API_KEY\n    // Reverse Geocode examples:\n    // latlng=40.714224,-73.961452&key=API_KEY\n    // place_id=ChIJd8BlQ2BZwokRAFUEcm_qrcA&key=API_KEY\n    buildGeocodeParams(options, reverse) {\n        let params = [],\n            e = utils.encodeURI;\n\n        if (reverse) {\n            if (options.placeId) {\n                params.push(`place_id=${options.placeId}`);\n            } else if (options.latitude && options.longitude) {\n                params.push(`latlng=${options.latitude},${options.longitude}`);\n            }\n        } else {\n            if (options.address) {\n                params.push(`address=${e(options.address)}`);\n            }\n\n            let geoComps = geoHelper.getGeocodeComps(options);\n            geoComps = utils.params(geoComps, { operator: ':', separator: '|' });\n            params.push(`components=${geoComps}`);\n\n            let b = options.bounds;\n            if (utils.isArray(b) && b.length === 4) {\n                params.push(`bounds=${b[0]},${b[1]}|${b[2]},${b[3]}`);\n            } else if (utils.isPlainObject(b) && Object.keys(b).length === 4) {\n                params.push(`bounds=${b.southwestLat},${b.southwestLng}|${b.northeastLat},${b.northeastLng}`);\n            }\n        }\n\n        params.push(`language=${options.language}`);\n        params.push(`key=${options.key}`);\n        return params.join('&');\n    },\n\n    // See https://developers.google.com/maps/documentation/geocoding/intro\n    formatGeocodeResults(results) {\n        if (!utils.isArray(results) || results.length <= 0) {\n            return {\n                location: null,\n                address: null,\n                formattedAddress: '',\n                type: null, // locationType\n                placeId: ''\n            };\n        }\n\n        let i, c,\n            o = {},\n            data = results[0],\n            comps = data.address_components;\n\n        for (i = 0; i < comps.length; i += 1) {\n            c = comps[i];\n            if (c.types && c.types.length > 0) {\n                o[c.types[0]] = c.long_name;\n                o[c.types[0] + '_s'] = c.short_name;\n            }\n        }\n\n        let geometry = data.geometry;\n        return {\n            coords: geometry && geometry.location ? {\n                latitude: geometry.location.lat,\n                longitude: geometry.location.lng\n            } : null,\n            address: {\n                commonName: o.point_of_interest\n                    || o.premise\n                    || o.subpremise\n                    || o.colloquial_area\n                    || '',\n                streetNumber: o.street_number || '',\n                street: o.administrative_area_level_4\n                    || o.administrative_area_level_3\n                    || o.route\n                    || '',\n                route: o.route || '',\n                neighborhood: o.neighborhood\n                    || o.administrative_area_level_5\n                    || o.administrative_area_level_4\n                    || '',\n                town: o.sublocality || o.administrative_area_level_2 || '',\n                city: o.locality || o.administrative_area_level_1 || '',\n                region: o.administrative_area_level_2\n                    || o.administrative_area_level_1\n                    || '',\n                postalCode: o.postal_code || '',\n                state: o.administrative_area_level_1 || '',\n                stateCode: o.administrative_area_level_1_s || '',\n                country: o.country || '',\n                countryCode: o.country_s || ''\n            },\n            formattedAddress: data.formatted_address,\n            type: geometry.location_type || '',\n            placeId: data.place_id,\n            timestamp: utils.time()\n        };\n    },\n\n    geocode(reverse, conf, options, callback) {\n        let opts = {};\n        if (utils.isString(options)) {\n            opts = {};\n            let prop = reverse ? 'placeId' : 'address';\n            opts[prop] = options;\n        } else if (utils.isPlainObject(options)) {\n            opts = options;\n        } else {\n            throw new GeoError(GeoError.Code.INVALID_PARAMETERS);\n        }\n\n        if (reverse) {\n            let coordsSet = utils.isNumber(options.latitude)\n                && utils.isNumber(options.longitude);\n            if (!utils.isString(options.placeId) && !coordsSet) {\n                throw new GeoError(GeoError.Code.INVALID_PARAMETERS);\n            }\n        }\n\n        opts = utils.extend({\n            key: conf.google.key || '',\n            language: conf.language || 'en',\n            raw: false\n        }, opts);\n\n        let query = geoHelper.buildGeocodeParams(opts, reverse),\n            url = utils.setProtocol(enums.URL.GOOGLE_GEOCODE, conf.https),\n            xhrOpts = {\n                url: `${url}?${query}`\n            };\n\n        fetch.xhr(xhrOpts, (err, xhr) => {\n            if (err) return callback(GeoError.create(err), null);\n\n            let response = utils.safeJsonParse(xhr.responseText),\n                gErr = GeoError.fromResponse(response);\n\n            if (gErr) return callback(gErr, null);\n\n            response = options.raw\n                ? response\n                : geoHelper.formatGeocodeResults(response.results);\n            callback(null, response);\n        });\n    },\n\n    // See https://developers.google.com/maps/documentation/distance-matrix/intro\n    // Raw Result Example:\n    // {\n    //    \"destination_addresses\" : [ \"San Francisco, CA, USA\", \"Victoria, BC, Canada\" ],\n    //    \"origin_addresses\" : [ \"Vancouver, BC, Canada\", \"Seattle, WA, USA\" ],\n    //    \"rows\" : [\n    //       {\n    //          \"elements\" : [\n    //             {\n    //                \"distance\" : { \"text\" : \"1,704 km\", \"value\" : 1704324 },\n    //                \"duration\" : { \"text\" : \"3 days 19 hours\", \"value\" : 327061\n    //                },\n    //                \"status\" : \"OK\"\n    //             },\n    //             {\n    //                \"distance\" : { \"text\" : \"138 km\", \"value\" : 138295 },\n    //                \"duration\" : { \"text\" : \"6 hours 44 mins\", \"value\" : 24236 },\n    //                \"status\" : \"OK\"\n    //             }\n    //          ]\n    //       },\n    //       {\n    //          \"elements\" : [\n    //             {\n    //                \"distance\" : { \"text\" : \"1,452 km\", \"value\" : 1451623 },\n    //                \"duration\" : { \"text\" : \"3 days 4 hours\", \"value\" : 275062 },\n    //                \"status\" : \"OK\"\n    //             },\n    //             {\n    //                \"distance\" : { \"text\" : \"146 km\", \"value\" : 146496 },\n    //                \"duration\" : { \"text\" : \"2 hours 52 mins\", \"value\" : 10324 },\n    //                \"status\" : \"OK\"\n    //             }\n    //          ]\n    //       }\n    //    ],\n    //    \"status\" : \"OK\"\n    // }\n    // Formatted to:\n\n    formatDistanceResults(results) {\n        if (!utils.isPlainObject(results)) {\n            return null;\n        }\n\n        let arr = [],\n            origins = results.originAddresses,\n            dests = results.destinationAddresses,\n            rows = results.rows;\n\n        // [\n        //     {\n        //          from: 'Vancouver, BC, Canada',\n        //          to: 'San Francisco, CA, USA',\n        //          distance: { value: 1704107, text: \"1,704 km\" },\n        //          duration: { value: 327025, text: \"3 days 19 hours\" },\n        //          fare: { currency: \"USD\", value: 6, text: \"$6.00\" }\n        //     },\n        //     ...\n        // ]\n\n        let e;\n        origins.forEach((origin, oIndex) => {\n            dests.forEach((dest, dIndex) => {\n                e = rows[oIndex].elements[dIndex];\n                arr.push({\n                    from: origin,\n                    to: dest,\n                    distance: e.distance,\n                    duration: e.duration,\n                    fare: e.fare,\n                    timestamp: utils.time()\n                });\n            });\n        });\n\n        return arr;\n    },\n\n    // Converts a map-styles object in to static map styles (formatted query-string params).\n    // See https://developers.google.com/maps/documentation/static-maps/styling\n    mapStylesToParams(styles) {\n        if (!styles) return '';\n        if (!utils.isArray(styles)) styles = [styles];\n        let result = [];\n        styles.forEach((v, i, a) => {\n            let style = '';\n            if (v.stylers) { // only if there is a styler object\n                if (v.stylers.length > 0) { // Needs to have a style rule to be valid.\n                    style += (v.hasOwnProperty('featureType') ? 'feature:' + v.featureType : 'feature:all') + '|';\n                    style += (v.hasOwnProperty('elementType') ? 'element:' + v.elementType : 'element:all') + '|';\n                    v.stylers.forEach((val, i, a) => {\n                        let propName = Object.keys(val)[0],\n                            propVal = val[propName].toString().replace('#', '0x');\n                        style += propName + ':' + propVal + '|';\n                    });\n                }\n            }\n            result.push('style=' + encodeURIComponent(style));\n        });\n        return result.join('&');\n    }\n\n};\n\nexport default geoHelper;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/core/geo.helper.js\n **/","const GOOGLE_MAPS_API_BASE = '//maps.googleapis.com/maps/api';\n\n/**\n * This file only includes partial documentation about `geolocator` enumerations.\n * Note that these enumerations are mostly an aggregation of\n * {@link https://developers.google.com/maps/documentation/javascript|Google Maps API} constants.\n *\n * @private\n * @readonly\n */\nconst enums = Object.freeze({\n    /**\n     * Enumerates API endpoints used within Geolocator core.\n     *\n     * @enum {String}\n     * @readonly\n     * @private\n     */\n    URL: {\n        /**\n         *  Public IP retrieval (free) service.\n         *  @type {String}\n         *  @private\n         */\n        IP: '//api.ipify.org',\n        /**\n         *  Country SVG flags.\n         *  e.g. <url>/tr.svg for Turkey flag.\n         *  @type {String}\n         *  @private\n         */\n        FLAG: '//cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.3.1/flags/4x3/',\n        /**\n         * Google Maps API bootstrap endpoint that loads all of the main\n         * Javascript objects and symbols for use in the Maps API.\n         * Some Maps API features are also available in self-contained\n         * libraries which are not loaded unless you specifically request them.\n         * See {@link https://developers.google.com/maps/documentation/javascript/libraries|details}.\n         * @type {String}\n         * @private\n         */\n        GOOGLE_MAPS_API: GOOGLE_MAPS_API_BASE + '/js',\n        /**\n         * Google Maps API Static Map endpoint.\n         * @type {String}\n         * @private\n         */\n        GOOGLE_SATATIC_MAP: GOOGLE_MAPS_API_BASE + '/staticmap',\n        /**\n         * Google Geolocation API endpoint.\n         * @type {String}\n         * @private\n         */\n        GOOGLE_GEOLOCATION: '//www.googleapis.com/geolocation/v1/geolocate',\n        /**\n         * Google Geocode API endpoint.\n         * @type {String}\n         * @private\n         */\n        GOOGLE_GEOCODE: '//maps.googleapis.com/maps/api/geocode/json',\n        /**\n         * Google TimeZone API endpoint.\n         * @type {String}\n         * @private\n         */\n        GOOGLE_TIMEZONE: '//maps.googleapis.com/maps/api/timezone/json',\n        /**\n         * Google Distance Matrix API endpoint.\n         * @type {String}\n         * @private\n         */\n        GOOGLE_DISTANCE_MATRIX: '//maps.googleapis.com/maps/api/distancematrix/json'\n    },\n    /**\n     * Enumerates Google map types.\n     * @memberof! geolocator\n     *\n     * @enum {String}\n     * @readonly\n     */\n    MapTypeId: {\n        /**\n         * Map type that displays a transparent layer of major streets on\n         * satellite images.\n         * @type {String}\n         */\n        HYBRID: 'hybrid',\n        /**\n         * Map type that displays a normal street map.\n         * @type {String}\n         */\n        ROADMAP: 'roadmap',\n        /**\n         * Map type that displays satellite images.\n         * @type {String}\n         */\n        SATELLITE: 'satellite',\n        /**\n         * Map type displays maps with physical features such as terrain and\n         * vegetation.\n         * @type {String}\n         */\n        TERRAIN: 'terrain'\n    },\n    /**\n     * Enumerates Google location types.\n     * @memberof! geolocator\n     *\n     * @enum {String}\n     * @readonly\n     */\n    LocationType: {\n        /**\n         * Indicates that the returned result is a precise geocode for which\n         * we have location information accurate down to street address\n         * precision.\n         * @type {String}\n         */\n        ROOFTOP: 'ROOFTOP',\n        /**\n         * Indicates that the returned result reflects an approximation\n         * (usually on a road) interpolated between two precise points (such as\n         * intersections). Interpolated results are generally returned when\n         * rooftop geocodes are unavailable for a street address.\n         * @type {String}\n         */\n        RANGE_INTERPOLATED: 'RANGE_INTERPOLATED',\n        /**\n         * Indicates that the returned result is the geometric center of a\n         * result such as a polyline (for example, a street) or polygon\n         * (region).\n         * @type {String}\n         */\n        GEOMETRIC_CENTER: 'GEOMETRIC_CENTER',\n        /**\n         * Indicates that the returned result is approximate.\n         * @type {String}\n         */\n        APPROXIMATE: 'APPROXIMATE'\n    },\n    /**\n     * Enumerates Google travel modes.\n     * @memberof! geolocator\n     *\n     * @enum {String}\n     * @readonly\n     */\n    TravelMode: {\n        /**\n         * Indicates distance calculation using the road network.\n         * @type {String}\n         */\n        DRIVING: 'DRIVING',\n        /**\n         * Requests distance calculation for walking via pedestrian paths &\n         * sidewalks (where available).\n         * @type {String}\n         */\n        WALKING: 'WALKING',\n        /**\n         * Requests distance calculation for bicycling via bicycle paths &\n         * preferred streets (where available).\n         * @type {String}\n         */\n        BICYCLING: 'BICYCLING',\n        /**\n         * Requests distance calculation via public transit routes (where\n         * available). This value may only be specified if the request includes\n         * an API key or a Google Maps APIs Premium Plan client ID. If you set\n         * the mode to transit you can optionally specify either a\n         * `departureTime` or an `arrivalTime`. If neither time is specified,\n         * the `departureTime` defaults to now (that is, the departure time defaults\n         * to the current time). You can also optionally include a `transitMode`\n         * and/or a `transitRoutingPreference`.\n         * @type {String}\n         */\n        TRANSIT: 'TRANSIT'\n    },\n    // /**\n    //  * Enumerates Google route restrictions.\n    //  * @memberof! geolocator\n    //  *\n    //  * @enum {String}\n    //  * @readonly\n    //  */\n    // RouteRestriction: {\n    //     TOLLS: 'tolls',\n    //     HIGHWAYS: 'highways',\n    //     FERRIES: 'ferries',\n    //     INDOOR: 'indoor'\n    // },\n    /**\n     * Enumerates Google unit systems.\n     * @memberof! geolocator\n     *\n     * @enum {Number}\n     * @readonly\n     */\n    UnitSystem: {\n        /**\n         * Distances in kilometers and meters.\n         * @type {Number}\n         */\n        METRIC: 0,\n        /**\n         * Distances defined in miles and feet.\n         * @type {Number}\n         */\n        IMPERIAL: 1\n    },\n    /**\n     * Enumerates mobile radio types.\n     * @memberof! geolocator\n     *\n     * @enum {String}\n     * @readonly\n     */\n    RadioType: {\n        /**\n         * LTE (Long-Term Evolution) mobile radio type.\n         * @type {String}\n         */\n        LTE: 'lte',\n        /**\n         * GSM (Global System for Mobile Communications) mobile radio type.\n         * @type {String}\n         */\n        GSM: 'gsm',\n        /**\n         * CDMA (Code division multiple access) mobile radio access technology.\n         * @type {String}\n         */\n        CDMA: 'cdma',\n        /**\n         * Wideband CDMA mobile radio access technology.\n         * @type {String}\n         */\n        WCDMA: 'wcdma'\n    },\n    /**\n     * Enumerates formulas/algorithms for calculating the distance between two\n     * lat/lng points.\n     * @memberof! geolocator\n     *\n     * @readonly\n     * @enum {String}\n     *\n     * @todo {@link https://en.wikipedia.org/wiki/Vincenty%27s_formulae|Vincenty's Formula}\n     */\n    DistanceFormula: {\n        /**\n         * Haversine formula for calculating the distance between two lat/lng points\n         * by relating the sides and angles of spherical triangles.\n         * @see {@link http://en.wikipedia.org/wiki/Haversine_formula|Haversine_formula}.\n         * @type {String}\n         */\n        HAVERSINE: 'haversine',\n        /**\n         * Formula based on the Pythagoras Theorem for calculating the\n         * distance between two lat/lng points on a Equirectangular projection\n         * to account for curvature of the longitude lines.\n         * @see {@link https://en.wikipedia.org/wiki/Pythagorean_theorem|Pythagorean_theorem}\n         * @type {String}\n         */\n        PYTHAGOREAN: 'pythagorean'\n    },\n    /**\n     *  Enumerates the image formats used for getting static Google Map images.\n     *  @memberof! geolocator\n     *\n     *  @readonly\n     *  @enum {String}\n     */\n    ImageFormat: {\n        /**\n         *  Specifies the PNG image format.\n         *  Same as `PNG_8`.\n         *  @type {String}\n         */\n        PNG: 'png',\n        /**\n         *  Specifies the 8-bit PNG image format.\n         *  Same as `PNG`.\n         *  @type {String}\n         */\n        PNG_8: 'png8',\n        /**\n         *  Specifies the 32-bit PNG image format.\n         *  @type {String}\n         */\n        PNG_32: 'png32',\n        /**\n         *  Specifies the GIF image format.\n         *  @type {String}\n         */\n        GIF: 'gif',\n        /**\n         *  Specifies the JPEG compressed image format.\n         *  @type {String}\n         */\n        JPG: 'jpg',\n        /**\n         *  Specifies a non-progressive JPEG compression image format.\n         *  @type {String}\n         */\n        JPG_BASELINE: 'jpg-baseline'\n    }\n});\n\nexport default enums;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/core/enums.js\n **/","import utils from '../lib/utils';\n\n/**\n * Geolocator Error class that provides a common type of error object for the\n * various APIs implemented in Geolocator. All callbacks of Geolocator will\n * include an instance of this object as the first argument; if the\n * corresponding operation fails. Also all thrown errors will be an instance of\n * this object.\n *\n * This object can be publicly accessed via `geolocator.Error`.\n *\n * @extends Error\n */\nclass GeoError { // extends Error (doesn't work with transpilers)\n\n    /**\n     * Costructs a new instance of `GeoError`.\n     *\n     * @param {String} [code=\"UNKNOWN_ERROR\"]\n     *        Any valid Geolocator Error code.\n     *        See {@link #GeoError.Code|`GeoError.Code` enumeration} for\n     *        possible values.\n     * @param {String} [message]\n     *        Error message. If omitted, this will be set to `code`.\n     *\n     * @returns {GeoError}\n     *\n     * @example\n     * var GeoError = geolocator.Error,\n     *     error = new GeoError(GeoError.Code.GEOLOCATION_NOT_SUPPORTED);\n     * console.log(error.code); // \"GEOLOCATION_NOT_SUPPORTED\"\n     * console.log(error instanceof GeoError); // true\n     */\n    constructor(code = GeoError.Code.UNKNOWN_ERROR, message) {\n        message = message || String(code);\n\n        /**\n         *  Gets the name of the Error object.\n         *  This always returns `\"GeoError\"`.\n         *  @name GeoError#name\n         *  @type {String}\n         */\n        Object.defineProperty(this, 'name', {\n            enumerable: false,\n            writable: false,\n            value: 'GeoError' // this.constructor.name\n        });\n\n        /**\n         *  Gets the error code set for this instance.\n         *  This will return one of\n         *  {@link #GeoError.Code|`GeoError.Code` enumeration}.\n         *  @name GeoError#code\n         *  @type {String}\n         */\n        Object.defineProperty(this, 'code', {\n            enumerable: false,\n            writable: true,\n            value: code\n        });\n\n        /**\n         *  Gets the error message set for this instance.\n         *  If no message is set, this will return the error code value.\n         *  @name GeoError#message\n         *  @type {String}\n         */\n        Object.defineProperty(this, 'message', {\n            enumerable: false,\n            writable: true,\n            value: message\n        });\n\n        if (Error.hasOwnProperty('captureStackTrace')) { // V8\n            Error.captureStackTrace(this, this.constructor);\n        } else {\n            /**\n             *  Gets the error stack for this instance.\n             *  @name GeoError#stack\n             *  @type {String}\n             */\n            Object.defineProperty(this, 'stack', {\n                enumerable: false,\n                writable: false,\n                value: (new Error(message)).stack\n            });\n        }\n    }\n\n    /**\n     * Creates a new instance of `GeoError` from the given value.\n     *\n     * @param {*} [err]\n     *        Value to be transformed. This is used to determine the proper\n     *        error code for the created instance. If an `Error` or `Object` is\n     *        passed, its `message` property is checked if it matches any of the\n     *        valid error codes. If omitted or no match is found, error code\n     *        `GeoError.Code.UNKNOWN_ERROR` will be used as default.\n     *\n     * @returns {GeoError}\n     *\n     * @example\n     * var GeoError = geolocator.Error,\n     * \t   error = GeoError.create();\n     * console.log(error.code); // \"UNKNOWN_ERROR\"\n     * error = GeoError.create(GeoError.Code.GEOLOCATION_NOT_SUPPORTED);\n     * console.log(error.code); // \"GEOLOCATION_NOT_SUPPORTED\"\n     */\n    static create(err) {\n        if (err instanceof GeoError) {\n            return err;\n        }\n\n        let code, msg;\n\n        if (utils.isPositionError(err) && err.code) {\n            switch (err.code) {\n                case 1:\n                    code = GeoError.Code.PERMISSION_DENIED;\n                    break;\n                case 2:\n                    code = GeoError.Code.POSITION_UNAVAILABLE;\n                    break;\n                case 3:\n                    code = GeoError.Code.TIMEOUT;\n                    break;\n                default:\n                    code = GeoError.Code.UNKNOWN_ERROR;\n                    break;\n            }\n            return new GeoError(code, err.message || '');\n        }\n\n        if (typeof err === 'string') {\n            code = msg = err;\n        } else if (typeof err === 'object') {\n            code = err.code || err.message;\n            msg = err.message || err.code;\n        }\n        if (code && GeoError.isValidErrorCode(code)) {\n            return new GeoError(code, msg);\n        }\n\n        return new GeoError(GeoError.Code.UNKNOWN_ERROR, msg);\n    }\n\n    /**\n     * Creates a new instance of `GeoError` from the given response object.\n     * Since Geolocator implements various Google APIs, we might receive\n     * responses if different structures. For example, some APIs return a\n     * response object with a `status:String` property (such as the TimeZone\n     * API) and some return responses with an `error:Object` property. This\n     * method will determine the correct reason or message and return a\n     * consistent error object.\n     *\n     * @param {Object|String} response\n     *        Response (Object) or status (String) to be transformed.\n     * @param {String} [message=null]\n     *        Error message.\n     *\n     * @returns {GeoError}\n     *          `GeoError` instance if response contains an error. Otherwise,\n     *          returns `null`.\n     *\n     * @example\n     * var error = geolocator.Error.fromResponse(googleResponse);\n     * console.log(error.code); // \"GOOGLE_KEY_INVALID\"\n     */\n    static fromResponse(response, message = '') {\n        // example Google Geolocation API response:\n        // https://developers.google.com/maps/documentation/geolocation/intro#errors\n        // {\n        //      \"error\": {\n        //          \"errors\": [\n        //              {\n        //                  \"domain\": \"global\",\n        //                  \"reason\": \"parseError\",\n        //                  \"message\": \"Parse Error\",\n        //              }\n        //          ],\n        //      \"code\": 400,\n        //      \"message\": \"Parse Error\"\n        //      }\n        // }\n        // example Google TimeZone API response:\n        // {\n        //     \"status\": \"REQUEST_DENIED\"\n        // }\n\n        if (!response) return new GeoError(GeoError.Code.INVALID_RESPONSE);\n\n        let errCode;\n\n        if (utils.isString(response)) {\n            errCode = errorCodeFromStatus(response);\n            if (errCode) return new GeoError(errCode, message || response);\n        }\n\n        if (!utils.isObject(response)) return null;\n\n        let errMsg = response.error_message\n            || response.errorMessage\n            || ((response.error && response.error.message) || '')\n            || '';\n\n        if (response.status) {\n            errCode = errorCodeFromStatus(response.status);\n            if (errCode) return new GeoError(errCode, errMsg || message || response.status);\n        }\n\n        if (response.error) {\n            let reason = response.reason || response.error.reason;\n            if (!reason) {\n                let errors = response.error.errors;\n                if (utils.isArray(errors) && errors.length > 0) {\n                    reason = errors[0].reason; // get the first reason only\n                    errMsg = errMsg || errors[0].message; // update errMsg\n                }\n            }\n            errCode = errorCodeFromReason(reason) || GeoError.Code.UNKNOWN_ERROR;\n            return new GeoError(errCode, errMsg || reason || message);\n        }\n\n        if (errMsg) {\n            errCode = errorCodeFromStatus(errMsg) || GeoError.Code.UNKNOWN_ERROR;\n            return new GeoError(errCode, errMsg || message);\n        }\n\n        return null;\n    }\n\n    /**\n     *  Checks whether the given value is an instance of `GeoError`.\n     *\n     *  @param {*} err - Object to be checked.\n     *\n     *  @returns {Boolean}\n     */\n    static isGeoError(err) {\n        return err instanceof GeoError;\n    }\n\n    /**\n     *  Checks whether the given value is a valid Geolocator Error code.\n     *\n     *  @param {String} errorCode - Error code to be checked.\n     *\n     *  @returns {Boolean}\n     */\n    static isValidErrorCode(errorCode) {\n        let prop;\n        for (prop in GeoError.Code) {\n            if (GeoError.Code.hasOwnProperty(prop)\n                    && errorCode === GeoError.Code[prop]) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n/**\n *  Gets the string representation of the error instance.\n *\n *  @returns {String}\n */\nGeoError.prototype.toString = function () {\n    var msg = this.code !== this.message ? ` (${this.message})` : '';\n    return `${this.name}: ${this.code}${msg}`;\n};\n\n// `class x extends Error` doesn't work when using an ES6 transpiler, such as\n// Babel, since subclasses must extend a class. With Babel 6, we need\n// transform-builtin-extend plugin for this to work. So we're extending from\n// Error the old way. Now, `err instanceof Error` also returns `true`.\nif (typeof Object.setPrototypeOf === 'function') {\n    Object.setPrototypeOf(GeoError.prototype, Error.prototype);\n} else {\n    GeoError.prototype = Object.create(Error.prototype);\n}\n\n// ---------------------------\n// ERROR CODES\n// ---------------------------\n\n/**\n *  Enumerates Geolocator error codes.\n *  This enumeration combines Google API status (error) codes, HTML5 Geolocation\n *  position error codes and other Geolocator-specific error codes.\n *  @enum {String}\n */\nGeoError.Code = {\n    /**\n     *  Indicates that HTML5 Geolocation API is not supported by the browser.\n     *  @type {String}\n     */\n    GEOLOCATION_NOT_SUPPORTED: 'GEOLOCATION_NOT_SUPPORTED',\n    /**\n     *  Indicates that Geolocation-IP source is not set or invalid.\n     *  @type {String}\n     */\n    INVALID_GEO_IP_SOURCE: 'INVALID_GEO_IP_SOURCE',\n    /**\n     *  The acquisition of the geolocation information failed because the\n     *  page didn't have the permission to do it.\n     *  @type {String}\n     */\n    PERMISSION_DENIED: 'PERMISSION_DENIED',\n    /**\n     *  The acquisition of the geolocation failed because at least one\n     *  internal source of position returned an internal error.\n     *  @type {String}\n     */\n    POSITION_UNAVAILABLE: 'POSITION_UNAVAILABLE',\n    /**\n     *  The time allowed to acquire the geolocation, defined by\n     *  PositionOptions.timeout information was reached before\n     *  the information was obtained.\n     *  @type {String}\n     */\n    TIMEOUT: 'TIMEOUT',\n    /**\n     * Indicates that the request had one or more invalid parameters.\n     * @type {String}\n     */\n    INVALID_PARAMETERS: 'INVALID_PARAMETERS',\n    /**\n     * Indicates that the service returned invalid response.\n     * @type {String}\n     */\n    INVALID_RESPONSE: 'INVALID_RESPONSE',\n    /**\n     * Generally indicates that the query (address, components or latlng)\n     * is missing.\n     * @type {String}\n     */\n    INVALID_REQUEST: 'INVALID_REQUEST',\n    /**\n     * Indicates that the request was denied by the service.\n     * This will generally occur because of a missing API key or because the request\n     * is sent over HTTP instead of HTTPS.\n     * @type {String}\n     */\n    REQUEST_DENIED: 'REQUEST_DENIED',\n    /**\n     * Indicates that the request has failed.\n     * This will generally occur because of an XHR error.\n     * @type {String}\n     */\n    REQUEST_FAILED: 'REQUEST_FAILED',\n    /**\n     * Indicates that Google API could not be loaded.\n     * @type {String}\n     */\n    GOOGLE_API_FAILED: 'GOOGLE_API_FAILED',\n    /**\n     * Indicates that you are over your Google API quota.\n     * @type {String}\n     */\n    OVER_QUERY_LIMIT: 'OVER_QUERY_LIMIT',\n    /**\n     * Indicates that you've exceeded the requests per second per user limit that\n     * you configured in the Google Developers Console. This limit should be\n     * configured to prevent a single or small group of users from exhausting your\n     * daily quota, while still allowing reasonable access to all users.\n     * @type {String}\n     */\n    USER_RATE_LIMIT_EXCEEDED: 'USER_RATE_LIMIT_EXCEEDED',\n    /**\n     * Indicates that you've exceeded your daily limit for Google API(s).\n     * @type {String}\n     */\n    DAILY_LIMIT_EXCEEDED: 'DAILY_LIMIT_EXCEEDED',\n    /**\n     * Indicates that your Google API key is not valid. Please ensure that you've\n     * included the entire key, and that you've either purchased the API or have\n     * enabled billing and activated the API to obtain the free quota.\n     * @type {String}\n     */\n    GOOGLE_KEY_INVALID: 'GOOGLE_KEY_INVALID',\n    /**\n     * Indicates that maximum number of elements limit is exceeded. For\n     * example, for the Distance Matrix API; occurs when the product of\n     * origins and destinations exceeds the per-query limit.\n     * @type {String}\n     */\n    MAX_ELEMENTS_EXCEEDED: 'MAX_ELEMENTS_EXCEEDED',\n    /**\n     * Indicates that the request contained more than 25 origins,\n     * or more than 25 destinations.\n     * @type {String}\n     */\n    MAX_DIMENSIONS_EXCEEDED: 'MAX_DIMENSIONS_EXCEEDED',\n    /**\n     * Indicates that the request contained more than allowed waypoints.\n     * @type {String}\n     */\n    MAX_WAYPOINTS_EXCEEDED: 'MAX_WAYPOINTS_EXCEEDED',\n    /**\n     * Indicates that the request body is not valid JSON.\n     * @type {String}\n     */\n    PARSE_ERROR: 'PARSE_ERROR',\n    /**\n     * Indicates that the requested resource could not be found.\n     * Note that this also covers `ZERO_RESULTS`.\n     * @type {String}\n     */\n    NOT_FOUND: 'NOT_FOUND',\n    /**\n     * Indicates that an internal error (such as XHR cross-domain, etc) has occured.\n     * @type {String}\n     */\n    INTERNAL_ERROR: 'INTERNAL_ERROR',\n    /**\n     * Indicates that an unknown error has occured.\n     * @type {String}\n     */\n    UNKNOWN_ERROR: 'UNKNOWN_ERROR'\n};\n\n// ---------------------------\n// HELPER METHODS\n// ---------------------------\n\n/**\n *  @private\n */\nfunction errorCodeFromStatus(status) {\n    if (!status) return GeoError.Code.INVALID_RESPONSE;\n    if (status === 'OK') return null;\n    if (status === 'ZERO_RESULTS') return GeoError.Code.NOT_FOUND;\n    if (GeoError.Code.hasOwnProperty(status)) return status;\n    return null;\n}\n\n/**\n *  Gets `GeoError.Code` from the given response error reason.\n *  @private\n *\n *  @param {String} reason\n *         Google response error reason.\n *\n *  @returns {String}\n */\nfunction errorCodeFromReason(reason) {\n    switch (reason) {\n        case 'invalid':\n            return GeoError.Code.INVALID_REQUEST;\n        case 'dailyLimitExceeded':\n            return GeoError.Code.DAILY_LIMIT_EXCEEDED;\n        case 'keyInvalid':\n            return GeoError.Code.GOOGLE_KEY_INVALID;\n        case 'userRateLimitExceeded':\n            return GeoError.Code.USER_RATE_LIMIT_EXCEEDED;\n        case 'notFound':\n            return GeoError.Code.NOT_FOUND;\n        case 'parseError':\n            return GeoError.Code.PARSE_ERROR;\n        default:\n            return null;\n    }\n}\n\n// ---------------------------\n// EXPORT\n// ---------------------------\n\nexport default GeoError;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/core/geo.error.js\n **/","import utils from '../lib/utils';\n\nclass GeoWatcher {\n\n    constructor(onChange, onError, options = {}) {\n        this.isCleared = false;\n        this.cycle = 0;\n        this._timer = null;\n        this.id = navigator.geolocation.watchPosition(\n            pos => {\n                this.cycle++;\n                if (utils.isFunction(onChange)) onChange(pos);\n            },\n            err => {\n                this.cycle++;\n                if (utils.isFunction(onError)) onError(err);\n                if (options.clearOnError) {\n                    this.clear();\n                }\n            },\n            options\n        );\n    }\n\n    _clear() {\n        navigator.geolocation.clearWatch(this.id);\n        this.isCleared = true;\n        this._timer = null;\n    }\n\n    clear(delay, callback) {\n        let d = utils.isNumber(delay) ? delay : 0,\n            cb = utils.isFunction(callback) ? callback\n                : utils.isFunction(delay) ? delay : null;\n        // clear any previous timeout\n        if (this._timer) {\n            clearTimeout(this._timer);\n            this._timer = null;\n        }\n        // check if watcher is not cleared\n        if (!this.isCleared) {\n            if (d === 0) {\n                this._clear();\n                if (cb) cb();\n                return;\n            }\n            this._timer = setTimeout(() => {\n                this._clear();\n                if (cb) cb();\n            }, d);\n        }\n    }\n\n}\n\n// ---------------------------\n// EXPORT\n// ---------------------------\n\nexport default GeoWatcher;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/core/geo.watcher.js\n **/"],"sourceRoot":""}